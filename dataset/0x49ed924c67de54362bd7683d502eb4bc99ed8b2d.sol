{{
  "language": "Solidity",
  "sources": {
    "contracts/strategies/matic/quick/StrategyQuickSwapLp.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\npragma solidity 0.8.4;\r\n\r\nimport \"../../../base/strategies/snx-base/SNXStrategyFullBuyback.sol\";\r\nimport \"../../../third_party/quick/IStakingRewards.sol\";\r\nimport \"../../../third_party/uniswap/IUniswapV2Pair.sol\";\r\n\r\n/// @title SNXStrategyFullBuyback implementation for QuickSwap platform\r\n/// @author belbix\r\ncontract StrategyQuickSwapLp is SNXStrategyFullBuyback {\r\n\r\n  IStrategy.Platform private constant _PLATFORM = IStrategy.Platform.QUICK;\r\n  address private constant QUICK_REWARD_TOKEN = address(0x831753DD7087CaC61aB5644b308642cc1c33Dc13);\r\n  address[] private quickPoolRewards = [QUICK_REWARD_TOKEN];\r\n  address[] private _assets;\r\n\r\n  constructor(\r\n    address _controller,\r\n    address _vault,\r\n    address _underlying,\r\n    address _token0,\r\n    address _token1,\r\n    address _quickRewardPool\r\n  ) SNXStrategyFullBuyback(_controller, _underlying, _vault, quickPoolRewards, _quickRewardPool) {\r\n    require(_underlying != address(0), \"zero underlying\");\r\n    require(_token0 != address(0), \"zero token0\");\r\n    require(_token1 != address(0), \"zero token1\");\r\n    require(_quickRewardPool != address(0), \"zero quickRewardPool\");\r\n    require(_token0 != _token1, \"same tokens\");\r\n    require(address(IStakingRewards(_quickRewardPool).stakingToken()) == _underlying, \"wrong pool\");\r\n\r\n    _assets.push(_token0);\r\n    _assets.push(_token1);\r\n\r\n    address token0 = IUniswapV2Pair(_underlying).token0();\r\n    address token1 = IUniswapV2Pair(_underlying).token1();\r\n    require(_token0 == token0 || _token0 == token1, \"wrong token0\");\r\n    require(_token1 == token0 || _token1 == token1, \"wrong token1\");\r\n  }\r\n\r\n  function platform() external override pure returns (IStrategy.Platform) {\r\n    return _PLATFORM;\r\n  }\r\n\r\n  // assets should reflect underlying tokens for investing\r\n  function assets() external override view returns (address[] memory) {\r\n    return _assets;\r\n  }\r\n}\r\n"
    },
    "contracts/base/strategies/snx-base/SNXStrategyFullBuyback.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../StrategyBase.sol\";\r\nimport \"./interfaces/SNXRewardInterface.sol\";\r\n\r\n/// @title Abstract contract for Synthetix strategy implementation\r\n/// @author belbix\r\nabstract contract SNXStrategyFullBuyback is StrategyBase {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // ************ VARIABLES **********************\r\n  /// @notice Strategy type for statistical purposes\r\n  string public constant STRATEGY_NAME = \"SNXStrategyFullBuyback\";\r\n  /// @notice Version of the contract\r\n  /// @dev Should be incremented when contract changed\r\n  string public constant VERSION = \"1.0.0\";\r\n  /// @dev Placeholder, for non full buyback need to implement liquidation\r\n  uint256 private constant _BUY_BACK_RATIO = 10000;  // for non full buyback need to implement liquidation\r\n\r\n  /// @notice Synthetix like poll with rewards\r\n  SNXRewardInterface public rewardPool;\r\n\r\n  /// @notice Contract constructor using on strategy implementation\r\n  /// @dev The implementation should check each parameter\r\n  /// @param _controller Controller address\r\n  /// @param _underlying Underlying token address\r\n  /// @param _vault SmartVault address that will provide liquidity\r\n  /// @param __rewardTokens Reward tokens that the strategy will farm\r\n  /// @param _rewardPool Synthetix pool address\r\n  constructor(\r\n    address _controller,\r\n    address _underlying,\r\n    address _vault,\r\n    address[] memory __rewardTokens,\r\n    address _rewardPool\r\n  ) StrategyBase(_controller, _underlying, _vault, __rewardTokens, _BUY_BACK_RATIO) {\r\n    require(_rewardPool != address(0), \"zero address pool\");\r\n    rewardPool = SNXRewardInterface(_rewardPool);\r\n  }\r\n\r\n  // ************* VIEWS *******************\r\n\r\n  /// @notice Strategy balance in the Synthetix pool\r\n  /// @return Balance amount in underlying tokens\r\n  function rewardPoolBalance() public override view returns (uint256) {\r\n    return rewardPool.balanceOf(address(this));\r\n  }\r\n\r\n  /// @notice Return approximately amount of reward tokens ready to claim in the Synthetix pool\r\n  /// @dev Don't use it in any internal logic, only for statistical purposes\r\n  /// @return Array with amounts ready to claim\r\n  function readyToClaim() external view override returns (uint256[] memory) {\r\n    uint256[] memory toClaim = new uint256[](1);\r\n    toClaim[0] = rewardPool.earned(address(this));\r\n    return toClaim;\r\n  }\r\n\r\n  /// @notice TVL of the underlying in the Synthetix pool\r\n  /// @dev Only for statistic\r\n  /// @return Pool TVL\r\n  function poolTotalAmount() external view override returns (uint256) {\r\n    return rewardPool.totalSupply();\r\n  }\r\n\r\n  /// @notice Calculate approximately weekly reward amounts for each reward tokens\r\n  /// @dev Don't use it in any internal logic, only for statistical purposes\r\n  /// @return Array of weekly reward amounts\r\n  function poolWeeklyRewardsAmount() external view override returns (uint256[] memory) {\r\n    uint256[] memory rewards = new uint256[](1);\r\n\r\n    uint256 rtBalance = IERC20(rewardTokens()[0]).balanceOf(address(rewardPool));\r\n    uint256 time = rewardPool.periodFinish() - rewardPool.lastUpdateTime();\r\n    rewards[0] = rtBalance * (1 weeks * 1e18 / time) / 1e18;\r\n\r\n    return rewards;\r\n  }\r\n\r\n  // ************ GOVERNANCE ACTIONS **************************\r\n\r\n  /// @notice Claim rewards from external project and send them to FeeRewardForwarder\r\n  function doHardWork() external onlyNotPausedInvesting override restricted {\r\n    rewardPool.getReward();\r\n    liquidateReward();\r\n    investAllUnderlying();\r\n  }\r\n\r\n  // ************ INTERNAL LOGIC IMPLEMENTATION **************************\r\n\r\n  /// @dev Deposit underlying to the Synthetix pool\r\n  /// @param amount Deposit amount\r\n  function depositToPool(uint256 amount) internal override {\r\n    IERC20(_underlyingToken).safeApprove(address(rewardPool), 0);\r\n    IERC20(_underlyingToken).safeApprove(address(rewardPool), amount);\r\n    rewardPool.stake(amount);\r\n  }\r\n\r\n  /// @dev Deposit underlying to the Synthetix pool\r\n  /// @param amount Deposit amount\r\n  function withdrawAndClaimFromPool(uint256 amount) internal override {\r\n    rewardPool.withdraw(amount);\r\n  }\r\n\r\n  /// @dev Exit from external project without caring about rewards\r\n  ///      For emergency cases only!\r\n  function emergencyWithdrawFromPool() internal override {\r\n    rewardPool.exit();\r\n  }\r\n\r\n  /// @dev Do something useful with farmed rewards\r\n  function liquidateReward() internal override {\r\n    liquidateRewardDefault();\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/third_party/quick/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IStakingRewards {\r\n  // Mutative\r\n  function stake(uint256 amount) external;\r\n\r\n  function withdraw(uint256 amount) external;\r\n\r\n  function getReward() external;\r\n\r\n  function exit() external;\r\n\r\n  // Views\r\n  function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n  function rewardPerToken() external view returns (uint256);\r\n\r\n  function earned(address account) external view returns (uint256);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function rewardsToken() external view returns (IERC20);\r\n\r\n  function stakingToken() external view returns (IERC20);\r\n\r\n  function periodFinish() external view returns (uint256);\r\n\r\n  function rewardRate() external view returns (uint256);\r\n\r\n  function lastUpdateTime() external view returns (uint256);\r\n\r\n  function rewardPerTokenStored() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/third_party/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-05-05\r\n*/\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute.\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/base/strategies/StrategyBase.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../interface/IStrategy.sol\";\r\nimport \"../governance/Controllable.sol\";\r\nimport \"../interface/IFeeRewardForwarder.sol\";\r\nimport \"../interface/IBookkeeper.sol\";\r\n\r\n/// @title Abstract contract for base strategy functionality\r\n/// @author belbix\r\nabstract contract StrategyBase is IStrategy, Controllable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  //************************ VARIABLES **************************\r\n  address internal _underlyingToken;\r\n  address internal _smartVault;\r\n  mapping(address => bool) internal _unsalvageableTokens;\r\n  /// @dev we always use 100% buybacks but keep this variable to further possible changes\r\n  uint256 internal _buyBackRatio;\r\n  /// @dev When this flag is true, the strategy will not be able to invest. But users should be able to withdraw.\r\n  bool public override pausedInvesting = false;\r\n  address[] internal _rewardTokens;\r\n\r\n\r\n  //************************ MODIFIERS **************************\r\n\r\n  /// @dev Only for linked Vault or Governance/Controller.\r\n  ///      Use for functions that should have strict access.\r\n  modifier restricted() {\r\n    require(msg.sender == _smartVault\r\n    || msg.sender == address(controller())\r\n      || isGovernance(msg.sender),\r\n      \"forbidden\");\r\n    _;\r\n  }\r\n\r\n  /// @dev This is only used in `investAllUnderlying()`\r\n  ///      The user can still freely withdraw from the strategy\r\n  modifier onlyNotPausedInvesting() {\r\n    require(!pausedInvesting, \"paused\");\r\n    _;\r\n  }\r\n\r\n  /// @notice Contract constructor using on Base Strategy implementation\r\n  /// @param _controller Controller address\r\n  /// @param _underlying Underlying token address\r\n  /// @param _vault SmartVault address that will provide liquidity\r\n  /// @param __rewardTokens Reward tokens that the strategy will farm\r\n  /// @param _bbRatio Buy back ratio\r\n  constructor(\r\n    address _controller,\r\n    address _underlying,\r\n    address _vault,\r\n    address[] memory __rewardTokens,\r\n    uint256 _bbRatio\r\n  ) {\r\n    Controllable.initializeControllable(_controller);\r\n    _underlyingToken = _underlying;\r\n    _smartVault = _vault;\r\n    _rewardTokens = __rewardTokens;\r\n    _buyBackRatio = _bbRatio;\r\n\r\n    // prohibit the movement of tokens that are used in the main logic\r\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n      _unsalvageableTokens[_rewardTokens[i]] = true;\r\n    }\r\n    _unsalvageableTokens[_underlying] = true;\r\n  }\r\n\r\n  // *************** VIEWS ****************\r\n\r\n  /// @notice Reward tokens of external project\r\n  /// @return Reward tokens array\r\n  function rewardTokens() public view override returns (address[] memory) {\r\n    return _rewardTokens;\r\n  }\r\n\r\n  /// @notice Strategy underlying, the same in the Vault\r\n  /// @return Strategy underlying token\r\n  function underlying() external view override returns (address) {\r\n    return _underlyingToken;\r\n  }\r\n\r\n  /// @notice Underlying balance of this contract\r\n  /// @return Balance of underlying token\r\n  function underlyingBalance() public view override returns (uint256) {\r\n    return IERC20(_underlyingToken).balanceOf(address(this));\r\n  }\r\n\r\n  /// @notice SmartVault address linked to this strategy\r\n  /// @return Vault address\r\n  function vault() external view override returns (address) {\r\n    return _smartVault;\r\n  }\r\n\r\n  /// @notice Return true for tokens that governance can't touch\r\n  /// @return True if given token unsalvageable\r\n  function unsalvageableTokens(address token) external override view returns (bool) {\r\n    return _unsalvageableTokens[token];\r\n  }\r\n\r\n  /// @notice Strategy buy back ratio. Currently stubbed to 100%\r\n  /// @return Buy back ratio\r\n  function buyBackRatio() external view override returns (uint256) {\r\n    return _buyBackRatio;\r\n  }\r\n\r\n  /// @notice Balance of given token on this contract\r\n  /// @return Balance of given token\r\n  function rewardBalance(uint256 rewardTokenIdx) public view returns (uint256) {\r\n    return IERC20(_rewardTokens[rewardTokenIdx]).balanceOf(address(this));\r\n  }\r\n\r\n  /// @notice Return underlying balance + balance in the reward pool\r\n  /// @return Sum of underlying balances\r\n  function investedUnderlyingBalance() external override view returns (uint256) {\r\n    // Adding the amount locked in the reward pool and the amount that is somehow in this contract\r\n    // both are in the units of \"underlying\"\r\n    // The second part is needed because there is the emergency exit mechanism\r\n    // which would break the assumption that all the funds are always inside of the reward pool\r\n    return rewardPoolBalance().add(underlyingBalance());\r\n  }\r\n\r\n  //******************** GOVERNANCE *******************\r\n\r\n\r\n  /// @notice In case there are some issues discovered about the pool or underlying asset\r\n  ///         Governance can exit the pool properly\r\n  ///         The function is only used for emergency to exit the pool\r\n  ///         Pause investing\r\n  function emergencyExit() external override onlyControllerOrGovernance {\r\n    emergencyExitRewardPool();\r\n    pausedInvesting = true;\r\n  }\r\n\r\n\r\n  /// @notice Resumes the ability to invest into the underlying reward pools\r\n  function continueInvesting() external override onlyControllerOrGovernance {\r\n    pausedInvesting = false;\r\n  }\r\n\r\n  /// @notice Controller can claim coins that are somehow transferred into the contract\r\n  ///         Note that they cannot come in take away coins that are used and defined in the strategy itself\r\n  /// @param recipient Recipient address\r\n  /// @param recipient Token address\r\n  /// @param recipient Token amount\r\n  function salvage(address recipient, address token, uint256 amount)\r\n  external override onlyController {\r\n    // To make sure that governance cannot come in and take away the coins\r\n    require(!_unsalvageableTokens[token], \"not salvageable\");\r\n    IERC20(token).safeTransfer(recipient, amount);\r\n  }\r\n\r\n  /// @notice Withdraws all the asset to the vault\r\n  function withdrawAllToVault() external override restricted {\r\n    exitRewardPool();\r\n    IERC20(_underlyingToken).safeTransfer(_smartVault, underlyingBalance());\r\n  }\r\n\r\n  /// @notice Withdraws some asset to the vault\r\n  /// @param amount Asset amount\r\n  function withdrawToVault(uint256 amount) external override restricted {\r\n    // Typically there wouldn't be any amount here\r\n    // however, it is possible because of the emergencyExit\r\n    if (amount > underlyingBalance()) {\r\n      // While we have the check above, we still using SafeMath below\r\n      // for the peace of mind (in case something gets changed in between)\r\n      uint256 needToWithdraw = amount.sub(underlyingBalance());\r\n      uint256 toWithdraw = Math.min(rewardPoolBalance(), needToWithdraw);\r\n      withdrawAndClaimFromPool(toWithdraw);\r\n    }\r\n\r\n    IERC20(_underlyingToken).safeTransfer(_smartVault, amount);\r\n  }\r\n\r\n  /// @notice Stakes everything the strategy holds into the reward pool\r\n  function investAllUnderlying() public override restricted onlyNotPausedInvesting {\r\n    // this check is needed, because most of the SNX reward pools will revert if\r\n    // you try to stake(0).\r\n    if (underlyingBalance() > 0) {\r\n      depositToPool(underlyingBalance());\r\n    }\r\n  }\r\n\r\n  // ***************** INTERNAL ************************\r\n\r\n  /// @dev Withdraw everything from external pool\r\n  function exitRewardPool() internal {\r\n    uint256 bal = rewardPoolBalance();\r\n    if (bal != 0) {\r\n      withdrawAndClaimFromPool(bal);\r\n    }\r\n  }\r\n\r\n  /// @dev Withdraw everything from external pool without caring about rewards\r\n  function emergencyExitRewardPool() internal {\r\n    uint256 bal = rewardPoolBalance();\r\n    if (bal != 0) {\r\n      emergencyWithdrawFromPool();\r\n    }\r\n  }\r\n\r\n  /// @dev Default implementation of liquidation process\r\n  ///      Send all profit to FeeRewardForwarder\r\n  function liquidateRewardDefault() internal {\r\n    address forwarder = IController(controller()).feeRewardForwarder();\r\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n      uint256 amount = rewardBalance(i);\r\n      address rt = _rewardTokens[i];\r\n      IERC20(rt).safeApprove(forwarder, 0);\r\n      IERC20(rt).safeApprove(forwarder, amount);\r\n      // it will sell reward token to Target Token and distribute it to SmartVault and PS\r\n      uint256 targetTokenEarned = IFeeRewardForwarder(forwarder).distribute(amount, rt, _smartVault);\r\n      if (targetTokenEarned > 0) {\r\n        IBookkeeper(IController(controller()).bookkeeper()).registerStrategyEarned(targetTokenEarned);\r\n      }\r\n    }\r\n  }\r\n\r\n  //******************** VIRTUAL *********************\r\n  // This functions should be implemented in the strategy contract\r\n\r\n  function rewardPoolBalance() public virtual override view returns (uint256 bal);\r\n\r\n  //slither-disable-next-line dead-code\r\n  function depositToPool(uint256 amount) internal virtual;\r\n\r\n  //slither-disable-next-line dead-code\r\n  function withdrawAndClaimFromPool(uint256 amount) internal virtual;\r\n\r\n  //slither-disable-next-line dead-code\r\n  function emergencyWithdrawFromPool() internal virtual;\r\n\r\n  //slither-disable-next-line dead-code\r\n  function liquidateReward() internal virtual;\r\n\r\n}\r\n"
    },
    "contracts/base/strategies/snx-base/interfaces/SNXRewardInterface.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface SNXRewardInterface {\r\n  function withdraw(uint) external;\r\n\r\n  function getReward() external;\r\n\r\n  function stake(uint) external;\r\n\r\n  function exit() external;\r\n\r\n  function balanceOf(address) external view returns (uint256);\r\n\r\n  function earned(address account) external view returns (uint256);\r\n\r\n  function periodFinish() external view returns (uint256);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function lastUpdateTime() external view returns (uint256);\r\n\r\n  function rewardRate() external view returns (uint256);\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/base/interface/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IStrategy {\r\n\r\n  enum Platform {\r\n    UNKNOWN, // 0\r\n    TETU, // 1\r\n    QUICK, // 2\r\n    SUSHI, // 3\r\n    WAULT // 4\r\n  }\r\n\r\n  // *************** GOVERNANCE ACTIONS **************\r\n  function withdrawAllToVault() external;\r\n\r\n  function withdrawToVault(uint256 amount) external;\r\n\r\n  function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n  function doHardWork() external;\r\n\r\n  function investAllUnderlying() external;\r\n\r\n  function emergencyExit() external;\r\n\r\n  function continueInvesting() external;\r\n\r\n  // **************** VIEWS ***************\r\n  function rewardTokens() external view returns (address[] memory);\r\n\r\n  function underlying() external view returns (address);\r\n\r\n  function underlyingBalance() external view returns (uint256);\r\n\r\n  function rewardPoolBalance() external view returns (uint256);\r\n\r\n  function buyBackRatio() external view returns (uint256);\r\n\r\n  function unsalvageableTokens(address token) external view returns (bool);\r\n\r\n  function vault() external view returns (address);\r\n\r\n  function investedUnderlyingBalance() external view returns (uint256);\r\n\r\n  function platform() external view returns (Platform);\r\n\r\n  function assets() external view returns (address[] memory);\r\n\r\n  function pausedInvesting() external view returns (bool);\r\n\r\n  function readyToClaim() external view returns (uint256[] memory);\r\n\r\n  function poolTotalAmount() external view returns (uint256);\r\n\r\n  function poolWeeklyRewardsAmount() external view returns (uint256[] memory);\r\n}\r\n"
    },
    "contracts/base/governance/Controllable.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../interface/IController.sol\";\r\nimport \"../interface/IControllable.sol\";\r\n\r\n/// @title Implement basic functionality for any contract that require strict control\r\n/// @dev Can be used with upgradeable pattern.\r\n///      Require call initializeControllable() in any case.\r\n/// @author belbix\r\nabstract contract Controllable is Initializable, IControllable {\r\n  bytes32 internal constant _CONTROLLER_SLOT = 0x5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3617;\r\n  bytes32 internal constant _CREATED_SLOT = 0x6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8a;\r\n\r\n  /// @notice Controller address changed\r\n  event UpdateController(address oldValue, address newValue);\r\n\r\n  constructor() {\r\n    assert(_CONTROLLER_SLOT == bytes32(uint256(keccak256(\"eip1967.controllable.controller\")) - 1));\r\n    assert(_CREATED_SLOT == bytes32(uint256(keccak256(\"eip1967.controllable.created\")) - 1));\r\n  }\r\n\r\n  /// @notice Initialize contract after setup it as proxy implementation\r\n  ///         Save block.timestamp in the \"created\" variable\r\n  /// @dev Use it only once after first logic setup\r\n  /// @param _controller Controller address\r\n  function initializeControllable(address _controller) public initializer {\r\n    setController(_controller);\r\n    setCreated(block.timestamp);\r\n  }\r\n\r\n  function isController(address _adr) public override view returns (bool) {\r\n    return _adr == controller();\r\n  }\r\n\r\n  /// @notice Return true is given address is setup as governance in Controller\r\n  /// @param _adr Address for check\r\n  /// @return true if given address is governance\r\n  function isGovernance(address _adr) public override view returns (bool) {\r\n    return IController(controller()).governance() == _adr;\r\n  }\r\n\r\n  // ************ MODIFIERS **********************\r\n\r\n  /// @dev Allow operation only for Controller\r\n  modifier onlyController() {\r\n    require(controller() == msg.sender, \"not controller\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Allow operation only for Controller or Governance\r\n  modifier onlyControllerOrGovernance() {\r\n    require(isController(msg.sender) || isGovernance(msg.sender), \"not controller or gov\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Only smart contracts will be affected by this modifier\r\n  ///      If it is a contract it should be whitelisted\r\n  modifier onlyAllowedUsers() {\r\n    require(IController(controller()).isAllowedUser(msg.sender), \"not allowed\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Only Reward Distributor allowed. Governance is Reward Distributor by default.\r\n  modifier onlyRewardDistribution() {\r\n    require(IController(controller()).isRewardDistributor(msg.sender), \"only distr\");\r\n    _;\r\n  }\r\n\r\n  // ************* SETTERS/GETTERS *******************\r\n\r\n  /// @notice Return controller address saved in the contract slot\r\n  /// @return adr Controller address\r\n  function controller() public view returns (address adr) {\r\n    bytes32 slot = _CONTROLLER_SLOT;\r\n    assembly {\r\n      adr := sload(slot)\r\n    }\r\n  }\r\n\r\n  /// @dev Set a controller address to contract slot\r\n  /// @param _newController Controller address\r\n  function setController(address _newController) internal {\r\n    require(_newController != address(0), \"zero address\");\r\n    emit UpdateController(controller(), _newController);\r\n    bytes32 slot = _CONTROLLER_SLOT;\r\n    assembly {\r\n      sstore(slot, _newController)\r\n    }\r\n  }\r\n\r\n  /// @notice Return creation timestamp\r\n  /// @return ts Creation timestamp\r\n  function created() external view returns (uint256 ts) {\r\n    bytes32 slot = _CREATED_SLOT;\r\n    assembly {\r\n      ts := sload(slot)\r\n    }\r\n  }\r\n\r\n  /// @dev Filled only once when contract initialized\r\n  /// @param _created block.timestamp\r\n  function setCreated(uint256 _created) private {\r\n    bytes32 slot = _CREATED_SLOT;\r\n    assembly {\r\n      sstore(slot, _created)\r\n    }\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/base/interface/IFeeRewardForwarder.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IFeeRewardForwarder {\r\n  function distribute(uint256 _amount, address _token, address _vault) external returns (uint256);\r\n\r\n  function notifyPsPool(address _token, uint256 _amount) external returns (uint256);\r\n\r\n  function notifyCustomPool(address _token, address _rewardPool, uint256 _maxBuyback) external returns (uint256);\r\n}\r\n"
    },
    "contracts/base/interface/IBookkeeper.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IBookkeeper {\r\n\r\n  struct PpfsChange {\r\n    address vault;\r\n    uint256 block;\r\n    uint256 time;\r\n    uint256 value;\r\n    uint256 oldBlock;\r\n    uint256 oldTime;\r\n    uint256 oldValue;\r\n  }\r\n\r\n  struct HardWork {\r\n    address strategy;\r\n    uint256 block;\r\n    uint256 time;\r\n    uint256 targetTokenAmount;\r\n  }\r\n\r\n  function addVault(address _vault) external;\r\n\r\n  function addStrategy(address _strategy) external;\r\n\r\n  function registerStrategyEarned(uint256 _targetTokenAmount) external;\r\n\r\n  function registerFundKeeperEarned(address _token, uint256 _fundTokenAmount) external;\r\n\r\n  function registerUserAction(address _user, uint256 _amount, bool _deposit) external;\r\n\r\n  function registerVaultTransfer(address from, address to, uint256 amount) external;\r\n\r\n  function registerUserEarned(address _user, address _vault, address _rt, uint256 _amount) external;\r\n\r\n  function registerPpfsChange(address vault, uint256 value) external;\r\n\r\n  function vaults() external view returns (address[] memory);\r\n\r\n  function vaultsLength() external view returns (uint256);\r\n\r\n  function strategies() external view returns (address[] memory);\r\n\r\n  function strategiesLength() external view returns (uint256);\r\n\r\n  function lastPpfsChange(address vault) external view returns (PpfsChange memory);\r\n\r\n  /// @notice Return total earned TETU tokens for strategy\r\n  /// @dev Should be incremented after strategy rewards distribution\r\n  /// @param vault Strategy address\r\n  /// @return Earned TETU tokens\r\n  function targetTokenEarned(address vault) external view returns (uint256);\r\n\r\n  /// @notice Return share(xToken) balance of given user\r\n  /// @dev Should be calculated for each xToken transfer\r\n  /// @param vault Vault address\r\n  /// @param user User address\r\n  /// @return User share (xToken) balance\r\n  function vaultUsersBalances(address vault, address user) external view returns (uint256);\r\n\r\n  /// @notice Return earned token amount for given token and user\r\n  /// @dev Fills when user claim rewards\r\n  /// @param user User address\r\n  /// @param vault Vault address\r\n  /// @param token Token address\r\n  /// @return User's earned tokens amount\r\n  function userEarned(address user, address vault, address token) external view returns (uint256);\r\n\r\n  function lastHardWork(address vault) external view returns (HardWork memory);\r\n\r\n  /// @notice Return users quantity for given Vault\r\n  /// @dev Calculation based in Bookkeeper user balances\r\n  /// @param vault Vault address\r\n  /// @return Users quantity\r\n  function vaultUsersQuantity(address vault) external view returns (uint256);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/base/interface/IController.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IController {\r\n\r\n  function addVaultAndStrategy(address _vault, address _strategy) external;\r\n\r\n  function addStrategy(address _strategy) external;\r\n\r\n  function governance() external view returns (address);\r\n\r\n  function dao() external view returns (address);\r\n\r\n  function bookkeeper() external view returns (address);\r\n\r\n  function feeRewardForwarder() external view returns (address);\r\n\r\n  function mintHelper() external view returns (address);\r\n\r\n  function rewardToken() external view returns (address);\r\n\r\n  function fundToken() external view returns (address);\r\n\r\n  function psVault() external view returns (address);\r\n\r\n  function fund() external view returns (address);\r\n\r\n  function announcer() external view returns (address);\r\n\r\n  function vaultController() external view returns (address);\r\n\r\n  function whiteList(address _target) external view returns (bool);\r\n\r\n  function vaults(address _target) external view returns (bool);\r\n\r\n  function strategies(address _target) external view returns (bool);\r\n\r\n  function psNumerator() external view returns (uint256);\r\n\r\n  function psDenominator() external view returns (uint256);\r\n\r\n  function fundNumerator() external view returns (uint256);\r\n\r\n  function fundDenominator() external view returns (uint256);\r\n\r\n  function isAllowedUser(address _adr) external view returns (bool);\r\n\r\n  function isDao(address _adr) external view returns (bool);\r\n\r\n  function isHardWorker(address _adr) external view returns (bool);\r\n\r\n  function isRewardDistributor(address _adr) external view returns (bool);\r\n\r\n  function isValidVault(address _vault) external view returns (bool);\r\n\r\n  function isValidStrategy(address _strategy) external view returns (bool);\r\n\r\n  // ************ DAO ACTIONS *************\r\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator) external;\r\n\r\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator) external;\r\n\r\n  function addToWhiteListMulti(address[] calldata _targets) external;\r\n\r\n  function addToWhiteList(address _target) external;\r\n\r\n  function removeFromWhiteListMulti(address[] calldata _targets) external;\r\n\r\n  function removeFromWhiteList(address _target) external;\r\n}\r\n"
    },
    "contracts/base/interface/IControllable.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IControllable {\r\n\r\n  function isController(address _contract) external view returns (bool);\r\n\r\n  function isGovernance(address _contract) external view returns (bool);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}