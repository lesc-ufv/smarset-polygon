{{
  "language": "Solidity",
  "sources": {
    "contracts/ICO.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function totalSupply() external view returns (uint);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract PBULLToken is IERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    address public BullManager;\r\n    address public IcoAddress;\r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) public allowed;\r\n    \r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint _totalSupply)\r\n         {\r\n            name = _name;\r\n            symbol = _symbol;\r\n            decimals = _decimals;\r\n            totalSupply = _totalSupply;\r\n            balances[msg.sender] = _totalSupply;\r\n            IcoAddress = msg.sender;\r\n        }\r\n        \r\n    modifier onlyICO() {\r\n        require(IcoAddress == msg.sender, \"Caller should be ICO address!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBullManager() {\r\n        require(BullManager == msg.sender, \"Transfer is not available for presale token!\");\r\n        _;\r\n    }\r\n    \r\n    function setBullManager(address _bullManager) external onlyICO() {\r\n        BullManager = _bullManager;\r\n    }\r\n\r\n    function transfer(address to, uint value) public onlyICO() returns(bool) {\r\n        require(balances[msg.sender] >= value);\r\n        balances[msg.sender] -= value;\r\n        balances[to] += value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns(uint) {\r\n        return allowed[owner][spender];\r\n    }\r\n    function transferFrom(address from, address to, uint value) public onlyBullManager() returns(bool) {\r\n        uint _allowance = allowed[from][to];\r\n        require(balances[from] >= value && _allowance >= value, \"low balance\");\r\n        allowed[from][to] -= value;\r\n        balances[from] -= value;\r\n        balances[to] += value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint value) public returns(bool) {\r\n        require(spender != msg.sender);\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function balanceOf(address owner) public view returns(uint) {\r\n        return balances[owner];\r\n    }\r\n}\r\n\r\ncontract ICO {\r\n    struct Sale {\r\n        address investor;\r\n        uint quantity;\r\n    }\r\n    Sale[] public sales;\r\n    mapping(address => uint) public allocated;\r\n    address public token;\r\n    mapping(address => bool) public admin;\r\n    address public owner;\r\n    address private OPERATING_COST = 0x9741De8EbCc09D4e0405Ed2d5581Cc9166c893C9;\r\n    // IERC20 private USDC = IERC20(0x3e5570072f96a72703B0276109232eDe994e241E); //mumbai\r\n    IERC20 private USDC = IERC20(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174); //polygon mainnet    \r\n    uint public quantity = 10 * 1e18;\r\n\r\n    uint public end;\r\n    uint public price = 50 * 10 ** 6;\r\n    uint public availableTokens;\r\n    bool public released;\r\n    \r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint _totalSupply)\r\n         {\r\n        token = address(new PBULLToken(\r\n            _name,\r\n            _symbol,\r\n            _decimals,\r\n            _totalSupply\r\n        ));\r\n        admin[msg.sender] = true;\r\n        owner = msg.sender;\r\n        released = false;\r\n    }\r\n    function addAmin(address _user) external onlyOwner {\r\n        admin[_user] = true;\r\n    }\r\n    function removeAdmin(address _user) external onlyOwner {\r\n        admin[_user] = false;\r\n    }\r\n    function start(\r\n        uint duration,\r\n        uint _availableTokens)\r\n        external\r\n        onlyAdmin() {\r\n        require(duration > 0, \"duration should be > 0\");\r\n        uint totalSupply = PBULLToken(token).totalSupply();\r\n        require(_availableTokens > 0 && _availableTokens <= totalSupply, \"totalSupply should be > 0 and <= totalSupply\");\r\n        end = duration * 1 days + block.timestamp; \r\n        availableTokens = _availableTokens;\r\n        released = false;\r\n    }\r\n\r\n    function setBullManager(address _bullManager) external onlyAdmin() {\r\n        PBULLToken(token).setBullManager(_bullManager);\r\n    }\r\n    \r\n    function buy() external icoActive() {\r\n        require(quantity <= availableTokens, \"Not enough tokens left for sale\");\r\n        require(allocated[msg.sender] <= 2 * quantity, \"Overflow the limit allocated to you\");\r\n        USDC.transferFrom(msg.sender, address(this), price * 10);\r\n        sales.push(Sale(\r\n            msg.sender,\r\n            quantity\r\n        ));\r\n        allocated[msg.sender] += quantity;\r\n        availableTokens -= quantity;\r\n    }\r\n    function stop() external onlyAdmin() tokensNotReleased() {\r\n        end = block.timestamp;\r\n    }\r\n    function release()\r\n        external\r\n        onlyAdmin()\r\n        icoEnded()\r\n        tokensNotReleased() {\r\n        PBULLToken tokenInstance = PBULLToken(token);\r\n        for(uint i = 0; i < sales.length; i++) {\r\n            Sale storage sale = sales[i];\r\n            tokenInstance.transfer(sale.investor, sale.quantity);\r\n        }\r\n        released = true;\r\n    }\r\n    \r\n    function refund() external onlyAdmin() icoEnded() tokensNotReleased() {\r\n        for(uint i = 0; i < sales.length; i ++) {\r\n            Sale storage sale = sales[i];\r\n            USDC.transfer(sale.investor, price * 10);\r\n        }\r\n    }\r\n    function withdraw() external onlyAdmin() icoEnded() tokensReleased() {\r\n        uint balance = USDC.balanceOf(address(this));\r\n        USDC.transfer(OPERATING_COST, balance);\r\n        // to.transfer(amount);    \r\n    }\r\n    \r\n    function getBalance() external view onlyAdmin() returns(uint) {\r\n        return USDC.balanceOf(address(this));\r\n    }\r\n    modifier icoActive() {\r\n        require(end > 0 && block.timestamp < end && availableTokens > 0, \"ICO must be active\");\r\n        _;\r\n    }\r\n    \r\n    modifier icoEnded() {\r\n        require(end > 0 && (block.timestamp >= end || availableTokens == 0), \"ICO must have ended\");\r\n        _;\r\n    }\r\n    \r\n    modifier tokensNotReleased() {\r\n        require(released == false, \"Tokens must NOT have been released\");\r\n        _;\r\n    }\r\n    \r\n    modifier tokensReleased() {\r\n        require(released == true, \"Tokens must have been released\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(admin[msg.sender] == true, \"only admin allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner allowed\");\r\n        _;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}