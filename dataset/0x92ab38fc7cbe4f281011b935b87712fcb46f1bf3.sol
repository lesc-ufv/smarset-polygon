{{
  "language": "Solidity",
  "sources": {
    "contracts/DeFi/Silos/Silo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../../interfaces/IAction.sol\";\nimport \"../../interfaces/ISiloFactory.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\nimport \"../../interfaces/ISiloManagerFactory.sol\";\nimport \"../../interfaces/ITierManager.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nstruct ActionInfo{\n    bytes configurationData; //things like what token addresses are involved\n    address implementation;\n}\n\ncontract Silo is Initializable, KeeperCompatibleInterface{\n\n    address public factory;\n    ISiloFactory Factory;\n\n    ActionInfo[] public strategy;\n\n    bytes public configurationData; //For silos this will only ever be the input and output token\n\n    bool public deposited;\n\n    address[8] public tokensInPlay;\n\n    string public name;\n\n    string public strategyName;\n\n    uint public strategyCategory;\n\n    uint public SILO_ID;\n    uint public siloDelay; //used to determine how often it is maintained\n    uint public lastTimeMaintained;\n\n    bool public highRiskAction;\n\n    event StrategyFailed(uint i);\n\n    modifier onlyFactory(){\n        require(msg.sender == factory, \"Caller is not the factory\");\n        _;\n    }\n\n    modifier onlySiloManager(){\n        require(ISiloManagerFactory(Factory.managerFactory()).isManager(msg.sender), \"Caller is not a manager\");\n        _;\n    }\n\n    function initialize(uint siloID) external initializer{\n        factory = msg.sender;\n        Factory = ISiloFactory(factory);\n        SILO_ID = siloID;\n    }\n\n    function setName(string memory _name) external onlyFactory{\n        name = _name;\n    }\n\n    function adjustSiloDelay(uint _newDelay) external onlyFactory{\n        //make sure delay isn't too long or too\n        siloDelay = _newDelay;\n    }\n\n    function setStrategyName(string memory _strategyName) external onlyFactory{\n        strategyName =  _strategyName;\n    }\n\n    function setStrategyCategory(uint _strategyCategory) external onlyFactory{\n        strategyCategory =  _strategyCategory;\n    }\n\n    //Only silo managers can call this, and silo managers will only ever call\n    //this silo if the owner of the silo manager owns this silo\n    function performUpkeep(bytes calldata performData) external override onlySiloManager {\n        bool keeperExit = abi.decode(performData, (bool));\n        if(keeperExit){\n            _exitStrategy(0);\n        }\n        else{\n            _runStrategy();\n        }\n    }\n\n    function showActionStackValidity() external view returns(bool, bool){\n        bool team = true;\n        bool logic = true;\n        bool tmpTeam;\n        bool tmpLogic;\n        for(uint i=0; i<strategy.length; i++){//go through every action, and call actionValid\n            (tmpTeam, tmpLogic) = IAction(strategy[i].implementation).actionValid(strategy[i].configurationData);\n            if(!tmpTeam){team = tmpTeam;}\n            if(!tmpLogic){logic = tmpLogic;}\n        }\n        return (team, logic);\n    }\n\n    //Enter the strategy\n    function Deposit() external onlyFactory{\n        uint gas = gasleft();\n        _runStrategy();\n        uint gasUsed = gas - gasleft();\n        if(gasUsed > Factory.strategyMaxGas()){\n            string memory errorMessage = string(abi.encodePacked(\"Strategy Excedes Keepers Gas Limit, Gas Used: \", Strings.toString(gasUsed)));\n            revert(errorMessage);\n        }\n    }\n\n    //Exit the strategy\n    function Withdraw(uint _requestedOut) external onlyFactory{\n        _exitStrategy(_requestedOut);\n    }\n\n    function ExitSilo(address caller) external onlyFactory{\n        //Send all tokens to owner\n        uint balance;\n        IERC20 token;\n        for(uint i=0; i<tokensInPlay.length; i++){\n            if(tokensInPlay[i] != address(0)){\n                token = IERC20(tokensInPlay[i]);\n                balance = token.balanceOf(address(this));\n                if(balance > 0){\n                    SafeERC20.safeTransfer(token, caller, balance); \n                } \n            }\n        }\n    }\n\n    //used to recover users funds if for some reason the strategy fails\n    function adminCall(address target, bytes memory data) external onlyFactory{\n        (bool success, ) = target.call(data);\n        require(success, \"Call failed\");\n    }\n\n    function withdrawToken(address token, address recipient) external onlyFactory{\n        IERC20 Token= IERC20(token);\n        SafeERC20.safeTransfer(Token, recipient, Token.balanceOf(address(this)));\n    }\n\n    function setStrategy(address[4] memory _inputs, bytes[] memory _configurationData, address[] memory _implementations) external onlyFactory{\n        //needs to exit current strategy, if it is in one\n        require(!deposited, \"Call Withdraw before changing strategy\");\n        require(_configurationData.length == _implementations.length, \"Inputs do not match\");\n        delete strategy;//deletes the current strategy\n        address[4] memory actionInput;\n        address[4] memory actionOutput = _inputs;\n        address[4] memory tmpOutput;\n        bytes memory storedConfig;\n        \n        highRiskAction = false;//reset it\n        ActionInfo memory action;\n        for(uint i=0; i< _implementations.length; i++){\n            //Confirm inputs and outputs match\n            storedConfig = IAction(_implementations[i]).getConfig();\n            if(storedConfig.length > 0){\n                (actionInput, tmpOutput) = abi.decode(storedConfig, (address[4], address[4]));\n                require(IAction(_implementations[i]).validateConfig(storedConfig), \"Stored configuration not valid\");\n            }\n            else{\n                (actionInput, tmpOutput) = abi.decode(_configurationData[i], (address[4], address[4]));\n                if(!IAction(_implementations[i]).validateConfig(_configurationData[i])){\n                    string memory errorMessage = string(abi.encodePacked(\"Configuration Not Valid At: \", Strings.toString(i)));\n                    revert(errorMessage);\n                }\n            }\n            require(actionInput.length == actionOutput.length, \"Actions have different output/input lengths\");\n            for(uint j=0; j<actionInput.length; j++){\n                require(actionInput[j] == actionOutput[j], \"Actions input/output addresses do not match\");\n            }\n            actionOutput = tmpOutput;\n\n            action = ActionInfo({\n                configurationData: _configurationData[i],\n                implementation: _implementations[i]\n            });\n            strategy.push(action);\n            if(!highRiskAction && Factory.highRiskActions(_implementations[i])){\n                highRiskAction = true;\n            }\n            //if we are on the last action, then set the config data for this silo\n            if(i == _implementations.length-1){\n                _setConfigData(_inputs, actionOutput);\n            }\n        }\n    }\n\n    function adjustStrategy(uint _index, bytes memory _configurationData, address _implementation) external onlyFactory{\n        address[4] memory currentInputs;\n        address[4] memory currentOutputs;\n        address[4] memory proposedInputs;\n        address[4] memory proposedOutputs;\n        (currentInputs,currentOutputs) = abi.decode(strategy[_index].configurationData, (address[4],address[4]));\n        (proposedInputs,proposedOutputs) = abi.decode(_configurationData, (address[4],address[4]));\n\n        //if strategy is not already high risk, then check if the new action is high risk\n        if(!highRiskAction && Factory.highRiskActions(_implementation)){\n            highRiskAction = true;\n        }\n\n        for(uint i=0; i<4; i++){\n            if(currentInputs[i] != proposedInputs[i]){\n                string memory errorMessage = string(abi.encodePacked(\"Proposed Input does not match Current Input At: \", Strings.toString(i)));\n                revert(errorMessage);\n            }\n            if(currentOutputs[i] != proposedOutputs[i]){\n                string memory errorMessage = string(abi.encodePacked(\"Proposed Output does not match Current Output At: \", Strings.toString(i)));\n                revert(errorMessage);\n            }\n        }\n        require(IAction(_implementation).validateConfig(_configurationData), \"Proposed Configuration Data is not valid\");\n\n        //If above all checks out, then overwrite the strategy at _index\n        strategy[_index] = ActionInfo({\n                configurationData: _configurationData,\n                implementation: _implementation\n            });\n    }\n\n    function checkUpkeep(bytes calldata checkData)\n        external\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory performData)\n    {   \n        if(siloDelay != 0){//If delay is zero, maintenance is only conditional based\n            upkeepNeeded = (block.timestamp >= (lastTimeMaintained + siloDelay));\n        }\n        if(!upkeepNeeded){//if time up keep is not needed check strategy\n            for(uint i=0; i<strategy.length; i++){\n                upkeepNeeded = IAction(strategy[i].implementation).checkMaintain(strategy[i].configurationData);\n                if(upkeepNeeded){\n                    break;\n                }\n            }\n        } \n    }\n\n    function viewStrategy() external view returns(address[] memory actions, bytes[] memory configData){\n        actions = new address[](strategy.length);\n        configData = new bytes[](strategy.length);\n        for(uint i=0; i<strategy.length; i++){\n            actions[i] = strategy[i].implementation;\n            configData[i] = strategy[i].configurationData;\n        }\n    }\n\n    /****************************Public Functions*****************************/\n    //Here so that silos match the design pattern of actions\n    function getConfig() public view returns(bytes memory){\n        return configurationData;\n    }\n\n    function getInputTokens() public view returns(address[4] memory inputs){\n        for(uint i=0; i<4; i++){\n            inputs[i] = tokensInPlay[i];\n        }\n    }\n\n    /****************************Internal Functions*****************************/\n    function _investSilo() internal returns(uint[4] memory amounts){\n        address[4] memory depositTokens = abi.decode(configurationData, (address[4]));\n        for(uint i=0; i<4; i++){\n            uint tokenAmount;\n            if(depositTokens[i] != address(0)){\n                tokenAmount = IERC20(depositTokens[i]).balanceOf(address(this)); \n                if(tokenAmount >= Factory.tokenMinimum(depositTokens[i])){\n                    amounts[i] = tokenAmount;\n                    if(!deposited){deposited = true;}//set this to true, bc we picked up some money to put into the strategy\n                }\n            }\n        }\n    }\n\n    function _runStrategy() internal{\n        uint[4] memory amounts = _investSilo();\n        bytes memory inputData = abi.encode(amounts);\n        for(uint i=0; i<strategy.length; i++){\n            (bool success, bytes memory result) = strategy[i].implementation.delegatecall(abi.encodeWithSignature(\"enter(address,bytes,bytes)\", strategy[i].implementation, strategy[i].configurationData, inputData));\n            if(!success){\n                string memory errorMessage = string(abi.encodePacked(\"Strategy Failed At: \", Strings.toString(i)));\n                revert(errorMessage);\n            }\n            inputData = result;\n        }\n        lastTimeMaintained = block.timestamp;\n    }  \n\n    function _exitStrategy(uint _requestedOut) internal{\n        uint[4] memory amounts = [_requestedOut,0,0,0];\n        bytes memory exitData = abi.encode(amounts);\n        for(uint i=0; i<strategy.length; i++){\n            (bool success, bytes memory result) = strategy[i].implementation.delegatecall(abi.encodeWithSignature(\"exit(address,bytes,bytes)\", strategy[i].implementation, strategy[i].configurationData, exitData));\n            if(!success){\n                string memory errorMessage = string(abi.encodePacked(\"Withdraw Failed At: \", Strings.toString(i)));\n                revert(errorMessage);\n            }\n            exitData = result;\n        }\n        if(_requestedOut == 0){//strategy is only exited if owner is withdrawing everything!\n            deposited = false;\n        }\n    }\n\n    function _setConfigData(address[4] memory _input, address[4] memory _output) internal{\n        configurationData = abi.encode(_input, _output);\n        for(uint i=0; i<4; i++){\n            tokensInPlay[i] = _input[i];\n            tokensInPlay[i+4] = _output[i];\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IAction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {ActionBalance} from \"../DeFi/Silos/BaseSiloAction.sol\";\n\ninterface IAction{\n    function getConfig() external view returns(bytes memory config);\n    function checkMaintain(bytes memory configuration) external view returns(bool);\n    function validateConfig(bytes memory configData) external view returns(bool); \n    function getMetaData() external view returns(string memory);\n    function getFactory() external view returns(address);\n    function getDecimals() external view returns(uint);\n    function showFee(address _action) external view returns(string memory actionName, uint[4] memory fees);\n    function showBalances(address _silo, bytes memory _configurationData) external view returns(ActionBalance memory);\n    function showDust(address _silo, bytes memory _configurationData) external view returns(address[] memory, uint[] memory);\n    function actionValid(bytes memory _configurationData) external view returns(bool, bool);\n    function getIsSilo(address _silo) external view returns(bool);\n}"
    },
    "contracts/interfaces/ISiloFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ninterface ISiloFactory is IERC721Enumerable{\n    function tokenMinimum(address _token) external view returns(uint _minimum);\n    function balanceOf(address _owner) external view returns(uint);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n    function managerFactory() external view returns(address);\n    function siloMap(uint _id) external view returns(address);\n    function tierManager() external view returns(address);\n    function ownerOf(uint _id) external view returns(address);\n    function siloToId(address silo) external view returns(uint);\n    function CreateSilo(address recipient) external returns(uint);\n    function setActionStack(uint siloID, address[4] memory input, address[] memory _implementations, bytes[] memory _configurationData) external;\n    function Withdraw(uint siloID) external;\n    function getFeeInfo(address _action) external view returns(uint fee, address recipient);\n    function strategyMaxGas() external view returns(uint);\n    function strategyName(string memory _name) external view returns(uint);\n    function getStrategyInputs(uint _id) external view returns(address[4] memory inputs);\n    function getStrategyActions(uint _id) external view returns(address[] memory actions);\n    function getStrategyConfigurationData(uint _id) external view returns(bytes[] memory configurationData);\n    function useCustom(address _action) external view returns(bool);\n    function getFeeList(address _action) external view returns(uint[4] memory);\n    function feeRecipient(address _action) external view returns(address);\n    function getDefaultFeeList() external view returns(uint[4] memory);\n    function defaultRecipient() external view returns(address);\n    function getTier(address _silo) external view returns(uint);\n    function getCatalogue(uint _type) external view returns(string[] memory);\n    function getFeeInfoNoTier(address _action) external view returns(uint[4] memory);\n    function highRiskActions(address _action) external view returns(bool);\n    function actionValid(address _action) external view returns(bool);\n    function skipActionValidTeamCheck(address _user) external view returns(bool);\n    function skipActionValidLogicCheck(address _user) external view returns(bool);\n    function isSilo(address _silo) external view returns(bool);\n    function currentStrategyId() external view returns(uint);\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/interfaces/ISiloManagerFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ISiloManagerFactory{\n    function isManager(address _manager) external view returns(bool);\n    function getKeeperRegistry() external view returns(address);\n    function alphaRegistry() external view returns(address);\n    function betaRegistry() external view returns(address);\n    function migrate() external view returns(bool);\n    function migrationCancel() external;\n    function migrationWithdraw() external;\n    function minMigrationBalance() external view returns(uint);\n    function currentUpkeepToMigrate() external view returns(uint);\n    function getOldMaxValidBlockAndBalance(uint _id) external view returns(uint mvb, uint96 bal);\n    function siloFactory() external view returns(address);\n    function ERC20_LINK_ADDRESS() external view returns(address);\n    function ERC677_LINK_ADDRESS() external view returns(address);\n    function PEGSWAP_ADDRESS() external view returns(address);\n    function REGISTRAR_ADDRESS() external view returns(address);\n    function getUpkeepBalance(address _user) external view returns(uint96 balance);\n    function managerApproved(address _user) external view returns(bool);\n    function userToManager(address _user) external view returns(address);\n    function getTarget(uint _id) external view returns(address);\n    function riskBuffer() external view returns(uint96);\n    function getBalance(uint _id) external view returns(uint96);\n    function getMinBalance(uint _id) external view returns(uint96);\n    function getMinimumUpkeepBalance(address _user) external view returns(uint96);\n}"
    },
    "contracts/interfaces/ITierManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface ITierManager {\n    function checkTier(address caller) external view returns(uint);\n    function checkTierIncludeSnapshot(address caller) external view returns(uint);\n    function viewIDOTier(address caller) external view returns(uint);\n}"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/DeFi/Silos/BaseSiloAction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/ISiloFactory.sol\";\nimport \"../../interfaces/ISilo.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/IAction.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nstruct ActionBalance{\n    uint collateral;\n    uint debt;\n    address collateralToken;\n    address debtToken;\n    uint collateralConverted;\n    address collateralConvertedToken;\n    string lpUnderlyingBalances;\n    string lpUnderlyingTokens;\n}\n\nabstract contract BaseSiloAction {\n\n    bytes public configurationData;//if not set on deployment, then they use the value in the Silo\n    string public name;\n    string public feeName;//name displayed when showing fee information\n    uint constant public MAX_TRANSIENT_VARIABLES = 4;\n    address public factory;\n    uint constant public FEE_DECIMALS = 10000;\n    string public metaData;\n    bool public usesTakeFee;\n\n    /******************************Functions that can be implemented******************************/\n    /**\n     * @dev what a silo should do when entering a strategy and running this action\n     */\n    function enter(address implementation, bytes memory configuration, bytes memory inputData) public virtual returns(uint[4] memory){}\n\n    /**\n     * @dev what a silo should do when exiting a strategy and running this action\n     */\n    function exit(address implementation, bytes memory configuration, bytes memory outputData) public virtual returns(uint[4] memory){}\n\n    function protocolStatistics() external view returns(string memory){}\n\n    function showBalances(address _silo, bytes memory _configurationData) external view virtual returns(ActionBalance memory){}\n\n    function showDust(address _silo, bytes memory _configurationData) external view virtual returns(address[] memory, uint[] memory){}\n\n    /******************************external view functions******************************/\n    function showFee(address _action) external view returns(string memory nameOfFee, uint[4] memory fees){\n        nameOfFee = feeName;\n        if(usesTakeFee){\n            fees = ISiloFactory(IAction(_action).getFactory()).getFeeInfoNoTier(_action);\n        }\n    }\n\n    function actionValid(bytes memory _configurationData) external view virtual returns(bool, bool){\n        return (ISiloFactory(getFactory()).actionValid(address(this)), true);//second bool can be overwritten by individual actions\n    }\n\n    /******************************public view functions******************************/\n    function getConfig() public view returns(bytes memory){\n        return configurationData;\n    }\n\n    function getIsSilo(address _silo) public view returns(bool){\n        return ISiloFactory(factory).isSilo(_silo);\n    }\n\n    function getFactory() public view returns(address){\n        return factory;\n    }\n\n    function getDecimals() public view returns(uint){\n        return FEE_DECIMALS;\n    }\n\n    function getMetaData() public view returns(string memory){\n        return metaData;\n    }\n\n    function checkMaintain(bytes memory configuration) public view virtual returns(bool){\n        return false;\n    }\n\n    function validateConfig(bytes memory configData) public view virtual returns(bool){\n        return true;\n    }\n\n    /******************************internal view functions******************************/\n    function _takeFee(address _action, uint _gains, address _token) internal virtual returns(uint remaining){\n        (uint fee, address recipient) = ISiloFactory(IAction(_action).getFactory()).getFeeInfo( _action);\n        uint feeToTake = _gains * fee / IAction(_action).getDecimals();\n        if(feeToTake > 0){\n            SafeERC20.safeTransfer(IERC20(_token), recipient, feeToTake);\n            remaining = _gains - feeToTake;    \n        }\n        else{\n            remaining = _gains;\n        }\n    }\n}"
    },
    "contracts/interfaces/ISilo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nstruct PriceOracle{\n        address oracle;\n        uint actionPrice;\n    }\n\ninterface ISilo{\n    function initialize(uint siloID) external;\n    function Deposit() external;\n    function Withdraw(uint _requestedOut) external;\n    function Maintain() external;\n    function ExitSilo(address caller) external;\n    function adminCall(address target, bytes memory data) external;\n    function setStrategy(address[4] memory input, bytes[] memory _configurationData, address[] memory _implementations) external;\n    function getConfig() external view returns(bytes memory config);\n    function withdrawToken(address token, address recipient) external;\n    function adjustSiloDelay(uint _newDelay) external;\n    function checkUpkeep(bytes calldata checkData) external view returns (bool upkeepNeeded, bytes memory performData);\n    function performUpkeep(bytes calldata performData) external;\n    function siloDelay() external view returns(uint);\n    function name() external view returns(string memory);\n    function lastTimeMaintained() external view returns(uint);\n    function setName(string memory name) external;\n    function deposited() external view returns(bool);\n    function setStrategyName(string memory _strategyName) external;\n    function setStrategyCategory(uint _strategyCategory) external;\n    function strategyName() external view returns(string memory);\n    function strategyCategory() external view returns(uint);\n    function adjustStrategy(uint _index, bytes memory _configurationData, address _implementation) external;\n    function viewStrategy() external view returns(address[] memory actions, bytes[] memory configData);\n    function highRiskAction() external view returns(bool);\n    function showActionStackValidity() external view returns(bool, bool);\n    function getInputTokens() external view returns(address[4] memory);\n\n}"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}