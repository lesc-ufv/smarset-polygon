{{
  "language": "Solidity",
  "sources": {
    "contracts/base/vault/SmartVault.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"../../openzeppelin/Math.sol\";\r\nimport \"../../openzeppelin/SafeERC20.sol\";\r\nimport \"../../openzeppelin/IERC20.sol\";\r\nimport \"../../openzeppelin/ERC20Upgradeable.sol\";\r\nimport \"./VaultStorage.sol\";\r\nimport \"./VaultLibrary.sol\";\r\nimport \"../governance/ControllableV2.sol\";\r\nimport \"../interface/IStrategy.sol\";\r\nimport \"../interface/IController.sol\";\r\nimport \"../interface/IBookkeeper.sol\";\r\nimport \"../interface/IVaultController.sol\";\r\n\r\n/// @title Smart Vault is a combination of implementations drawn from Synthetix pool\r\n///        for their innovative reward vesting and Yearn vault for their share price model\r\n/// @dev Use with TetuProxy\r\n/// @author belbix\r\ncontract SmartVault is Initializable, ERC20Upgradeable, VaultStorage, ControllableV2 {\r\n  using SafeERC20 for IERC20;\r\n\r\n  // ************* CONSTANTS ********************\r\n  /// @notice Version of the contract\r\n  /// @dev Should be incremented when contract changed\r\n  string public constant VERSION = \"1.10.2\";\r\n  /// @dev Denominator for penalty numerator\r\n  uint256 public constant LOCK_PENALTY_DENOMINATOR = 1000;\r\n  uint256 public constant TO_INVEST_DENOMINATOR = 1000;\r\n  uint256 public constant DEPOSIT_FEE_DENOMINATOR = 10000;\r\n  uint256 private constant NAME_OVERRIDE_ID = 0;\r\n  uint256 private constant SYMBOL_OVERRIDE_ID = 1;\r\n  string private constant FORBIDDEN_MSG = \"SV: Forbidden\";\r\n\r\n  // ********************* VARIABLES *****************\r\n  //in upgradable contracts you can skip storage ONLY for mapping and dynamically-sized array types\r\n  //https://docs.soliditylang.org/en/v0.4.21/miscellaneous.html#layout-of-state-variables-in-storage\r\n  //use VaultStorage for primitive variables\r\n\r\n  // ****** REWARD MECHANIC VARIABLES ******** //\r\n  /// @dev A list of reward tokens that able to be distributed to this contract\r\n  address[] internal _rewardTokens;\r\n  /// @dev Timestamp value when current period of rewards will be ended\r\n  mapping(address => uint256) public override periodFinishForToken;\r\n  /// @dev Reward rate in normal circumstances is distributed rewards divided on duration\r\n  mapping(address => uint256) public override rewardRateForToken;\r\n  /// @dev Last rewards snapshot time. Updated on each share movements\r\n  mapping(address => uint256) public override lastUpdateTimeForToken;\r\n  /// @dev Rewards snapshot calculated from rewardPerToken(rt). Updated on each share movements\r\n  mapping(address => uint256) public override rewardPerTokenStoredForToken;\r\n  /// @dev User personal reward rate snapshot. Updated on each share movements\r\n  mapping(address => mapping(address => uint256)) public override userRewardPerTokenPaidForToken;\r\n  /// @dev User personal earned reward snapshot. Updated on each share movements\r\n  mapping(address => mapping(address => uint256)) public override rewardsForToken;\r\n\r\n  // ******** OTHER VARIABLES **************** //\r\n  /// @dev Only for statistical purposes, no guarantee to be accurate\r\n  ///      Last timestamp value when user withdraw. Resets on transfer\r\n  mapping(address => uint256) public override userLastWithdrawTs;\r\n  /// @dev In normal circumstances hold last claim timestamp for users\r\n  mapping(address => uint256) public override userBoostTs;\r\n  /// @dev In normal circumstances hold last withdraw timestamp for users\r\n  mapping(address => uint256) public override userLockTs;\r\n  /// @dev Only for statistical purposes, no guarantee to be accurate\r\n  ///      Last timestamp value when user deposit. Doesn't update on transfers\r\n  mapping(address => uint256) public override userLastDepositTs;\r\n  /// @dev VaultStorage doesn't have a map for strings so we need to add it here\r\n  mapping(uint256 => string) private _nameOverrides;\r\n\r\n  /// @notice Initialize contract after setup it as proxy implementation\r\n  /// @dev Use it only once after first logic setup\r\n  /// @param _name ERC20 name\r\n  /// @param _symbol ERC20 symbol\r\n  /// @param _controller Controller address\r\n  /// @param __underlying Vault underlying address\r\n  /// @param _duration Rewards duration\r\n  /// @param _lockAllowed Set true with lock mechanic requires\r\n  /// @param _rewardToken Reward token address. Set zero address if not requires\r\n  function initializeSmartVault(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address _controller,\r\n    address __underlying,\r\n    uint256 _duration,\r\n    bool _lockAllowed,\r\n    address _rewardToken,\r\n    uint _depositFee\r\n  ) external initializer {\r\n    __ERC20_init(_name, _symbol);\r\n\r\n    ControllableV2.initializeControllable(_controller);\r\n    VaultStorage.initializeVaultStorage(\r\n      __underlying,\r\n      _duration,\r\n      _lockAllowed\r\n    );\r\n    // initialize reward token for easily deploy new vaults from deployer address\r\n    if (_rewardToken != address(0)) {\r\n      require(_rewardToken != _underlying());\r\n      _rewardTokens.push(_rewardToken);\r\n    }\r\n    // set 100% to invest\r\n    _setToInvest(TO_INVEST_DENOMINATOR);\r\n    // set deposit fee\r\n    if (_depositFee > 0) {\r\n      require(_depositFee <= DEPOSIT_FEE_DENOMINATOR / 100);\r\n      _setDepositFeeNumerator(_depositFee);\r\n    }\r\n  }\r\n\r\n  // *************** EVENTS ***************************\r\n  event Withdraw(address indexed beneficiary, uint256 amount);\r\n  event Deposit(address indexed beneficiary, uint256 amount);\r\n  event Invest(uint256 amount);\r\n  event StrategyAnnounced(address newStrategy, uint256 time);\r\n  event StrategyChanged(address newStrategy, address oldStrategy);\r\n  event RewardAdded(address rewardToken, uint256 reward);\r\n  event RewardMovedToController(address rewardToken, uint256 amount);\r\n  event Staked(address indexed user, uint256 amount);\r\n  event Withdrawn(address indexed user, uint256 amount);\r\n  event RewardPaid(address indexed user, address rewardToken, uint256 reward);\r\n  event RewardDenied(address indexed user, address rewardToken, uint256 reward);\r\n  event AddedRewardToken(address indexed token);\r\n  event RemovedRewardToken(address indexed token);\r\n  event RewardRecirculated(address indexed token, uint256 amount);\r\n  event RewardSentToController(address indexed token, uint256 amount);\r\n\r\n  // *************** RESTRICTIONS ***************************\r\n\r\n  /// @dev Allow operation only for VaultController\r\n  function _onlyVaultController(address _sender) private view {\r\n    require(IController(_controller()).vaultController() == _sender, FORBIDDEN_MSG);\r\n  }\r\n\r\n  /// @dev Allowed only for active strategy\r\n  function _isActive() private view {\r\n    require(_active(), \"SV: Not active\");\r\n  }\r\n\r\n  /// @dev Only smart contracts will be affected by this restriction\r\n  ///      If it is a contract it should be whitelisted\r\n  function _onlyAllowedUsers(address _sender) private view {\r\n    require(IController(_controller()).isAllowedUser(_sender), FORBIDDEN_MSG);\r\n  }\r\n\r\n  // ************ COMMON VIEWS ***********************\r\n\r\n  function name() public view override returns (string memory) {\r\n    string memory nameForOverride = _nameOverrides[NAME_OVERRIDE_ID];\r\n    if (bytes(nameForOverride).length != 0) {\r\n      return nameForOverride;\r\n    }\r\n    return super.name();\r\n  }\r\n\r\n  function symbol() public view override returns (string memory) {\r\n    string memory symbolForOverride = _nameOverrides[SYMBOL_OVERRIDE_ID];\r\n    if (bytes(symbolForOverride).length != 0) {\r\n      return symbolForOverride;\r\n    }\r\n    return super.symbol();\r\n  }\r\n\r\n  /// @notice ERC20 compatible decimals value. Should be the same as underlying\r\n  function decimals() public view override returns (uint8) {\r\n    return ERC20Upgradeable(_underlying()).decimals();\r\n  }\r\n\r\n  /// @dev Returns vault controller\r\n  function _vaultController() internal view returns (IVaultController){\r\n    return IVaultController(IController(_controller()).vaultController());\r\n  }\r\n\r\n  // ************ GOVERNANCE ACTIONS ******************\r\n\r\n  /// @notice Override vault name\r\n  function overrideName(string calldata value) external {\r\n    require(_isGovernance(msg.sender));\r\n    _nameOverrides[NAME_OVERRIDE_ID] = value;\r\n  }\r\n\r\n  /// @notice Override vault name\r\n  function overrideSymbol(string calldata value) external {\r\n    require(_isGovernance(msg.sender));\r\n    _nameOverrides[SYMBOL_OVERRIDE_ID] = value;\r\n  }\r\n\r\n  /// @notice Change permission for decreasing ppfs during hard work process\r\n  /// @param _value true - allowed, false - disallowed\r\n  function changePpfsDecreaseAllowed(bool _value) external override {\r\n    _onlyVaultController(msg.sender);\r\n    _setPpfsDecreaseAllowed(_value);\r\n  }\r\n\r\n  /// @notice Set lock period for funds. Can be called only once\r\n  /// @param _value Timestamp value\r\n  function setLockPeriod(uint256 _value) external override {\r\n    require(_isController(msg.sender) || _isGovernance(msg.sender), FORBIDDEN_MSG);\r\n    require(_lockAllowed());\r\n    require(lockPeriod() == 0);\r\n    _setLockPeriod(_value);\r\n  }\r\n\r\n  /// @notice Set lock initial penalty nominator. Can be called only once\r\n  /// @param _value Penalty denominator, should be in range 0 - (LOCK_PENALTY_DENOMINATOR / 2)\r\n  function setLockPenalty(uint256 _value) external override {\r\n    require(_isController(msg.sender) || _isGovernance(msg.sender), FORBIDDEN_MSG);\r\n    require(_value <= (LOCK_PENALTY_DENOMINATOR / 2));\r\n    require(_lockAllowed());\r\n    require(lockPenalty() == 0);\r\n    _setLockPenalty(_value);\r\n  }\r\n\r\n  /// @notice Set numerator for toInvest ratio in range 0 - 1000\r\n  function setToInvest(uint256 _value) external override {\r\n    _onlyVaultController(msg.sender);\r\n    require(_value <= TO_INVEST_DENOMINATOR);\r\n    _setToInvest(_value);\r\n  }\r\n\r\n  // we should be able to disable lock functionality for not initialized contract\r\n  function disableLock() external override {\r\n    _onlyVaultController(msg.sender);\r\n    require(_lockAllowed());\r\n    // should be not initialized\r\n    // initialized lock forbidden to change\r\n    require(lockPenalty() == 0);\r\n    require(lockPeriod() == 0);\r\n    _disableLock();\r\n  }\r\n\r\n  /// @notice Change the active state marker\r\n  /// @param _active Status true - active, false - deactivated\r\n  function changeActivityStatus(bool _active) external override {\r\n    _onlyVaultController(msg.sender);\r\n    _setActive(_active);\r\n  }\r\n\r\n  /// @notice Change the protection mode status.\r\n  ///          Protection mode means claim rewards on withdraw and 0% initial reward boost\r\n  /// @param _active Status true - active, false - deactivated\r\n  function changeProtectionMode(bool _active) external override {\r\n    require(_isGovernance(msg.sender), FORBIDDEN_MSG);\r\n    _setProtectionMode(_active);\r\n  }\r\n\r\n  /// @notice If true we will call doHardWork for each invest action\r\n  /// @param _active Status true - active, false - deactivated\r\n  function changeDoHardWorkOnInvest(bool _active) external {\r\n    require(_isGovernance(msg.sender), FORBIDDEN_MSG);\r\n    _setDoHardWorkOnInvest(_active);\r\n  }\r\n\r\n  /// @notice If true we will call invest for each deposit\r\n  /// @param _active Status true - active, false - deactivated\r\n  function changeAlwaysInvest(bool _active) external {\r\n    require(_isGovernance(msg.sender), FORBIDDEN_MSG);\r\n    _setAlwaysInvest(_active);\r\n  }\r\n\r\n  /// @notice Earn some money for honest work\r\n  function doHardWork() external override {\r\n    require(_isController(msg.sender) || _isGovernance(msg.sender), FORBIDDEN_MSG);\r\n    _invest();\r\n    // otherwise we already do\r\n    if (!_doHardWorkOnInvest()) {\r\n      _doHardWork();\r\n    }\r\n  }\r\n\r\n  function _doHardWork() internal {\r\n    uint256 sharePriceBeforeHardWork = _getPricePerFullShare();\r\n    IStrategy(_strategy()).doHardWork();\r\n    require(ppfsDecreaseAllowed() || sharePriceBeforeHardWork <= _getPricePerFullShare(), \"SV: PPFS decreased\");\r\n  }\r\n\r\n  /// @notice Add a reward token to the internal array\r\n  /// @param rt Reward token address\r\n  function addRewardToken(address rt) external override {\r\n    _onlyVaultController(msg.sender);\r\n    require(_getRewardTokenIndex(rt) == type(uint256).max);\r\n    require(rt != _underlying());\r\n    _rewardTokens.push(rt);\r\n    emit AddedRewardToken(rt);\r\n  }\r\n\r\n  /// @notice Remove reward token. Last token removal is not allowed\r\n  /// @param rt Reward token address\r\n  function removeRewardToken(address rt) external override {\r\n    _onlyVaultController(msg.sender);\r\n    uint256 i = _getRewardTokenIndex(rt);\r\n    require(i != type(uint256).max);\r\n    require(periodFinishForToken[_rewardTokens[i]] < block.timestamp);\r\n    require(_rewardTokens.length > 1);\r\n    uint256 lastIndex = _rewardTokens.length - 1;\r\n    // swap\r\n    _rewardTokens[i] = _rewardTokens[lastIndex];\r\n    // delete last element\r\n    _rewardTokens.pop();\r\n    emit RemovedRewardToken(rt);\r\n  }\r\n\r\n  /// @notice Withdraw all from strategy to the vault and invest again\r\n  function rebalance() external override {\r\n    _onlyVaultController(msg.sender);\r\n    IStrategy(_strategy()).withdrawAllToVault();\r\n    _invest();\r\n  }\r\n\r\n  /// @notice Withdraw all from strategy to the vault\r\n  function withdrawAllToVault() external {\r\n    require(address(_controller()) == msg.sender\r\n      || IController(_controller()).governance() == msg.sender, FORBIDDEN_MSG);\r\n    IStrategy(_strategy()).withdrawAllToVault();\r\n  }\r\n\r\n  //****************** USER ACTIONS ********************\r\n\r\n  /// @notice Allows for depositing the underlying asset in exchange for shares.\r\n  ///         Approval is assumed.\r\n  function deposit(uint256 amount) external override {\r\n    _isActive();\r\n    _onlyAllowedUsers(msg.sender);\r\n\r\n    _deposit(amount, msg.sender, msg.sender);\r\n    if (_alwaysInvest()) {\r\n      _invest();\r\n    }\r\n  }\r\n\r\n  /// @notice Allows for depositing the underlying asset in exchange for shares.\r\n  ///         Approval is assumed. Immediately invests the asset to the strategy\r\n  function depositAndInvest(uint256 amount) external override {\r\n    _isActive();\r\n    _onlyAllowedUsers(msg.sender);\r\n\r\n    _deposit(amount, msg.sender, msg.sender);\r\n    _invest();\r\n  }\r\n\r\n  /// @notice Allows for depositing the underlying asset in exchange for shares assigned to the holder.\r\n  ///         This facilitates depositing for someone else\r\n  function depositFor(uint256 amount, address holder) external override {\r\n    _isActive();\r\n    _onlyAllowedUsers(msg.sender);\r\n\r\n    _deposit(amount, msg.sender, holder);\r\n    if (_alwaysInvest()) {\r\n      _invest();\r\n    }\r\n  }\r\n\r\n  /// @notice Withdraw shares partially without touching rewards\r\n  function withdraw(uint256 numberOfShares) external override {\r\n    _onlyAllowedUsers(msg.sender);\r\n\r\n    // assume that allowed users is trusted contracts with internal specific logic\r\n    // for compatability we should not claim rewards on withdraw for them\r\n    if (_protectionMode() && !IController(_controller()).isAllowedUser(msg.sender)) {\r\n      _getAllRewards();\r\n    }\r\n\r\n    _withdraw(numberOfShares);\r\n  }\r\n\r\n  /// @notice Withdraw all and claim rewards\r\n  function exit() external override {\r\n    _onlyAllowedUsers(msg.sender);\r\n    // for locked functionality need to claim rewards firstly\r\n    // otherwise token transfer will refresh the lock period\r\n    // also it will withdraw claimed tokens too\r\n    _getAllRewards();\r\n    _withdraw(balanceOf(msg.sender));\r\n  }\r\n\r\n  /// @notice Update and Claim all rewards\r\n  function getAllRewards() external override {\r\n    _onlyAllowedUsers(msg.sender);\r\n    _getAllRewards();\r\n  }\r\n\r\n  function _getAllRewards() internal {\r\n    _updateRewards(msg.sender);\r\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n      _payReward(_rewardTokens[i]);\r\n    }\r\n  }\r\n\r\n  /// @notice Update and Claim rewards for specific token\r\n  function getReward(address rt) external override {\r\n    _onlyAllowedUsers(msg.sender);\r\n    _updateReward(msg.sender, rt);\r\n    _payReward(rt);\r\n  }\r\n\r\n  /// @dev Update user specific variables\r\n  ///      Store statistical information to Bookkeeper\r\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\r\n    _updateRewards(from);\r\n    _updateRewards(to);\r\n\r\n    // mint - assuming it is deposit action\r\n    if (from == address(0)) {\r\n      // new deposit\r\n      if (_underlyingBalanceWithInvestmentForHolder(to) == 0) {\r\n        userBoostTs[to] = block.timestamp;\r\n      }\r\n\r\n      // start lock only for new deposits\r\n      if (userLockTs[to] == 0 && _lockAllowed()) {\r\n        userLockTs[to] = block.timestamp;\r\n      }\r\n\r\n      // store current timestamp\r\n      userLastDepositTs[to] = block.timestamp;\r\n    } else if (to == address(0)) {\r\n      // burn - assuming it is withdraw action\r\n      userLastWithdrawTs[from] = block.timestamp;\r\n    } else {\r\n      // regular transfer\r\n\r\n      // we can't normally refresh lock timestamp for locked assets when it transfers to another account\r\n      // need to allow transfers for reward notification process and claim rewards\r\n      require(!_lockAllowed()\r\n      || to == address(this)\r\n      || from == address(this)\r\n      || from == _controller(), FORBIDDEN_MSG);\r\n\r\n      // if recipient didn't have deposit - start boost time\r\n      if (_underlyingBalanceWithInvestmentForHolder(to) == 0) {\r\n        userBoostTs[to] = block.timestamp;\r\n      }\r\n\r\n      // update only for new deposit for avoiding miscellaneous sending for reset the value\r\n      if (userLastDepositTs[to] == 0) {\r\n        userLastDepositTs[to] = block.timestamp;\r\n      }\r\n\r\n      // reset timer if token transferred\r\n      userLastWithdrawTs[from] = block.timestamp;\r\n    }\r\n\r\n    // register ownership changing\r\n    // only statistic, no funds affected\r\n    try IBookkeeper(IController(_controller()).bookkeeper())\r\n    .registerVaultTransfer(from, to, amount) {\r\n    } catch {}\r\n    super._beforeTokenTransfer(from, to, amount);\r\n  }\r\n\r\n  //**************** UNDERLYING MANAGEMENT FUNCTIONALITY ***********************\r\n\r\n  /// @notice Return underlying precision units\r\n  function underlyingUnit() external view override returns (uint256) {\r\n    return _underlyingUnit();\r\n  }\r\n\r\n  function _underlyingUnit() internal view returns (uint256) {\r\n    return 10 ** uint256(ERC20Upgradeable(address(_underlying())).decimals());\r\n  }\r\n\r\n  /// @notice Returns the cash balance across all users in this contract.\r\n  function underlyingBalanceInVault() external view override returns (uint256) {\r\n    return _underlyingBalanceInVault();\r\n  }\r\n\r\n  function _underlyingBalanceInVault() internal view returns (uint256) {\r\n    return IERC20(_underlying()).balanceOf(address(this));\r\n  }\r\n\r\n  /// @notice Returns the current underlying (e.g., DAI's) balance together with\r\n  ///         the invested amount (if DAI is invested elsewhere by the strategy).\r\n  function underlyingBalanceWithInvestment() external view override returns (uint256) {\r\n    return _underlyingBalanceWithInvestment();\r\n  }\r\n\r\n  function _underlyingBalanceWithInvestment() internal view returns (uint256) {\r\n    return VaultLibrary.underlyingBalanceWithInvestment(\r\n      _strategy(),\r\n      IERC20(_underlying()).balanceOf(address(this))\r\n    );\r\n  }\r\n\r\n  /// @notice Get the user's share (in underlying)\r\n  ///         underlyingBalanceWithInvestment() * balanceOf(holder) / totalSupply()\r\n  function underlyingBalanceWithInvestmentForHolder(address holder)\r\n  external view override returns (uint256) {\r\n    return _underlyingBalanceWithInvestmentForHolder(holder);\r\n  }\r\n\r\n  function _underlyingBalanceWithInvestmentForHolder(address holder) internal view returns (uint256) {\r\n    if (totalSupply() == 0) {\r\n      return 0;\r\n    }\r\n    return _underlyingBalanceWithInvestment() * balanceOf(holder) / totalSupply();\r\n  }\r\n\r\n  /// @notice Price per full share (PPFS)\r\n  ///         Vaults with 100% buybacks have a value of 1 constantly\r\n  ///         (underlyingUnit() * underlyingBalanceWithInvestment()) / totalSupply()\r\n  function getPricePerFullShare() external view override returns (uint256) {\r\n    return _getPricePerFullShare();\r\n  }\r\n\r\n  function _getPricePerFullShare() internal view returns (uint256) {\r\n    return totalSupply() == 0\r\n    ? _underlyingUnit()\r\n    : _underlyingUnit() * _underlyingBalanceWithInvestment() / totalSupply();\r\n  }\r\n\r\n  /// @notice Return amount of the underlying asset ready to invest to the strategy\r\n  function availableToInvestOut() external view override returns (uint256) {\r\n    return _availableToInvestOut();\r\n  }\r\n\r\n  function _availableToInvestOut() internal view returns (uint256) {\r\n    return VaultLibrary.availableToInvestOut(\r\n      _strategy(),\r\n      _toInvest(),\r\n      _underlyingBalanceInVault()\r\n    );\r\n  }\r\n\r\n  /// @notice Burn shares, withdraw underlying from strategy\r\n  ///         and send back to the user the underlying asset\r\n  function _withdraw(uint256 numberOfShares) internal {\r\n    require(!_reentrantLock(), \"SV: Reentrant call\");\r\n    _setReentrantLock(true);\r\n    _updateRewards(msg.sender);\r\n    require(totalSupply() > 0, \"SV: No shares for withdraw\");\r\n    require(numberOfShares > 0, \"SV: Zero amount for withdraw\");\r\n\r\n    // store totalSupply before shares burn\r\n    uint256 _totalSupply = totalSupply();\r\n\r\n    // this logic not eligible for normal vaults\r\n    if (_lockAllowed()) {\r\n      numberOfShares = _processLockedAmount(numberOfShares);\r\n    }\r\n\r\n    // only statistic, no funds affected\r\n    try IBookkeeper(IController(_controller()).bookkeeper())\r\n    .registerUserAction(msg.sender, numberOfShares, false) {\r\n    } catch {}\r\n\r\n    uint256 underlyingAmountToWithdraw = VaultLibrary.processWithdrawFromStrategy(\r\n      numberOfShares,\r\n      _underlying(),\r\n      _totalSupply,\r\n      _toInvest(),\r\n      _strategy()\r\n    );\r\n\r\n    // need to burn shares after strategy withdraw for properly PPFS calculation\r\n    _burn(msg.sender, numberOfShares);\r\n\r\n    IERC20(_underlying()).safeTransfer(msg.sender, underlyingAmountToWithdraw);\r\n\r\n    _setReentrantLock(false);\r\n    // update the withdrawal amount for the holder\r\n    emit Withdraw(msg.sender, underlyingAmountToWithdraw);\r\n  }\r\n\r\n  /// @dev Locking logic will add a part of locked shares as rewards for this vault\r\n  ///      Calculate locked amount and distribute locked shares as reward to the current vault\r\n  /// @return Number of shares available to withdraw\r\n  function _processLockedAmount(uint256 numberOfShares) internal returns (uint256){\r\n    (uint numberOfSharesAdjusted, uint lockedSharesToReward) = VaultLibrary.calculateLockedAmount(\r\n      numberOfShares,\r\n      userLockTs,\r\n      lockPeriod(),\r\n      lockPenalty(),\r\n      balanceOf(msg.sender)\r\n    );\r\n\r\n    if (lockedSharesToReward != 0) {\r\n      // move shares to current contract for using as rewards\r\n      _transfer(msg.sender, address(this), lockedSharesToReward);\r\n      // vault should have itself as reward token for recirculation process\r\n      _notifyRewardWithoutPeriodChange(lockedSharesToReward, address(this));\r\n    }\r\n\r\n    return numberOfSharesAdjusted;\r\n  }\r\n\r\n  /// @notice Mint shares and transfer underlying from user to the vault\r\n  ///         New shares = (invested amount * total supply) / underlyingBalanceWithInvestment()\r\n  function _deposit(uint256 amount, address sender, address beneficiary) internal {\r\n    require(!_reentrantLock(), \"SV: Reentrant call\");\r\n    _setReentrantLock(true);\r\n    _updateRewards(beneficiary);\r\n    require(amount > 0, \"SV: Zero amount\");\r\n    require(beneficiary != address(0), \"SV: Zero beneficiary for deposit\");\r\n\r\n    uint256 toMint = totalSupply() == 0\r\n    ? amount\r\n    : amount * totalSupply() / _underlyingBalanceWithInvestment();\r\n    // no revert for this case for keep compatability\r\n    if (toMint != 0) {\r\n      toMint = toMint * (DEPOSIT_FEE_DENOMINATOR - _depositFeeNumerator()) / DEPOSIT_FEE_DENOMINATOR;\r\n      _mint(beneficiary, toMint);\r\n\r\n      IERC20(_underlying()).safeTransferFrom(sender, address(this), amount);\r\n\r\n      // only statistic, no funds affected\r\n      try IBookkeeper(IController(_controller()).bookkeeper())\r\n      .registerUserAction(beneficiary, toMint, true){\r\n      } catch {}\r\n      emit Deposit(beneficiary, amount);\r\n    }\r\n    _setReentrantLock(false);\r\n  }\r\n\r\n  /// @notice Transfer underlying to the strategy\r\n  function _invest() internal {\r\n    require(_strategy() != address(0));\r\n    // avoid recursive hardworks\r\n    if (_doHardWorkOnInvest() && msg.sender != _strategy()) {\r\n      _doHardWork();\r\n    }\r\n    uint256 availableAmount = _availableToInvestOut();\r\n    if (availableAmount > 0) {\r\n      IERC20(_underlying()).safeTransfer(address(_strategy()), availableAmount);\r\n      IStrategy(_strategy()).investAllUnderlying();\r\n      emit Invest(availableAmount);\r\n    }\r\n  }\r\n\r\n  //**************** REWARDS FUNCTIONALITY ***********************\r\n\r\n  /// @dev Refresh reward numbers\r\n  function _updateReward(address account, address rt) internal {\r\n    rewardPerTokenStoredForToken[rt] = _rewardPerToken(rt);\r\n    lastUpdateTimeForToken[rt] = _lastTimeRewardApplicable(rt);\r\n    if (account != address(0) && account != address(this)) {\r\n      rewardsForToken[rt][account] = _earned(rt, account);\r\n      userRewardPerTokenPaidForToken[rt][account] = rewardPerTokenStoredForToken[rt];\r\n    }\r\n  }\r\n\r\n  /// @dev Use it for any underlying movements\r\n  function _updateRewards(address account) private {\r\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n      _updateReward(account, _rewardTokens[i]);\r\n    }\r\n  }\r\n\r\n  /// @notice Return earned rewards for specific token and account (with 100% boost)\r\n  ///         Accurate value returns only after updateRewards call\r\n  ///         ((balanceOf(account)\r\n  ///           * (rewardPerToken - userRewardPerTokenPaidForToken)) / 10**18) + rewardsForToken\r\n  function earned(address rt, address account) external view override returns (uint256) {\r\n    return _earned(rt, account);\r\n  }\r\n\r\n  function _earned(address rt, address account) internal view returns (uint256) {\r\n    return balanceOf(account)\r\n    * (_rewardPerToken(rt) - userRewardPerTokenPaidForToken[rt][account])\r\n    / 1e18\r\n    + rewardsForToken[rt][account];\r\n  }\r\n\r\n  /// @notice Return amount ready to claim, calculated with actual boost\r\n  ///         Accurate value returns only after updateRewards call\r\n  function earnedWithBoost(address rt, address account) external view override returns (uint256) {\r\n    return VaultLibrary.earnedWithBoost(\r\n      _earned(rt, account),\r\n      userBoostTs[account],\r\n      _controller(),\r\n      _protectionMode()\r\n    );\r\n  }\r\n\r\n  /// @notice Return reward per token ratio by reward token address\r\n  ///                rewardPerTokenStoredForToken + (\r\n  ///                (lastTimeRewardApplicable - lastUpdateTimeForToken)\r\n  ///                 * rewardRateForToken * 10**18 / totalSupply)\r\n  function rewardPerToken(address rt) external view override returns (uint256) {\r\n    return _rewardPerToken(rt);\r\n  }\r\n\r\n  function _rewardPerToken(address rt) internal view returns (uint256) {\r\n    uint256 totalSupplyWithoutItself = totalSupply() - balanceOf(address(this));\r\n    if (totalSupplyWithoutItself == 0) {\r\n      return rewardPerTokenStoredForToken[rt];\r\n    }\r\n    return\r\n    rewardPerTokenStoredForToken[rt] + (\r\n    (_lastTimeRewardApplicable(rt) - lastUpdateTimeForToken[rt])\r\n    * rewardRateForToken[rt]\r\n    * 1e18\r\n    / totalSupplyWithoutItself\r\n    );\r\n  }\r\n\r\n  /// @notice Return periodFinishForToken or block.timestamp by reward token address\r\n  function lastTimeRewardApplicable(address rt) external view override returns (uint256) {\r\n    return _lastTimeRewardApplicable(rt);\r\n  }\r\n\r\n  function _lastTimeRewardApplicable(address rt) internal view returns (uint256) {\r\n    return Math.min(block.timestamp, periodFinishForToken[rt]);\r\n  }\r\n\r\n  /// @notice Return reward token array\r\n  function rewardTokens() external view override returns (address[] memory){\r\n    return _rewardTokens;\r\n  }\r\n\r\n  /// @notice Return reward token array length\r\n  function rewardTokensLength() external view override returns (uint256){\r\n    return _rewardTokens.length;\r\n  }\r\n\r\n  /// @notice Return reward token index\r\n  ///         If the return value is MAX_UINT256, it means that\r\n  ///         the specified reward token is not in the list\r\n  function getRewardTokenIndex(address rt) external override view returns (uint256) {\r\n    return _getRewardTokenIndex(rt);\r\n  }\r\n\r\n  function _getRewardTokenIndex(address rt) internal view returns (uint256) {\r\n    for (uint i = 0; i < _rewardTokens.length; i++) {\r\n      if (_rewardTokens[i] == rt)\r\n        return i;\r\n    }\r\n    return type(uint256).max;\r\n  }\r\n\r\n  /// @notice Update rewardRateForToken\r\n  ///         If period ended: reward / duration\r\n  ///         else add leftover to the reward amount and refresh the period\r\n  ///         (reward + ((periodFinishForToken - block.timestamp) * rewardRateForToken)) / duration\r\n  function notifyTargetRewardAmount(address _rewardToken, uint256 amount) external override {\r\n    require(IController(_controller()).isRewardDistributor(msg.sender), FORBIDDEN_MSG);\r\n    _updateRewards(address(0));\r\n    // register notified amount for statistical purposes\r\n    IBookkeeper(IController(_controller()).bookkeeper())\r\n    .registerRewardDistribution(address(this), _rewardToken, amount);\r\n\r\n    // overflow fix according to https://sips.synthetix.io/sips/sip-77\r\n    require(amount < type(uint256).max / 1e18, \"SV: Amount overflow\");\r\n    uint256 i = _getRewardTokenIndex(_rewardToken);\r\n    require(i != type(uint256).max, \"SV: RT not found\");\r\n\r\n    IERC20(_rewardToken).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n    if (block.timestamp >= periodFinishForToken[_rewardToken]) {\r\n      rewardRateForToken[_rewardToken] = amount / duration();\r\n    } else {\r\n      uint256 remaining = periodFinishForToken[_rewardToken] - block.timestamp;\r\n      uint256 leftover = remaining * rewardRateForToken[_rewardToken];\r\n      rewardRateForToken[_rewardToken] = (amount + leftover) / duration();\r\n    }\r\n    lastUpdateTimeForToken[_rewardToken] = block.timestamp;\r\n    periodFinishForToken[_rewardToken] = block.timestamp + duration();\r\n\r\n    // Ensure the provided reward amount is not more than the balance in the contract.\r\n    // This keeps the reward rate in the right range, preventing overflows due to\r\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\r\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n    uint balance = IERC20(_rewardToken).balanceOf(address(this));\r\n    require(rewardRateForToken[_rewardToken] <= balance / duration(), \"SV: Provided reward too high\");\r\n    emit RewardAdded(_rewardToken, amount);\r\n  }\r\n\r\n  /// @dev Assume approve\r\n  ///      Add reward amount without changing reward duration\r\n  function notifyRewardWithoutPeriodChange(address _rewardToken, uint256 _amount) external override {\r\n    require(IController(_controller()).isRewardDistributor(msg.sender), FORBIDDEN_MSG);\r\n    IERC20(_rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n    _notifyRewardWithoutPeriodChange(_amount, _rewardToken);\r\n  }\r\n\r\n  /// @notice Transfer earned rewards to caller\r\n  function _payReward(address rt) internal {\r\n    (uint renotifiedAmount, uint paidReward) = VaultLibrary.processPayReward(\r\n      rt,\r\n      _earned(rt, msg.sender),\r\n      userBoostTs,\r\n      _controller(),\r\n      _protectionMode(),\r\n      rewardsForToken\r\n    );\r\n    if (renotifiedAmount != 0) {\r\n      _notifyRewardWithoutPeriodChange(renotifiedAmount, rt);\r\n    }\r\n    if (paidReward != 0) {\r\n      emit RewardPaid(msg.sender, rt, renotifiedAmount);\r\n    }\r\n  }\r\n\r\n  /// @dev Add reward amount without changing reward duration\r\n  function _notifyRewardWithoutPeriodChange(uint256 _amount, address _rewardToken) internal {\r\n    _updateRewards(address(0));\r\n    require(_getRewardTokenIndex(_rewardToken) != type(uint256).max, \"SV: RT not found\");\r\n    if (_amount > 1 && _amount < type(uint256).max / 1e18) {\r\n      rewardPerTokenStoredForToken[_rewardToken] = _rewardPerToken(_rewardToken);\r\n      lastUpdateTimeForToken[_rewardToken] = _lastTimeRewardApplicable(_rewardToken);\r\n      if (block.timestamp >= periodFinishForToken[_rewardToken]) {\r\n        // if vesting ended transfer the change to the controller\r\n        // otherwise we will have possible infinity rewards duration\r\n        IERC20(_rewardToken).safeTransfer(_controller(), _amount);\r\n        emit RewardSentToController(_rewardToken, _amount);\r\n      } else {\r\n        uint256 remaining = periodFinishForToken[_rewardToken] - block.timestamp;\r\n        uint256 leftover = remaining * rewardRateForToken[_rewardToken];\r\n        rewardRateForToken[_rewardToken] = (_amount + leftover) / remaining;\r\n        emit RewardRecirculated(_rewardToken, _amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Disable strategy and move rewards to controller\r\n  function stop() external override {\r\n    _onlyVaultController(msg.sender);\r\n    IStrategy(_strategy()).withdrawAllToVault();\r\n    _setActive(false);\r\n\r\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n      address rt = _rewardTokens[i];\r\n      periodFinishForToken[rt] = block.timestamp;\r\n      rewardRateForToken[rt] = 0;\r\n      uint256 amount = IERC20(rt).balanceOf(address(this));\r\n      if (amount != 0) {\r\n        IERC20(rt).safeTransfer(_controller(), amount);\r\n      }\r\n      emit RewardMovedToController(rt, amount);\r\n    }\r\n  }\r\n\r\n  //**************** STRATEGY UPDATE FUNCTIONALITY ***********************\r\n\r\n  /// @notice Check the strategy time lock, withdraw all to the vault and change the strategy\r\n  ///         Should be called via controller\r\n  function setStrategy(address newStrategy) external override {\r\n    // the main functionality moved to library for reduce contract size\r\n    VaultLibrary.changeStrategy(_controller(), _underlying(), newStrategy, _strategy());\r\n    emit StrategyChanged(newStrategy, _strategy());\r\n    _setStrategy(newStrategy);\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/openzeppelin/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n  /**\r\n   * @dev Returns the largest of two numbers.\r\n   */\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the smallest of two numbers.\r\n   */\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the average of two numbers. The result is rounded towards\r\n   * zero.\r\n   */\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b) / 2 can overflow.\r\n    return (a & b) + (a ^ b) / 2;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the ceiling of the division of two numbers.\r\n   *\r\n   * This differs from standard division with `/` in that it rounds up instead\r\n   * of rounding down.\r\n   */\r\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b - 1) / b can overflow on addition, so we distribute.\r\n    return a / b + (a % b == 0 ? 0 : 1);\r\n  }\r\n}\r\n"
    },
    "contracts/openzeppelin/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  /**\r\n   * @dev Deprecated. This function has issues similar to the ones found in\r\n   * {IERC20-approve}, and its usage is discouraged.\r\n   *\r\n   * Whenever possible, use {safeIncreaseAllowance} and\r\n   * {safeDecreaseAllowance} instead.\r\n   */\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    // safeApprove should only be called when setting an initial allowance,\r\n    // or when resetting it to zero. To increase and decrease it, use\r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    require(\r\n      (value == 0) || (token.allowance(address(this), spender) == 0),\r\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n    );\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n  unchecked {\r\n    uint256 oldAllowance = token.allowance(address(this), spender);\r\n    require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n    uint256 newAllowance = oldAllowance - value;\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/openzeppelin/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "contracts/openzeppelin/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./ContextUpgradeable.sol\";\r\nimport \"./Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata {\r\n  mapping(address => uint256) private _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  /**\r\n   * @dev Sets the values for {name} and {symbol}.\r\n   *\r\n   * The default value of {decimals} is 18. To select a different value for\r\n   * {decimals} you should overload it.\r\n   *\r\n   * All two of these values are immutable: they can only be set once during\r\n   * construction.\r\n   */\r\n  function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\r\n    __Context_init_unchained();\r\n    __ERC20_init_unchained(name_, symbol_);\r\n  }\r\n\r\n  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n   * overridden;\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {ERC20}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for ``sender``'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n  unchecked {\r\n    _approve(sender, _msgSender(), currentAllowance - amount);\r\n  }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n  unchecked {\r\n    _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n  }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n   *\r\n   * This internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n  unchecked {\r\n    _balances[sender] = senderBalance - amount;\r\n  }\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n\r\n    _afterTokenTransfer(sender, recipient, amount);\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n\r\n    _afterTokenTransfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account];\r\n    require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n  unchecked {\r\n    _balances[account] = accountBalance - amount;\r\n  }\r\n    _totalSupply -= amount;\r\n\r\n    emit Transfer(account, address(0), amount);\r\n\r\n    _afterTokenTransfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n   *\r\n   * This internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * will be transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * has been transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n  uint256[45] private __gap;\r\n}\r\n"
    },
    "contracts/base/vault/VaultStorage.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"../../openzeppelin/Initializable.sol\";\r\nimport \"../interface/ISmartVault.sol\";\r\n\r\n/// @title Eternal storage + getters and setters pattern\r\n/// @dev If you will change a key value it will require setup it again\r\n///      Implements IVault interface for reducing code base\r\n/// @author belbix\r\nabstract contract VaultStorage is Initializable, ISmartVault {\r\n\r\n  // don't change names or ordering!\r\n  mapping(bytes32 => uint256) private uintStorage;\r\n  mapping(bytes32 => address) private addressStorage;\r\n  mapping(bytes32 => bool) private boolStorage;\r\n\r\n  /// @notice Boolean value changed the variable with `name`\r\n  event UpdatedBoolSlot(string indexed name, bool oldValue, bool newValue);\r\n  /// @notice Address changed the variable with `name`\r\n  event UpdatedAddressSlot(string indexed name, address oldValue, address newValue);\r\n  /// @notice Value changed the variable with `name`\r\n  event UpdatedUint256Slot(string indexed name, uint256 oldValue, uint256 newValue);\r\n\r\n  /// @notice Initialize contract after setup it as proxy implementation\r\n  /// @dev Use it only once after first logic setup\r\n  /// @param _underlyingToken Vault underlying token\r\n  /// @param _durationValue Reward vesting period\r\n  function initializeVaultStorage(\r\n    address _underlyingToken,\r\n    uint256 _durationValue,\r\n    bool __lockAllowed\r\n  ) public initializer {\r\n    _setUnderlying(_underlyingToken);\r\n    _setDuration(_durationValue);\r\n    _setActive(true);\r\n    // no way to change it after initialisation for avoiding risks of misleading users\r\n    setBoolean(\"lockAllowed\", __lockAllowed);\r\n  }\r\n\r\n  // ******************* SETTERS AND GETTERS **********************\r\n\r\n  function _setStrategy(address _address) internal {\r\n    emit UpdatedAddressSlot(\"strategy\", _strategy(), _address);\r\n    setAddress(\"strategy\", _address);\r\n  }\r\n\r\n  /// @notice Current strategy that vault use for farming\r\n  function strategy() external override view returns (address) {\r\n    return _strategy();\r\n  }\r\n\r\n  function _strategy() internal view returns (address) {\r\n    return getAddress(\"strategy\");\r\n  }\r\n\r\n  function _setUnderlying(address _address) private {\r\n    emit UpdatedAddressSlot(\"underlying\", _underlying(), _address);\r\n    setAddress(\"underlying\", _address);\r\n  }\r\n\r\n  /// @notice Vault underlying\r\n  function underlying() external view override returns (address) {\r\n    return _underlying();\r\n  }\r\n\r\n  function _underlying() internal view returns (address) {\r\n    return getAddress(\"underlying\");\r\n  }\r\n\r\n\r\n  function _setDuration(uint256 _value) internal {\r\n    emit UpdatedUint256Slot(\"duration\", duration(), _value);\r\n    setUint256(\"duration\", _value);\r\n  }\r\n\r\n  /// @notice Rewards vesting period\r\n  function duration() public view override returns (uint256) {\r\n    return getUint256(\"duration\");\r\n  }\r\n\r\n  function _setActive(bool _value) internal {\r\n    emit UpdatedBoolSlot(\"active\", _active(), _value);\r\n    setBoolean(\"active\", _value);\r\n  }\r\n\r\n  /// @notice Vault status\r\n  function active() external view override returns (bool) {\r\n    return _active();\r\n  }\r\n\r\n  function _active() internal view returns (bool) {\r\n    return getBoolean(\"active\");\r\n  }\r\n\r\n  function _setPpfsDecreaseAllowed(bool _value) internal {\r\n    emit UpdatedBoolSlot(\"ppfsDecreaseAllowed\", ppfsDecreaseAllowed(), _value);\r\n    setBoolean(\"ppfsDecreaseAllowed\", _value);\r\n  }\r\n\r\n  /// @notice Vault status\r\n  function ppfsDecreaseAllowed() public view override returns (bool) {\r\n    return getBoolean(\"ppfsDecreaseAllowed\");\r\n  }\r\n\r\n  function _setLockPeriod(uint256 _value) internal {\r\n    emit UpdatedUint256Slot(\"lockPeriod\", lockPeriod(), _value);\r\n    setUint256(\"lockPeriod\", _value);\r\n  }\r\n\r\n  /// @notice Deposit lock period\r\n  function lockPeriod() public view override returns (uint256) {\r\n    return getUint256(\"lockPeriod\");\r\n  }\r\n\r\n  function _setLockPenalty(uint256 _value) internal {\r\n    emit UpdatedUint256Slot(\"lockPenalty\", lockPenalty(), _value);\r\n    setUint256(\"lockPenalty\", _value);\r\n  }\r\n\r\n  /// @notice Base penalty if funds locked\r\n  function lockPenalty() public view override returns (uint256) {\r\n    return getUint256(\"lockPenalty\");\r\n  }\r\n\r\n  function _disableLock() internal {\r\n    emit UpdatedBoolSlot(\"lockAllowed\", _lockAllowed(), false);\r\n    setBoolean(\"lockAllowed\", false);\r\n  }\r\n\r\n  /// @notice Lock functionality allowed for this contract or not\r\n  function lockAllowed() external view override returns (bool) {\r\n    return _lockAllowed();\r\n  }\r\n\r\n  function _lockAllowed() internal view returns (bool) {\r\n    return getBoolean(\"lockAllowed\");\r\n  }\r\n\r\n  function _setToInvest(uint256 _value) internal {\r\n    emit UpdatedUint256Slot(\"toInvest\", _toInvest(), _value);\r\n    setUint256(\"toInvest\", _value);\r\n  }\r\n\r\n  function toInvest() external view override returns (uint256) {\r\n    return _toInvest();\r\n  }\r\n\r\n  function _toInvest() internal view returns (uint256) {\r\n    return getUint256(\"toInvest\");\r\n  }\r\n\r\n  function _setReentrantLock(bool _value) internal {\r\n    setBoolean(\"reentrantLock\", _value);\r\n  }\r\n\r\n  /// @notice Vault status\r\n  function _reentrantLock() internal view returns (bool) {\r\n    return getBoolean(\"reentrantLock\");\r\n  }\r\n\r\n  function _setDepositFeeNumerator(uint256 _value) internal {\r\n    emit UpdatedUint256Slot(\"depositFeeNumerator\", _depositFeeNumerator(), _value);\r\n    setUint256(\"depositFeeNumerator\", _value);\r\n  }\r\n\r\n  function depositFeeNumerator() external view override returns (uint256) {\r\n    return getUint256(\"depositFeeNumerator\");\r\n  }\r\n\r\n  function _depositFeeNumerator() internal view returns (uint256) {\r\n    return getUint256(\"depositFeeNumerator\");\r\n  }\r\n\r\n  function _setProtectionMode(bool _value) internal {\r\n    emit UpdatedBoolSlot(\"protectionMode\", _protectionMode(), _value);\r\n    setBoolean(\"protectionMode\", _value);\r\n  }\r\n\r\n  /// @notice Protection mode means claim rewards on withdraw and 0% initial reward boost\r\n  function protectionMode() external view override returns (bool) {\r\n    return _protectionMode();\r\n  }\r\n\r\n  function _protectionMode() internal view returns (bool) {\r\n    return getBoolean(\"protectionMode\");\r\n  }\r\n\r\n  function _setDoHardWorkOnInvest(bool _value) internal {\r\n    emit UpdatedBoolSlot(\"hw_inv\", _doHardWorkOnInvest(), _value);\r\n    setBoolean(\"hw_inv\", _value);\r\n  }\r\n\r\n  /// @dev Returns doHardWorkOnInvest mode status\r\n  function doHardWorkOnInvest() external view returns (bool) {\r\n    return _doHardWorkOnInvest();\r\n  }\r\n\r\n  function _doHardWorkOnInvest() internal view returns (bool) {\r\n    return getBoolean(\"hw_inv\");\r\n  }\r\n\r\n  function _setAlwaysInvest(bool _value) internal {\r\n    emit UpdatedBoolSlot(\"alwaysInvest\", _alwaysInvest(), _value);\r\n    setBoolean(\"alwaysInvest\", _value);\r\n  }\r\n\r\n  /// @dev Returns doHardWorkOnInvest mode status\r\n  function alwaysInvest() external view returns (bool) {\r\n    return _doHardWorkOnInvest();\r\n  }\r\n\r\n  function _alwaysInvest() internal view returns (bool) {\r\n    return getBoolean(\"alwaysInvest\");\r\n  }\r\n\r\n  // ******************** STORAGE INTERNAL FUNCTIONS ********************\r\n\r\n  function setBoolean(string memory key, bool _value) private {\r\n    boolStorage[keccak256(abi.encodePacked(key))] = _value;\r\n  }\r\n\r\n  function getBoolean(string memory key) private view returns (bool) {\r\n    return boolStorage[keccak256(abi.encodePacked(key))];\r\n  }\r\n\r\n  function setAddress(string memory key, address _address) private {\r\n    addressStorage[keccak256(abi.encodePacked(key))] = _address;\r\n  }\r\n\r\n  function getAddress(string memory key) private view returns (address) {\r\n    return addressStorage[keccak256(abi.encodePacked(key))];\r\n  }\r\n\r\n  function setUint256(string memory key, uint256 _value) private {\r\n    uintStorage[keccak256(abi.encodePacked(key))] = _value;\r\n  }\r\n\r\n  function getUint256(string memory key) private view returns (uint256) {\r\n    return uintStorage[keccak256(abi.encodePacked(key))];\r\n  }\r\n\r\n  //slither-disable-next-line unused-state\r\n  uint256[50] private ______gap;\r\n}\r\n"
    },
    "contracts/base/vault/VaultLibrary.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"../../openzeppelin/IERC20.sol\";\r\nimport \"../../openzeppelin/SafeERC20.sol\";\r\nimport \"../../openzeppelin/Math.sol\";\r\nimport \"../interface/IStrategy.sol\";\r\nimport \"../interface/IControllable.sol\";\r\nimport \"../interface/IController.sol\";\r\nimport \"../interface/IVaultController.sol\";\r\nimport \"../interface/IBookkeeper.sol\";\r\n\r\n/// @title Library for SmartVault\r\n/// @author belbix\r\nlibrary VaultLibrary {\r\n  using SafeERC20 for IERC20;\r\n\r\n  // !!! CONSTANTS MUST BE THE SAME AS IN SMART VAULT !!!\r\n  uint private constant TO_INVEST_DENOMINATOR = 1000;\r\n  uint private constant LOCK_PENALTY_DENOMINATOR = 1000;\r\n\r\n  /// @dev Do necessary checks and prepare a strategy for installing\r\n  function changeStrategy(\r\n    address controller,\r\n    address underlying,\r\n    address newStrategy,\r\n    address oldStrategy\r\n  ) public {\r\n    require(controller == msg.sender, \"SV: Not controller\");\r\n    require(newStrategy != address(0), \"SV: Zero new strategy\");\r\n    require(IStrategy(newStrategy).underlying() == address(underlying), \"SV: Wrong strategy underlying\");\r\n    require(IStrategy(newStrategy).vault() == address(this), \"SV: Wrong strategy vault\");\r\n    require(IControllable(newStrategy).isController(controller), \"SV: Wrong strategy controller\");\r\n    require(newStrategy != oldStrategy, \"SV: The same strategy\");\r\n\r\n    if (oldStrategy != address(0)) {// if the original strategy is defined\r\n      IERC20(underlying).safeApprove(address(oldStrategy), 0);\r\n      IStrategy(oldStrategy).withdrawAllToVault();\r\n    }\r\n    IERC20(underlying).safeApprove(newStrategy, 0);\r\n    IERC20(underlying).safeApprove(newStrategy, type(uint).max);\r\n    IController(controller).addStrategy(newStrategy);\r\n  }\r\n\r\n  /// @notice Returns amount of the underlying asset ready to invest to the strategy\r\n  function availableToInvestOut(\r\n    address strategy,\r\n    uint toInvest,\r\n    uint underlyingBalanceInVault\r\n  ) public view returns (uint) {\r\n    if (strategy == address(0)) {\r\n      return 0;\r\n    }\r\n    uint wantInvestInTotal = underlyingBalanceWithInvestment(strategy, underlyingBalanceInVault)\r\n    * toInvest / TO_INVEST_DENOMINATOR;\r\n    uint alreadyInvested = IStrategy(strategy).investedUnderlyingBalance();\r\n    if (alreadyInvested >= wantInvestInTotal) {\r\n      return 0;\r\n    } else {\r\n      uint remainingToInvest = wantInvestInTotal - alreadyInvested;\r\n      return remainingToInvest <= underlyingBalanceInVault\r\n      ? remainingToInvest : underlyingBalanceInVault;\r\n    }\r\n  }\r\n\r\n  /// @dev It is a part of withdrawing process.\r\n  ///      Do necessary calculation for withdrawing from strategy and move funds to vault\r\n  function processWithdrawFromStrategy(\r\n    uint numberOfShares,\r\n    address underlying,\r\n    uint totalSupply,\r\n    uint toInvest,\r\n    address strategy\r\n  ) public returns (uint) {\r\n    uint underlyingBalanceInVault = IERC20(underlying).balanceOf(address(this));\r\n    uint underlyingAmountToWithdraw =\r\n    underlyingBalanceWithInvestment(strategy, underlyingBalanceInVault)\r\n    * numberOfShares / totalSupply;\r\n    if (underlyingAmountToWithdraw > underlyingBalanceInVault) {\r\n      // withdraw everything from the strategy to accurately check the share value\r\n      if (numberOfShares == totalSupply) {\r\n        IStrategy(strategy).withdrawAllToVault();\r\n      } else {\r\n        uint strategyBalance = IStrategy(strategy).investedUnderlyingBalance();\r\n        // we should always have buffer amount inside the vault\r\n        uint missing = (strategyBalance + underlyingBalanceInVault)\r\n        * (TO_INVEST_DENOMINATOR - toInvest)\r\n        / TO_INVEST_DENOMINATOR\r\n        + underlyingAmountToWithdraw;\r\n        missing = Math.min(missing, strategyBalance);\r\n        if (missing > 0) {\r\n          IStrategy(strategy).withdrawToVault(missing);\r\n        }\r\n      }\r\n      underlyingBalanceInVault = IERC20(underlying).balanceOf(address(this));\r\n      // recalculate to improve accuracy\r\n      underlyingAmountToWithdraw = Math.min(\r\n        underlyingBalanceWithInvestment(strategy, underlyingBalanceInVault)\r\n        * numberOfShares / totalSupply,\r\n        underlyingBalanceInVault\r\n      );\r\n    }\r\n    return underlyingAmountToWithdraw;\r\n  }\r\n\r\n  /// @notice Returns the current underlying (e.g., DAI's) balance together with\r\n  ///         the invested amount (if DAI is invested elsewhere by the strategy).\r\n  function underlyingBalanceWithInvestment(\r\n    address strategy,\r\n    uint underlyingBalanceInVault\r\n  ) internal view returns (uint256) {\r\n    if (address(strategy) == address(0)) {\r\n      // initial state, when not set\r\n      return underlyingBalanceInVault;\r\n    }\r\n    return underlyingBalanceInVault + IStrategy(strategy).investedUnderlyingBalance();\r\n  }\r\n\r\n  /// @dev Locking logic will add a part of locked shares as rewards for this vault\r\n  ///      Calculate locked amount for using in the main logic\r\n  function calculateLockedAmount(\r\n    uint numberOfShares,\r\n    mapping(address => uint) storage userLockTs,\r\n    uint lockPeriod,\r\n    uint lockPenalty,\r\n    uint userBalance\r\n  ) public returns (uint numberOfSharesAdjusted, uint lockedSharesToReward) {\r\n    numberOfSharesAdjusted = numberOfShares;\r\n    uint lockStart = userLockTs[msg.sender];\r\n    // refresh lock time\r\n    // if full withdraw set timer to 0\r\n    if (userBalance == numberOfSharesAdjusted) {\r\n      userLockTs[msg.sender] = 0;\r\n    } else {\r\n      userLockTs[msg.sender] = block.timestamp;\r\n    }\r\n    if (lockStart != 0 && lockStart < block.timestamp) {\r\n      uint currentLockDuration = block.timestamp - lockStart;\r\n      if (currentLockDuration < lockPeriod) {\r\n        uint sharesBase = numberOfSharesAdjusted\r\n        * (LOCK_PENALTY_DENOMINATOR - lockPenalty)\r\n        / LOCK_PENALTY_DENOMINATOR;\r\n        uint toWithdraw = sharesBase + (\r\n        ((numberOfSharesAdjusted - sharesBase) * currentLockDuration) / lockPeriod\r\n        );\r\n        lockedSharesToReward = numberOfSharesAdjusted - toWithdraw;\r\n        numberOfSharesAdjusted = toWithdraw;\r\n      }\r\n    }\r\n    return (numberOfSharesAdjusted, lockedSharesToReward);\r\n  }\r\n\r\n  /// @notice Return amount ready to claim, calculated with actual boost.\r\n  ///         Accurate value returns only after updateRewards call.\r\n  function earnedWithBoost(\r\n    uint reward,\r\n    uint boostStart,\r\n    address controller,\r\n    bool protectionMode\r\n  ) public view returns (uint) {\r\n    // if we don't have a record we assume that it was deposited before boost logic and use 100% boost\r\n    if (boostStart != 0 && boostStart < block.timestamp) {\r\n      uint currentBoostDuration = block.timestamp - boostStart;\r\n      // not 100% boost\r\n      IVaultController _vaultController = IVaultController(IController(controller).vaultController());\r\n      uint boostDuration = _vaultController.rewardBoostDuration();\r\n      uint rewardRatioWithoutBoost = _vaultController.rewardRatioWithoutBoost();\r\n      if (protectionMode) {\r\n        rewardRatioWithoutBoost = 0;\r\n      }\r\n      if (currentBoostDuration < boostDuration) {\r\n        uint rewardWithoutBoost = reward * rewardRatioWithoutBoost / 100;\r\n        // calculate boosted part of rewards\r\n        reward = rewardWithoutBoost + (\r\n        (reward - rewardWithoutBoost) * currentBoostDuration / boostDuration\r\n        );\r\n      }\r\n    }\r\n    return reward;\r\n  }\r\n\r\n  /// @notice Transfer earned rewards to caller\r\n  function processPayReward(\r\n    address rt,\r\n    uint reward,\r\n    mapping(address => uint256) storage userBoostTs,\r\n    address controller,\r\n    bool protectionMode,\r\n    mapping(address => mapping(address => uint256)) storage rewardsForToken\r\n  ) public returns (uint renotifiedAmount, uint paidReward) {\r\n    paidReward = reward;\r\n    if (paidReward > 0 && IERC20(rt).balanceOf(address(this)) >= paidReward) {\r\n      // calculate boosted amount\r\n      uint256 boostStart = userBoostTs[msg.sender];\r\n      // refresh boost\r\n      userBoostTs[msg.sender] = block.timestamp;\r\n      // if we don't have a record we assume that it was deposited before boost logic and use 100% boost\r\n      // allow claim without penalty to some addresses, TetuSwap pairs as example\r\n      if (\r\n        boostStart != 0\r\n        && boostStart < block.timestamp\r\n        && !IController(controller).isPoorRewardConsumer(msg.sender)\r\n      ) {\r\n        uint256 currentBoostDuration = block.timestamp - boostStart;\r\n        IVaultController _vaultController = IVaultController(IController(controller).vaultController());\r\n        // not 100% boost\r\n        uint256 boostDuration = _vaultController.rewardBoostDuration();\r\n        uint256 rewardRatioWithoutBoost = _vaultController.rewardRatioWithoutBoost();\r\n        if (protectionMode) {\r\n          rewardRatioWithoutBoost = 0;\r\n        }\r\n        if (currentBoostDuration < boostDuration) {\r\n          uint256 rewardWithoutBoost = paidReward * rewardRatioWithoutBoost / 100;\r\n          // calculate boosted part of rewards\r\n          uint256 toClaim = rewardWithoutBoost + (\r\n          (paidReward - rewardWithoutBoost) * currentBoostDuration / boostDuration\r\n          );\r\n          renotifiedAmount = paidReward - toClaim;\r\n          paidReward = toClaim;\r\n          // notify reward should be called in vault\r\n        }\r\n      }\r\n\r\n      rewardsForToken[rt][msg.sender] = 0;\r\n      IERC20(rt).safeTransfer(msg.sender, paidReward);\r\n      // only statistic, should not affect reward claim process\r\n      try IBookkeeper(IController(controller).bookkeeper())\r\n      .registerUserEarned(msg.sender, address(this), rt, paidReward) {\r\n      } catch {}\r\n    }\r\n    return (renotifiedAmount, paidReward);\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/base/governance/ControllableV2.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"../../openzeppelin/Initializable.sol\";\r\nimport \"../interface/IControllable.sol\";\r\nimport \"../interface/IControllableExtended.sol\";\r\nimport \"../interface/IController.sol\";\r\n\r\n/// @title Implement basic functionality for any contract that require strict control\r\n///        V2 is optimised version for less gas consumption\r\n/// @dev Can be used with upgradeable pattern.\r\n///      Require call initializeControllable() in any case.\r\n/// @author belbix\r\nabstract contract ControllableV2 is Initializable, IControllable, IControllableExtended {\r\n\r\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.controller\")) - 1);\r\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.created\")) - 1);\r\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.created_block\")) - 1);\r\n\r\n  event ContractInitialized(address controller, uint ts, uint block);\r\n\r\n  /// @notice Initialize contract after setup it as proxy implementation\r\n  ///         Save block.timestamp in the \"created\" variable\r\n  /// @dev Use it only once after first logic setup\r\n  /// @param __controller Controller address\r\n  function initializeControllable(address __controller) public initializer {\r\n    _setController(__controller);\r\n    _setCreated(block.timestamp);\r\n    _setCreatedBlock(block.number);\r\n    emit ContractInitialized(__controller, block.timestamp, block.number);\r\n  }\r\n\r\n  /// @dev Return true if given address is controller\r\n  function isController(address _value) external override view returns (bool) {\r\n    return _isController(_value);\r\n  }\r\n\r\n  function _isController(address _value) internal view returns (bool) {\r\n    return _value == _controller();\r\n  }\r\n\r\n  /// @notice Return true if given address is setup as governance in Controller\r\n  function isGovernance(address _value) external override view returns (bool) {\r\n    return _isGovernance(_value);\r\n  }\r\n\r\n  function _isGovernance(address _value) internal view returns (bool) {\r\n    return IController(_controller()).governance() == _value;\r\n  }\r\n\r\n  // ************* SETTERS/GETTERS *******************\r\n\r\n  /// @notice Return controller address saved in the contract slot\r\n  function controller() external view override returns (address) {\r\n    return _controller();\r\n  }\r\n\r\n  function _controller() internal view returns (address result) {\r\n    bytes32 slot = _CONTROLLER_SLOT;\r\n    assembly {\r\n      result := sload(slot)\r\n    }\r\n  }\r\n\r\n  /// @dev Set a controller address to contract slot\r\n  function _setController(address _newController) private {\r\n    require(_newController != address(0));\r\n    bytes32 slot = _CONTROLLER_SLOT;\r\n    assembly {\r\n      sstore(slot, _newController)\r\n    }\r\n  }\r\n\r\n  /// @notice Return creation timestamp\r\n  /// @return ts Creation timestamp\r\n  function created() external view override returns (uint256 ts) {\r\n    bytes32 slot = _CREATED_SLOT;\r\n    assembly {\r\n      ts := sload(slot)\r\n    }\r\n  }\r\n\r\n  /// @dev Filled only once when contract initialized\r\n  /// @param _value block.timestamp\r\n  function _setCreated(uint256 _value) private {\r\n    bytes32 slot = _CREATED_SLOT;\r\n    assembly {\r\n      sstore(slot, _value)\r\n    }\r\n  }\r\n\r\n  /// @notice Return creation block number\r\n  /// @return ts Creation block number\r\n  function createdBlock() external view returns (uint256 ts) {\r\n    bytes32 slot = _CREATED_BLOCK_SLOT;\r\n    assembly {\r\n      ts := sload(slot)\r\n    }\r\n  }\r\n\r\n  /// @dev Filled only once when contract initialized\r\n  /// @param _value block.number\r\n  function _setCreatedBlock(uint256 _value) private {\r\n    bytes32 slot = _CREATED_BLOCK_SLOT;\r\n    assembly {\r\n      sstore(slot, _value)\r\n    }\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/base/interface/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IStrategy {\r\n\r\n  enum Platform {\r\n    UNKNOWN, // 0\r\n    TETU, // 1\r\n    QUICK, // 2\r\n    SUSHI, // 3\r\n    WAULT, // 4\r\n    IRON, // 5\r\n    COSMIC, // 6\r\n    CURVE, // 7\r\n    DINO, // 8\r\n    IRON_LEND, // 9\r\n    HERMES, // 10\r\n    CAFE, // 11\r\n    TETU_SWAP, // 12\r\n    SPOOKY, // 13\r\n    AAVE_LEND, //14\r\n    AAVE_MAI_BAL, // 15\r\n    GEIST, //16\r\n    HARVEST, //17\r\n    SCREAM_LEND, //18\r\n    KLIMA, //19\r\n    VESQ, //20\r\n    QIDAO, //21\r\n    SUNFLOWER, //22\r\n    NACHO, //23\r\n    STRATEGY_SPLITTER, //24\r\n    TOMB, //25\r\n    TAROT, //26\r\n    BEETHOVEN, //27\r\n    IMPERMAX, //28\r\n    TETU_SF, //29\r\n    ALPACA, //30\r\n    MARKET, //31\r\n    UNIVERSE, //32\r\n    SLOT_33, //33\r\n    SLOT_34, //34\r\n    SLOT_35, //35\r\n    SLOT_36, //36\r\n    SLOT_37, //37\r\n    SLOT_38, //38\r\n    SLOT_39, //39\r\n    SLOT_40, //40\r\n    SLOT_41, //41\r\n    SLOT_42, //42\r\n    SLOT_43, //43\r\n    SLOT_44, //44\r\n    SLOT_45, //45\r\n    SLOT_46, //46\r\n    SLOT_47, //47\r\n    SLOT_48, //48\r\n    SLOT_49, //49\r\n    SLOT_50 //50\r\n  }\r\n\r\n  // *************** GOVERNANCE ACTIONS **************\r\n  function STRATEGY_NAME() external view returns (string memory);\r\n\r\n  function withdrawAllToVault() external;\r\n\r\n  function withdrawToVault(uint256 amount) external;\r\n\r\n  function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n  function doHardWork() external;\r\n\r\n  function investAllUnderlying() external;\r\n\r\n  function emergencyExit() external;\r\n\r\n  function pauseInvesting() external;\r\n\r\n  function continueInvesting() external;\r\n\r\n  // **************** VIEWS ***************\r\n  function rewardTokens() external view returns (address[] memory);\r\n\r\n  function underlying() external view returns (address);\r\n\r\n  function underlyingBalance() external view returns (uint256);\r\n\r\n  function rewardPoolBalance() external view returns (uint256);\r\n\r\n  function buyBackRatio() external view returns (uint256);\r\n\r\n  function unsalvageableTokens(address token) external view returns (bool);\r\n\r\n  function vault() external view returns (address);\r\n\r\n  function investedUnderlyingBalance() external view returns (uint256);\r\n\r\n  function platform() external view returns (Platform);\r\n\r\n  function assets() external view returns (address[] memory);\r\n\r\n  function pausedInvesting() external view returns (bool);\r\n\r\n  function readyToClaim() external view returns (uint256[] memory);\r\n\r\n  function poolTotalAmount() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/base/interface/IController.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IController {\r\n\r\n  function addVaultsAndStrategies(address[] memory _vaults, address[] memory _strategies) external;\r\n\r\n  function addStrategy(address _strategy) external;\r\n\r\n  function governance() external view returns (address);\r\n\r\n  function dao() external view returns (address);\r\n\r\n  function bookkeeper() external view returns (address);\r\n\r\n  function feeRewardForwarder() external view returns (address);\r\n\r\n  function mintHelper() external view returns (address);\r\n\r\n  function rewardToken() external view returns (address);\r\n\r\n  function fundToken() external view returns (address);\r\n\r\n  function psVault() external view returns (address);\r\n\r\n  function fund() external view returns (address);\r\n\r\n  function distributor() external view returns (address);\r\n\r\n  function announcer() external view returns (address);\r\n\r\n  function vaultController() external view returns (address);\r\n\r\n  function whiteList(address _target) external view returns (bool);\r\n\r\n  function vaults(address _target) external view returns (bool);\r\n\r\n  function strategies(address _target) external view returns (bool);\r\n\r\n  function psNumerator() external view returns (uint256);\r\n\r\n  function psDenominator() external view returns (uint256);\r\n\r\n  function fundNumerator() external view returns (uint256);\r\n\r\n  function fundDenominator() external view returns (uint256);\r\n\r\n  function isAllowedUser(address _adr) external view returns (bool);\r\n\r\n  function isDao(address _adr) external view returns (bool);\r\n\r\n  function isHardWorker(address _adr) external view returns (bool);\r\n\r\n  function isRewardDistributor(address _adr) external view returns (bool);\r\n\r\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\r\n\r\n  function isValidVault(address _vault) external view returns (bool);\r\n\r\n  function isValidStrategy(address _strategy) external view returns (bool);\r\n\r\n  function rebalance(address _strategy) external;\r\n\r\n  // ************ DAO ACTIONS *************\r\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator) external;\r\n\r\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator) external;\r\n\r\n  function changeWhiteListStatus(address[] calldata _targets, bool status) external;\r\n}\r\n"
    },
    "contracts/base/interface/IBookkeeper.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IBookkeeper {\r\n\r\n  struct PpfsChange {\r\n    address vault;\r\n    uint256 block;\r\n    uint256 time;\r\n    uint256 value;\r\n    uint256 oldBlock;\r\n    uint256 oldTime;\r\n    uint256 oldValue;\r\n  }\r\n\r\n  struct HardWork {\r\n    address strategy;\r\n    uint256 block;\r\n    uint256 time;\r\n    uint256 targetTokenAmount;\r\n  }\r\n\r\n  function addVault(address _vault) external;\r\n\r\n  function addStrategy(address _strategy) external;\r\n\r\n  function registerStrategyEarned(uint256 _targetTokenAmount) external;\r\n\r\n  function registerFundKeeperEarned(address _token, uint256 _fundTokenAmount) external;\r\n\r\n  function registerUserAction(address _user, uint256 _amount, bool _deposit) external;\r\n\r\n  function registerVaultTransfer(address from, address to, uint256 amount) external;\r\n\r\n  function registerUserEarned(address _user, address _vault, address _rt, uint256 _amount) external;\r\n\r\n  function registerPpfsChange(address vault, uint256 value) external;\r\n\r\n  function registerRewardDistribution(address vault, address token, uint256 amount) external;\r\n\r\n  function vaults() external view returns (address[] memory);\r\n\r\n  function vaultsLength() external view returns (uint256);\r\n\r\n  function strategies() external view returns (address[] memory);\r\n\r\n  function strategiesLength() external view returns (uint256);\r\n\r\n  function lastPpfsChange(address vault) external view returns (PpfsChange memory);\r\n\r\n  /// @notice Return total earned TETU tokens for strategy\r\n  /// @dev Should be incremented after strategy rewards distribution\r\n  /// @param strategy Strategy address\r\n  /// @return Earned TETU tokens\r\n  function targetTokenEarned(address strategy) external view returns (uint256);\r\n\r\n  /// @notice Return share(xToken) balance of given user\r\n  /// @dev Should be calculated for each xToken transfer\r\n  /// @param vault Vault address\r\n  /// @param user User address\r\n  /// @return User share (xToken) balance\r\n  function vaultUsersBalances(address vault, address user) external view returns (uint256);\r\n\r\n  /// @notice Return earned token amount for given token and user\r\n  /// @dev Fills when user claim rewards\r\n  /// @param user User address\r\n  /// @param vault Vault address\r\n  /// @param token Token address\r\n  /// @return User's earned tokens amount\r\n  function userEarned(address user, address vault, address token) external view returns (uint256);\r\n\r\n  function lastHardWork(address vault) external view returns (HardWork memory);\r\n\r\n  /// @notice Return users quantity for given Vault\r\n  /// @dev Calculation based in Bookkeeper user balances\r\n  /// @param vault Vault address\r\n  /// @return Users quantity\r\n  function vaultUsersQuantity(address vault) external view returns (uint256);\r\n\r\n  function fundKeeperEarned(address vault) external view returns (uint256);\r\n\r\n  function vaultRewards(address vault, address token, uint256 idx) external view returns (uint256);\r\n\r\n  function vaultRewardsLength(address vault, address token) external view returns (uint256);\r\n\r\n  function strategyEarnedSnapshots(address strategy, uint256 idx) external view returns (uint256);\r\n\r\n  function strategyEarnedSnapshotsTime(address strategy, uint256 idx) external view returns (uint256);\r\n\r\n  function strategyEarnedSnapshotsLength(address strategy) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/base/interface/IVaultController.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IVaultController {\r\n\r\n  function rewardBoostDuration() external view returns (uint256);\r\n\r\n  function rewardRatioWithoutBoost() external view returns (uint256);\r\n\r\n}\r\n"
    },
    "contracts/openzeppelin/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint256 size;\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain `call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n   * revert reason using the provided one.\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) internal pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/openzeppelin/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the decimals places of the token.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/openzeppelin/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"./Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n  function __Context_init() internal initializer {\r\n    __Context_init_unchained();\r\n  }\r\n\r\n  function __Context_init_unchained() internal initializer {\r\n  }\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n  uint256[50] private __gap;\r\n}\r\n"
    },
    "contracts/openzeppelin/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private _initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private _initializing;\r\n\r\n  /**\r\n   * @dev Modifier to protect an initializer function from being invoked twice.\r\n   */\r\n  modifier initializer() {\r\n    require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n    bool isTopLevelCall = !_initializing;\r\n    if (isTopLevelCall) {\r\n      _initializing = true;\r\n      _initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      _initializing = false;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/base/interface/ISmartVault.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface ISmartVault {\r\n\r\n  function setStrategy(address _strategy) external;\r\n\r\n  function changeActivityStatus(bool _active) external;\r\n\r\n  function changeProtectionMode(bool _active) external;\r\n\r\n  function changePpfsDecreaseAllowed(bool _value) external;\r\n\r\n  function setLockPeriod(uint256 _value) external;\r\n\r\n  function setLockPenalty(uint256 _value) external;\r\n\r\n  function setToInvest(uint256 _value) external;\r\n\r\n  function doHardWork() external;\r\n\r\n  function rebalance() external;\r\n\r\n  function disableLock() external;\r\n\r\n  function notifyTargetRewardAmount(address _rewardToken, uint256 reward) external;\r\n\r\n  function notifyRewardWithoutPeriodChange(address _rewardToken, uint256 reward) external;\r\n\r\n  function deposit(uint256 amount) external;\r\n\r\n  function depositAndInvest(uint256 amount) external;\r\n\r\n  function depositFor(uint256 amount, address holder) external;\r\n\r\n  function withdraw(uint256 numberOfShares) external;\r\n\r\n  function exit() external;\r\n\r\n  function getAllRewards() external;\r\n\r\n  function getReward(address rt) external;\r\n\r\n  function underlying() external view returns (address);\r\n\r\n  function strategy() external view returns (address);\r\n\r\n  function getRewardTokenIndex(address rt) external view returns (uint256);\r\n\r\n  function getPricePerFullShare() external view returns (uint256);\r\n\r\n  function underlyingUnit() external view returns (uint256);\r\n\r\n  function duration() external view returns (uint256);\r\n\r\n  function underlyingBalanceInVault() external view returns (uint256);\r\n\r\n  function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n  function underlyingBalanceWithInvestmentForHolder(address holder) external view returns (uint256);\r\n\r\n  function availableToInvestOut() external view returns (uint256);\r\n\r\n  function earned(address rt, address account) external view returns (uint256);\r\n\r\n  function earnedWithBoost(address rt, address account) external view returns (uint256);\r\n\r\n  function rewardPerToken(address rt) external view returns (uint256);\r\n\r\n  function lastTimeRewardApplicable(address rt) external view returns (uint256);\r\n\r\n  function rewardTokensLength() external view returns (uint256);\r\n\r\n  function active() external view returns (bool);\r\n\r\n  function rewardTokens() external view returns (address[] memory);\r\n\r\n  function periodFinishForToken(address _rt) external view returns (uint256);\r\n\r\n  function rewardRateForToken(address _rt) external view returns (uint256);\r\n\r\n  function lastUpdateTimeForToken(address _rt) external view returns (uint256);\r\n\r\n  function rewardPerTokenStoredForToken(address _rt) external view returns (uint256);\r\n\r\n  function userRewardPerTokenPaidForToken(address _rt, address account) external view returns (uint256);\r\n\r\n  function rewardsForToken(address _rt, address account) external view returns (uint256);\r\n\r\n  function userLastWithdrawTs(address _user) external view returns (uint256);\r\n\r\n  function userLastDepositTs(address _user) external view returns (uint256);\r\n\r\n  function userBoostTs(address _user) external view returns (uint256);\r\n\r\n  function userLockTs(address _user) external view returns (uint256);\r\n\r\n  function addRewardToken(address rt) external;\r\n\r\n  function removeRewardToken(address rt) external;\r\n\r\n  function stop() external;\r\n\r\n  function ppfsDecreaseAllowed() external view returns (bool);\r\n\r\n  function lockPeriod() external view returns (uint256);\r\n\r\n  function lockPenalty() external view returns (uint256);\r\n\r\n  function toInvest() external view returns (uint256);\r\n\r\n  function depositFeeNumerator() external view returns (uint256);\r\n\r\n  function lockAllowed() external view returns (bool);\r\n\r\n  function protectionMode() external view returns (bool);\r\n}\r\n"
    },
    "contracts/base/interface/IControllable.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IControllable {\r\n\r\n  function isController(address _contract) external view returns (bool);\r\n\r\n  function isGovernance(address _contract) external view returns (bool);\r\n\r\n}\r\n"
    },
    "contracts/base/interface/IControllableExtended.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\n/// @dev This interface contains additional functions for Controllable class\r\n///      Don't extend the exist Controllable for the reason of huge coherence\r\ninterface IControllableExtended {\r\n\r\n  function created() external view returns (uint256 ts);\r\n\r\n  function controller() external view returns (address adr);\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 150
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {
      "contracts/base/vault/VaultLibrary.sol": {
        "VaultLibrary": "0x947bb6f9a09e3a30d92b8d22d62362bbdac453c0"
      }
    }
  }
}}