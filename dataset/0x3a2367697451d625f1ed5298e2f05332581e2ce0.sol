{{
  "language": "Solidity",
  "sources": {
    "contracts/contract/skin_shop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../interface/ISkin.sol\";\nimport \"../interface/ICattle1155.sol\";\ncontract SkinShop is OwnableUpgradeable {\n    ISkin public skin;\n    uint[] list;\n    IERC20 public BVT;\n    IERC20 public U;\n    address public pair;\n\n    struct SkinInfo {\n        uint price;\n        bool onSale;\n        uint totalBuy;\n        uint limit;\n    }\n\n    mapping(uint => uint) index;\n    mapping(uint => SkinInfo)public skinInfo;\n    ICattle1155 public item;\n    uint randomSeed;\n    mapping(address => mapping(uint => bool)) public userBought;\n    event skinReward(address indexed sender, uint indexed reward);\n\n    function initialize() public initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        newSkinInfo(10005, 625 ether, true, 1000);\n        newSkinInfo(10006, 625 ether, true, 1000);\n        newSkinInfo(10007, 935 ether, true, 1000);\n        newSkinInfo(10008, 935 ether, true, 1000);\n        newSkinInfo(10009, 1250 ether, true, 1000);\n    }\n    function rand(uint256 _length) internal returns (uint256) {\n        uint256 random = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, randomSeed)));\n        randomSeed ++;\n        return random % _length + 1;\n    }\n    function setSkin(address addr) external onlyOwner {\n        skin = ISkin(addr);\n    }\n\n    function setToken(address BVT_, address U_) external onlyOwner {\n        BVT = IERC20(BVT_);\n        U = IERC20(U_);\n    }\n\n    function setPair(address addr) external onlyOwner {\n        pair = addr;\n    }\n\n    function getBVTPrice() public view returns (uint){\n        if (pair == address(0)) {\n            return 1 ether;\n        }\n        uint balance1 = BVT.balanceOf(pair);\n        uint balance2 = U.balanceOf(pair);\n        return (balance2 * 1e18 / balance1);\n    }\n\n    function newSkinInfo(uint skinId, uint price, bool onSale, uint limit) public onlyOwner {\n        require(skinInfo[skinId].price == 0, 'already on sale');\n        skinInfo[skinId].price = price;\n        skinInfo[skinId].onSale = onSale;\n        skinInfo[skinId].limit = limit;\n        index[skinId] = list.length;\n        list.push(skinId);\n    }\n\n    function editSkinInfo(uint skinId, uint price, bool onSale, uint limit) external onlyOwner {\n        require(skinInfo[skinId].price != 0, 'not on sale');\n        skinInfo[skinId].price = price;\n        skinInfo[skinId].onSale = onSale;\n        skinInfo[skinId].limit = limit;\n    }\n\n    function setOnSale(uint skinId, bool onSale) external onlyOwner {\n        require(skinInfo[skinId].price != 0, 'not on sale');\n        skinInfo[skinId].onSale = onSale;\n    }\n\n    function setSkinPrice(uint[] memory skinID,uint[] memory prices) external onlyOwner{\n        for (uint i = 0; i < skinID.length; i ++) {\n            skinInfo[skinID[i]].price = prices[i];\n        }\n    }\n\n    function changeLimit(uint skinId, uint limit) external onlyOwner {\n        require(skinInfo[skinId].price != 0, 'not on sale');\n        skinInfo[skinId].limit = limit;\n    }\n\n    function setItem(address addr) external onlyOwner {\n        item = ICattle1155(addr);\n    }\n\n    function checkOnSaleList() public view returns (uint[] memory out){\n        uint amount;\n        for (uint i = 0; i < list.length; i ++) {\n            if (skinInfo[list[i]].onSale) {\n                amount++;\n            }\n        }\n        out = new uint[](amount);\n        for (uint i = 0; i < list.length; i ++) {\n            if (skinInfo[list[i]].onSale) {\n                amount--;\n                out[amount] = list[i];\n            }\n        }\n    }\n\n    function checkSkinList() public view returns (uint[] memory, uint[] memory){\n        return (checkOnSaleList(), checkOnSalePrice());\n    }\n\n    function checkOnSalePrice() public view returns (uint[] memory out){\n        uint[] memory _list = checkOnSaleList();\n        out = new uint[](_list.length);\n        for (uint i = 0; i < _list.length; i ++) {\n            out[i] = skinInfo[_list[i]].price;\n        }\n    }\n\n    function checkUserBought(address addr) public view returns(uint[] memory,bool[] memory){\n        uint[] memory _list = checkOnSaleList();\n        bool[] memory out = new bool[](_list.length);\n        for(uint i = 0; i < _list.length; i++){\n            out[i] = userBought[addr][_list[i]];\n        }\n        return(_list,out);\n    }\n\n    function coutingCost(uint skinId) public view returns (uint){\n        uint price = skinInfo[skinId].price;\n        return (price * 1e18 / getBVTPrice());\n    }\n\n    function buySkin(uint skinId, uint payWith) external {// 1 for usdt 2 for bvt\n        require(skinInfo[skinId].price != 0, 'not on Sale');\n        require(skinInfo[skinId].onSale, 'not on sale');\n        require(skinInfo[skinId].limit > skinInfo[skinId].totalBuy, 'out of limit');\n        require(payWith == 1 || payWith == 2, 'wrong pay');\n        require(!userBought[msg.sender][skinId],'skin bought');\n        uint price = skinInfo[skinId].price;\n        payWith = 0;\n        if (payWith == 1) {\n            U.transferFrom(msg.sender, address(this), price);\n        } else {\n            BVT.transferFrom(msg.sender, address(this), coutingCost(skinId));\n        }\n        userBought[msg.sender][skinId] = true;\n        skin.mint(msg.sender, skinId);\n    }\n\n    function checkSkinLevel(uint id) public view returns (uint) {\n        (,,uint out,) = skin.skinInfo(skin.skinIdMap(id));\n        return out;\n    }\n\n    function checkSkinLevelBatch(uint[] memory id) public view returns (uint[] memory) {\n        uint[] memory lists = new uint[](id.length);\n        for (uint i = 0; i < id.length; i++) {\n            lists[i] = checkSkinLevel(id[i]);\n        }\n        return lists;\n\n    }\n\n    function checkRate(uint[] memory ids) public view returns (uint){\n        uint[] memory out = checkSkinLevelBatch(ids);\n        uint rates;\n        for (uint i = 0; i < ids.length; i++) {\n            if (out[i] == 1) {\n                rates += 8;\n            } else if (out[i] == 2) {\n                rates += 14;\n            } else {\n                rates += 22;\n            }\n        }\n        return rates;\n    }\n\n    function compoundSkin(uint[] memory skins) external {\n        uint rates;\n        for (uint i = 0; i < skins.length; i++) {\n            uint level = checkSkinLevel(skins[i]);\n            skin.burn(skins[i]);\n            if (level == 1) {\n                rates += 8;\n            } else if (level == 2) {\n                rates += 14;\n            } else {\n                rates += 22;\n\n            }\n        }\n        uint random = rand(100);\n        if (random >= rates) {\n            uint out = rand(100);\n            if (out >= 90) {\n                skin.mint(msg.sender, 10009);\n                emit skinReward(msg.sender, 10009);\n            } else if (out >= 60) {\n                if (block.timestamp % 2 == 1) {\n                    skin.mint(msg.sender, 10008);\n                    emit skinReward(msg.sender, 10008);\n                } else {\n                    skin.mint(msg.sender, 10007);\n                    emit skinReward(msg.sender, 10007);\n                }\n\n            } else {\n                if (block.timestamp % 2 == 1) {\n                    skin.mint(msg.sender, 10006);\n                    emit skinReward(msg.sender, 10006);\n                } else {\n                    skin.mint(msg.sender, 10005);\n                    emit skinReward(msg.sender, 10005);\n                }\n            }\n        } else {\n            skin.mint(msg.sender, 10010);\n            emit skinReward(msg.sender, 10010);\n        }\n    }\n\n    function compoundSuperSkin(uint[] memory skins) external {\n        require(skins.length == 3, 'wrong skin amount');\n        require(skin.skinIdMap(skins[0]) == skin.skinIdMap(skins[1]) && skin.skinIdMap(skins[1]) == skin.skinIdMap(skins[2]), 'wrong skin ID');\n        require(skin.skinIdMap(skins[0]) >= 10010 && skin.skinIdMap(skins[0]) < 10013, 'wrong skin');\n        for (uint i = 0; i < skins.length; i++){\n            skin.burn(skins[i]);\n        }\n        skin.mint(msg.sender,skin.skinIdMap(skins[0]) + 1);\n        emit skinReward(msg.sender, skin.skinIdMap(skins[0]) + 1);\n    }\n\n    function openSkinBox(uint amount) external {\n        item.burn(msg.sender, 20003, amount);\n        uint out = rand(100);\n        for (uint i = 0; i < amount; i ++) {\n            if (out >= 90) {\n                emit skinReward(msg.sender, 10009);\n            } else if (out >= 60) {\n                if (block.timestamp % 2 == 1) {\n                    skin.mint(msg.sender, 10008);\n                    emit skinReward(msg.sender, 10008);\n                } else {\n                    skin.mint(msg.sender, 10007);\n                    emit skinReward(msg.sender, 10007);\n                }\n\n            } else {\n                if (block.timestamp % 2 == 1) {\n                    skin.mint(msg.sender, 10006);\n                    emit skinReward(msg.sender, 10006);\n                } else {\n                    skin.mint(msg.sender, 10005);\n                    emit skinReward(msg.sender, 10005);\n                }\n            }\n        }\n    }\n\n\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interface/ISkin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.4;\n\ninterface ISkin{\n    function mint(address player,uint skinId) external;\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    function skinInfo(uint tokenID) external view returns(string memory,uint,uint,string memory);\n    function burn(uint tokenId_) external returns (bool);\n    function checkUserSkinIDList(address player) external view returns (uint[] memory);\n    function checkUserSkinList(address player) external view returns (uint[] memory);\n    function skinIdMap(uint tokenID) external view returns (uint);\n    function checkSkinEffect(uint skinID) external view returns(uint[] memory);\n}"
    },
    "contracts/interface/ICattle1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface ICattle1155 {\n    function mintBatch(address to_, uint256[] memory ids_, uint256[] memory amounts_) external returns (bool);\n\n    function mint(address to_, uint cardId_, uint amount_) external returns (bool);\n\n    function safeTransferFrom(address from, address to, uint256 cardId, uint256 amount, bytes memory data_) external;\n\n    function safeBatchTransferFrom(address from_, address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) external;\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    function balanceOf(address account, uint256 tokenId) external view returns (uint);\n\n    function burned(uint) external view returns (uint);\n\n    function burn(address account, uint256 id, uint256 value) external;\n\n    function checkItemEffect(uint id_) external view returns (uint[3] memory);\n    \n    function itemLevel(uint id_) external view returns (uint);\n    \n    function itemExp(uint id_) external view returns(uint);\n    \n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}