{{
  "language": "Solidity",
  "sources": {
    "contracts/StakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./libraries/NativeMetaTransaction.sol\";\nimport \"./libraries/ContextMixin.sol\";\nimport \"./polydex/interfaces/IPolydexPair.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ninterface IRewardManager {\n    function handleRewardsForUser(\n        address user,\n        uint256 rewardAmount,\n        uint256 timestamp,\n        uint256 pid,\n        uint256 rewardDebt\n    ) external;\n}\n\ncontract StakingPool is\n    Ownable,\n    ContextMixin,\n    NativeMetaTransaction,\n    ReentrancyGuard\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /// @notice information stuct on each user than stakes LP tokens.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 nextHarvestUntil; // When can the user harvest again.\n        mapping(IERC20 => uint256) rewardDebt; // Reward debt.\n        mapping(IERC20 => uint256) rewardLockedUp; // Reward locked up.\n        mapping(address => bool) whiteListedHandlers;\n    }\n\n    // Info of each pool.\n    struct RewardInfo {\n        uint256 accRewardPerShare;\n        uint256 lastRewardBlock; // Last block number that rewards distribution occurs.\n        uint256 blockReward;\n        IERC20 rewardToken; // Address of reward token contract.\n    }\n\n    /// @notice all the settings for this farm in one struct\n    struct FarmInfo {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 numFarmers;\n        uint256 harvestInterval; // Harvest interval in seconds\n        IERC20 inputToken;\n        uint16 withdrawalFeeBP; // Deposit fee in basis points\n        uint16 depositFeeBP; // Deposit fee in basis points\n    }\n\n    // Deposit Fee address\n    address public feeAddress;\n    // Max harvest interval: 14 days.\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\n\n    // Max deposit fee: 10%. This number is later divided by 10000 for calculations.\n    uint16 public constant MAXIMUM_WITHDRAWAL_FEE_BP = 1000;\n\n    uint256 public totalInputTokensStaked = 0;\n\n    // Total locked up rewards\n    mapping(IERC20 => uint256) public totalLockedUpRewards;\n\n    FarmInfo public farmInfo;\n\n    mapping(address => bool) public activeRewardTokens;\n\n    /// @notice information on each user than stakes LP tokens\n    mapping(address => UserInfo) public userInfo;\n\n    RewardInfo[] public rewardPool;\n\n    bool public isInitiated;\n\n    //Trigger for RewardManager mode\n    bool public isRewardManagerEnabled;\n\n    address public rewardManager;\n\n    IERC20 public CNT;\n\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event RewardLockedUp(address indexed user, uint256 amountLockedUp);\n    event RewardTokenAdded(IERC20 _rewardToken);\n    event UserWhitelisted(address _primaryUser, address _whitelistedUser);\n    event UserBlacklisted(address _primaryUser, address _blacklistedUser);\n    event BlockRewardUpdated(uint256 _blockReward, uint256 _rewardPoolIndex);\n\n    constructor(address _feeAddress, IERC20 _CNT) {\n        _initializeEIP712(\"StakingPool\");\n        feeAddress = _feeAddress;\n        isRewardManagerEnabled = false;\n        rewardManager = address(0);\n        CNT = _CNT;\n    }\n\n    function _msgSender()\n        internal\n        view\n        override\n        returns (address payable sender)\n    {\n        return ContextMixin.msgSender();\n    }\n\n    function updateRewardManagerMode(bool _isRewardManagerEnabled)\n        external\n        onlyOwner\n    {\n        massUpdatePools();\n        isRewardManagerEnabled = _isRewardManagerEnabled;\n    }\n\n    function updateRewardManager(address _rewardManager) external onlyOwner {\n        require(_rewardManager != address(0), \"Reward Manager address is zero\");\n        massUpdatePools();\n        rewardManager = _rewardManager;\n    }\n\n    /**\n     * @notice initialize the farming contract.\n     * This is called only once upon farm creation and the FarmGenerator ensures the farm has the correct paramaters\n     */\n    function init(\n        IERC20 _rewardToken,\n        uint256 _amount,\n        IERC20 _inputToken,\n        uint256 _blockReward,\n        uint256 _startBlock,\n        uint256 _endBlock,\n        uint16 _withdrawalFeeBP,\n        uint16 _depositFeeBP,\n        uint256 _harvestInterval\n    ) external onlyOwner {\n        require(!isInitiated, \"Staking pool is already initiated\");\n\n        require(\n            _withdrawalFeeBP <= MAXIMUM_WITHDRAWAL_FEE_BP,\n            \"add: invalid deposit fee basis points\"\n        );\n        require(\n            _depositFeeBP <= MAXIMUM_WITHDRAWAL_FEE_BP,\n            \"add: invalid deposit fee basis points\"\n        );\n        require(\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\n            \"add: invalid harvest interval\"\n        );\n\n        isInitiated = true;\n\n        TransferHelper.safeTransferFrom(\n            address(_rewardToken),\n            _msgSender(),\n            address(this),\n            _amount\n        );\n\n        farmInfo.startBlock = _startBlock;\n\n        uint256 lastRewardBlock = block.number > _startBlock\n            ? block.number\n            : _startBlock;\n        farmInfo.inputToken = _inputToken;\n\n        farmInfo.endBlock = _endBlock;\n\n        rewardPool.push(\n            RewardInfo({\n                rewardToken: _rewardToken,\n                lastRewardBlock: lastRewardBlock,\n                blockReward: _blockReward,\n                accRewardPerShare: 0\n            })\n        );\n\n        farmInfo.withdrawalFeeBP = _withdrawalFeeBP;\n        farmInfo.depositFeeBP = _depositFeeBP;\n        farmInfo.harvestInterval = _harvestInterval;\n\n        activeRewardTokens[address(_rewardToken)] = true;\n    }\n\n    /**\n     * @notice Gets the reward multiplier over the given _from_block until _to block\n     * @param _fromBlock the start of the period to measure rewards for\n     * @param _to the end of the period to measure rewards for\n     * @return The weighted multiplier for the given period\n     */\n    function getMultiplier(uint256 _fromBlock, uint256 _to)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _from = _fromBlock >= farmInfo.startBlock\n            ? _fromBlock\n            : farmInfo.startBlock;\n        uint256 to = farmInfo.endBlock > _to ? _to : farmInfo.endBlock;\n        if (_from > to) {\n            return 0;\n        }\n\n        return to.sub(_from, \"from getMultiplier\");\n    }\n\n    function addRewardToken(\n        IERC20 _rewardToken, // Address of reward token contract.\n        uint256 _lastRewardBlock,\n        uint256 _blockReward,\n        uint256 _amount\n    ) external onlyOwner nonReentrant {\n        require(address(_rewardToken) != address(0), \"Invalid reward token\");\n        require(\n            activeRewardTokens[address(_rewardToken)] == false,\n            \"Reward Token already added\"\n        );\n\n        require(\n            _lastRewardBlock >= block.number,\n            \"Last reward block must be greater current block number\"\n        );\n\n        rewardPool.push(\n            RewardInfo({\n                rewardToken: _rewardToken,\n                lastRewardBlock: _lastRewardBlock,\n                blockReward: _blockReward,\n                accRewardPerShare: 0\n            })\n        );\n\n        activeRewardTokens[address(_rewardToken)] = true;\n\n        TransferHelper.safeTransferFrom(\n            address(_rewardToken),\n            msg.sender,\n            address(this),\n            _amount\n        );\n\n        emit RewardTokenAdded(_rewardToken);\n    }\n\n    /**\n     * @notice function to see accumulated balance of reward token for specified user\n     * @param _user the user for whom unclaimed tokens will be shown\n     * @return total amount of withdrawable reward tokens\n     */\n    function pendingReward(address _user, uint256 _rewardInfoIndex)\n        external\n        view\n        returns (uint256)\n    {\n        UserInfo storage user = userInfo[_user];\n        RewardInfo memory rewardInfo = rewardPool[_rewardInfoIndex];\n        uint256 accRewardPerShare = rewardInfo.accRewardPerShare;\n        uint256 lpSupply = totalInputTokensStaked;\n\n        if (block.number > rewardInfo.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(\n                rewardInfo.lastRewardBlock,\n                block.number\n            );\n            uint256 tokenReward = multiplier.mul(rewardInfo.blockReward);\n            accRewardPerShare = accRewardPerShare.add(\n                tokenReward.mul(1e12).div(lpSupply)\n            );\n        }\n\n        uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(\n            user.rewardDebt[rewardInfo.rewardToken]\n        );\n        return pending.add(user.rewardLockedUp[rewardInfo.rewardToken]);\n    }\n\n    // View function to see if user can harvest cnt's.\n    function canHarvest(address _user) public view returns (bool) {\n        UserInfo storage user = userInfo[_user];\n        return block.timestamp >= user.nextHarvestUntil;\n    }\n\n    // View function to see if user harvest until time.\n    function getHarvestUntil(address _user) external view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        return user.nextHarvestUntil;\n    }\n\n    /**\n     * @notice updates pool information to be up to date to the current block\n     */\n    function updatePool(uint256 _rewardInfoIndex) public {\n        RewardInfo storage rewardInfo = rewardPool[_rewardInfoIndex];\n        if (block.number <= rewardInfo.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = totalInputTokensStaked;\n    \n        if (lpSupply == 0) {\n            rewardInfo.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(\n            rewardInfo.lastRewardBlock,\n            block.number\n        );\n        uint256 tokenReward = multiplier.mul(rewardInfo.blockReward);\n        rewardInfo.accRewardPerShare = rewardInfo.accRewardPerShare.add(\n            tokenReward.mul(1e12).div(lpSupply)\n        );\n        rewardInfo.lastRewardBlock = block.number < farmInfo.endBlock\n            ? block.number\n            : farmInfo.endBlock;\n    }\n\n    function massUpdatePools() public{\n        for (uint256 i = 0; i < rewardPool.length; i++) {\n            updatePool(i);\n        }\n    }\n\n    /**\n     * @notice deposit LP token function for _msgSender()\n     * @param _amount the total deposit amount\n     */\n\n    function depositWithPermit(\n        uint256 _amount,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external nonReentrant {\n        uint256 value = uint256(-1);\n        IPolydexPair(address(farmInfo.inputToken)).permit(\n            _msgSender(),\n            address(this),\n            value,\n            _deadline,\n            _v,\n            _r,\n            _s\n        );\n        _deposit(_amount, _msgSender());\n    }\n\n    function depositForWithPermit(\n        uint256 _amount,\n        address _user,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external nonReentrant {\n        uint256 value = uint256(-1);\n        IPolydexPair(address(farmInfo.inputToken)).permit(\n            _msgSender(),\n            address(this),\n            value,\n            _deadline,\n            _v,\n            _r,\n            _s\n        );\n        _deposit(_amount, _user);\n    }\n\n    function deposit(uint256 _amount) external nonReentrant {\n        _deposit(_amount, _msgSender());\n    }\n\n    function depositFor(uint256 _amount, address _user) external nonReentrant {\n        _deposit(_amount, _user);\n    }\n\n    function _deposit(uint256 _amount, address _user) internal {\n        UserInfo storage user = userInfo[_user];\n        user.whiteListedHandlers[_user] = true;\n        payOrLockupPendingReward(_user, _user);\n        if (user.amount == 0 && _amount > 0) {\n            farmInfo.numFarmers++;\n        }\n        if (_amount > 0) {\n            farmInfo.inputToken.safeTransferFrom(\n                address(_msgSender()),\n                address(this),\n                _amount\n            );\n            if (farmInfo.depositFeeBP > 0) {\n                uint256 depositFee = _amount\n                .mul(farmInfo.depositFeeBP)\n                .div(10000);\n                farmInfo.inputToken.safeTransfer(feeAddress, depositFee);\n                user.amount = user.amount.add(_amount.sub(depositFee));\n            } else {\n                user.amount = user.amount.add(_amount);\n            }\n            \n        }\n        totalInputTokensStaked = totalInputTokensStaked.add(_amount);\n        updateRewardDebt(_user);\n        emit Deposit(_user, _amount);\n    }\n\n    /**\n     * @notice withdraw LP token function for _msgSender()\n     * @param _amount the total withdrawable amount\n     */\n    function withdraw(uint256 _amount) external nonReentrant {\n        _withdraw(_amount, _msgSender(), _msgSender());\n    }\n\n    function withdrawFor(uint256 _amount, address _user) external nonReentrant {\n        UserInfo storage user = userInfo[_user];\n        require(\n            user.whiteListedHandlers[_msgSender()],\n            \"Handler not whitelisted to withdraw\"\n        );\n        _withdraw(_amount, _user, _msgSender());\n    }\n\n    function _withdraw(\n        uint256 _amount,\n        address _user,\n        address _withdrawer\n    ) internal {\n        UserInfo storage user = userInfo[_user];\n        require(user.amount >= _amount, \"INSUFFICIENT\");\n        payOrLockupPendingReward(_user, _withdrawer);\n        if (user.amount == _amount && _amount > 0) {\n            farmInfo.numFarmers--;\n        }\n\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            if (farmInfo.withdrawalFeeBP > 0) {\n                uint256 withdrawalFee = _amount\n                    .mul(farmInfo.withdrawalFeeBP)\n                    .div(10000);\n                farmInfo.inputToken.safeTransfer(feeAddress, withdrawalFee);\n                farmInfo.inputToken.safeTransfer(\n                    address(_withdrawer),\n                    _amount.sub(withdrawalFee)\n                );\n            } else {\n                farmInfo.inputToken.safeTransfer(address(_withdrawer), _amount);\n            }\n        }\n        totalInputTokensStaked = totalInputTokensStaked.sub(_amount);\n        updateRewardDebt(_user);\n        emit Withdraw(_user, _amount);\n    }\n\n    /**\n     * @notice emergency function to withdraw LP tokens and forego harvest rewards. Important to protect users LP tokens\n     */\n    function emergencyWithdraw() external nonReentrant {\n        UserInfo storage user = userInfo[_msgSender()];\n        farmInfo.inputToken.safeTransfer(address(_msgSender()), user.amount);\n        emit EmergencyWithdraw(_msgSender(), user.amount);\n        if (user.amount > 0) {\n            farmInfo.numFarmers--;\n        }\n        totalInputTokensStaked = totalInputTokensStaked.sub(user.amount);\n        user.amount = 0;\n\n        for (uint256 i = 0; i < rewardPool.length; i++) {\n            user.rewardDebt[rewardPool[i].rewardToken] = 0;\n        }\n    }\n\n    function whitelistHandler(address _handler) external {\n        UserInfo storage user = userInfo[_msgSender()];\n        user.whiteListedHandlers[_handler] = true;\n        emit UserWhitelisted(_msgSender(), _handler);\n    }\n\n    function removeWhitelistedHandler(address _handler) external {\n        UserInfo storage user = userInfo[_msgSender()];\n        user.whiteListedHandlers[_handler] = false;\n        emit UserBlacklisted(_msgSender(), _handler);\n    }\n\n    function isUserWhiteListed(address _owner, address _user)\n        external\n        view\n        returns (bool)\n    {\n        UserInfo storage user = userInfo[_owner];\n        return user.whiteListedHandlers[_user];\n    }\n\n    function payOrLockupPendingReward(address _user, address _withdrawer)\n        internal\n    {\n        UserInfo storage user = userInfo[_user];\n        if (user.nextHarvestUntil == 0) {\n            user.nextHarvestUntil = block.timestamp.add(\n                farmInfo.harvestInterval\n            );\n        }\n\n        bool canUserHarvest = canHarvest(_user);\n\n        for (uint256 i = 0; i < rewardPool.length; i++) {\n            RewardInfo storage rewardInfo = rewardPool[i];\n\n            updatePool(i);\n\n            uint256 userRewardDebt = user.rewardDebt[rewardInfo.rewardToken];\n            uint256 userRewardLockedUp = user.rewardLockedUp[\n                rewardInfo.rewardToken\n            ];\n            uint256 pending = user\n                .amount\n                .mul(rewardInfo.accRewardPerShare)\n                .div(1e12)\n                .sub(userRewardDebt);\n            if (canUserHarvest) {\n                if (pending > 0 || userRewardLockedUp > 0) {\n                    uint256 totalRewards = pending.add(userRewardLockedUp);\n                    // reset lockup\n                    totalLockedUpRewards[\n                        rewardInfo.rewardToken\n                    ] = totalLockedUpRewards[rewardInfo.rewardToken].sub(\n                        userRewardLockedUp\n                    );\n                    user.rewardLockedUp[rewardInfo.rewardToken] = 0;\n                    user.nextHarvestUntil = block.timestamp.add(\n                        farmInfo.harvestInterval\n                    );\n                    if (\n                        isRewardManagerEnabled == true &&\n                        address(rewardInfo.rewardToken) == address(CNT)\n                    ) {\n                        _safeRewardTransfer(\n                            rewardManager,\n                            totalRewards,\n                            rewardInfo.rewardToken\n                        );\n                        IRewardManager(rewardManager).handleRewardsForUser(\n                            _withdrawer,\n                            totalRewards,\n                            block.timestamp,\n                            0,\n                            user.rewardDebt[rewardInfo.rewardToken]\n                        );\n                    } else {\n                        // send rewards\n                        _safeRewardTransfer(\n                            _withdrawer,\n                            totalRewards,\n                            rewardInfo.rewardToken\n                        );\n                    }\n                }\n            } else if (pending > 0) {\n                user.rewardLockedUp[rewardInfo.rewardToken] = user\n                    .rewardLockedUp[rewardInfo.rewardToken]\n                    .add(pending);\n                totalLockedUpRewards[\n                    rewardInfo.rewardToken\n                ] = totalLockedUpRewards[rewardInfo.rewardToken].add(pending);\n                emit RewardLockedUp(_user, pending);\n            }\n        }\n    }\n\n    function updateRewardDebt(address _user) internal {\n        UserInfo storage user = userInfo[_user];\n        for (uint256 i = 0; i < rewardPool.length; i++) {\n            RewardInfo storage rewardInfo = rewardPool[i];\n\n            user.rewardDebt[rewardInfo.rewardToken] = user\n                .amount\n                .mul(rewardInfo.accRewardPerShare)\n                .div(1e12);\n        }\n    }\n\n    // Update fee address by the previous fee address.\n    function setFeeAddress(address _feeAddress) external onlyOwner {\n        require(_feeAddress != address(0), \"setFeeAddress: invalid address\");\n        feeAddress = _feeAddress;\n    }\n\n    function changeDepositFee(uint16 _depositFeeBP) external onlyOwner {\n        require(\n            _depositFeeBP <= MAXIMUM_WITHDRAWAL_FEE_BP,\n            \"add: invalid deposit fee basis points\"\n        );\n        farmInfo.depositFeeBP = _depositFeeBP;\n    }\n\n    function changeFarmHarvestInterval(uint256 _harvestInterval) external onlyOwner {\n        require(\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\n            \"add: invalid harvest interval\"\n        );\n        massUpdatePools();\n        farmInfo.harvestInterval = _harvestInterval;\n    }\n\n    // Function to update the end block for owner. To control the distribution duration.\n    function updateEndBlock(uint256 _endBlock) external onlyOwner {\n        farmInfo.endBlock = _endBlock;\n    }\n\n    function updateBlockReward(uint256 _blockReward, uint256 _rewardTokenIndex)\n        external\n        onlyOwner\n    {\n        updatePool(_rewardTokenIndex);\n        rewardPool[_rewardTokenIndex].blockReward = _blockReward;\n        emit BlockRewardUpdated(_blockReward, _rewardTokenIndex);\n    }\n\n    function transferRewardToken(uint256 _rewardTokenIndex, uint256 _amount)\n        external\n        onlyOwner\n    {\n        RewardInfo storage rewardInfo = rewardPool[_rewardTokenIndex];\n\n        rewardInfo.rewardToken.transfer(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Safe reward transfer function, just in case a rounding error causes pool to not have enough reward tokens\n     * @param _amount the total amount of tokens to transfer\n     * @param _rewardToken token address for transferring tokens\n     */\n    function _safeRewardTransfer(\n        address _to,\n        uint256 _amount,\n        IERC20 _rewardToken\n    ) private {\n        _rewardToken.transfer(_to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "pragma solidity ^0.7.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/libraries/NativeMetaTransaction.sol": {
      "content": "pragma solidity >= 0.6.6;\n\nimport './EIP712Base.sol';\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract NativeMetaTransaction is EIP712Base {\n    using SafeMath for uint;\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\n        bytes(\n            \"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\n        )\n    );\n    event MetaTransactionExecuted(\n        address userAddress,\n        address payable relayerAddress,\n        bytes functionSignature\n    );\n    mapping(address => uint256) nonces;\n\n    /*\n     * Meta transaction structure.\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\n     * He should call the desired function directly in that case.\n     */\n    struct MetaTransaction {\n        uint256 nonce;\n        address from;\n        bytes functionSignature;\n    }\n\n    function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            msg.sender,\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }\n\n    function hashMetaTransaction(MetaTransaction memory metaTx)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    META_TRANSACTION_TYPEHASH,\n                    metaTx.nonce,\n                    metaTx.from,\n                    keccak256(metaTx.functionSignature)\n                )\n            );\n    }\n\n    function getNonce(address user) public view returns (uint256 nonce) {\n        nonce = nonces[user];\n    }\n\n    function verify(\n        address signer,\n        MetaTransaction memory metaTx,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) internal view returns (bool) {\n        require(signer != address(0), \"NativeMetaTransaction: INVALID_SIGNER\");\n        return\n            signer ==\n            ecrecover(\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\n                sigV,\n                sigR,\n                sigS\n            );\n    }\n\n}"
    },
    "contracts/libraries/ContextMixin.sol": {
      "content": "pragma solidity >= 0.6.6;\n\nabstract contract ContextMixin {\n    function msgSender() internal view returns (address payable sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}"
    },
    "contracts/polydex/interfaces/IPolydexPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\ninterface IPolydexPair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/libraries/EIP712Base.sol": {
      "content": "pragma solidity >= 0.6.6;\n\nimport './Initializable.sol';\n\ncontract EIP712Base is Initializable {\n    struct EIP712Domain {\n        string name;\n        string version;\n        address verifyingContract;\n        uint256 chainId;\n    }\n\n    string constant public ERC712_VERSION = \"1\";\n\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\n        bytes(\n            \"EIP712Domain(string name,string version,address verifyingContract,uint256 chainId)\"\n        )\n    );\n    bytes32 internal domainSeperator;\n\n    // supposed to be called once while initializing.\n    // one of the contractsa that inherits this contract follows proxy pattern\n    // so it is not possible to do this in a constructor\n    function _initializeEIP712(\n        string memory name\n    )\n        internal\n        initializer\n    {\n        _setDomainSeperator(name);\n    }\n\n    function _setDomainSeperator(string memory name) internal {\n        domainSeperator = keccak256(\n            abi.encode(\n                EIP712_DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                keccak256(bytes(ERC712_VERSION)),\n                address(this),\n                getChainId()\n            )\n        );\n    }\n\n    function getDomainSeperator() public view returns (bytes32) {\n        return domainSeperator;\n    }\n\n    function getChainId() public pure returns (uint256) {\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    /**\n     * Accept message hash and returns hash message in EIP712 compatible form\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\n     * https://eips.ethereum.org/EIPS/eip-712\n     * \"\\\\x19\" makes the encoding deterministic\n     * \"\\\\x01\" is the version byte to make it compatible to EIP-191\n     */\n    function toTypedMessageHash(bytes32 messageHash)\n        internal\n        view\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\n            );\n    }\n}"
    },
    "contracts/libraries/Initializable.sol": {
      "content": "pragma solidity >= 0.6.6;\n\ncontract Initializable {\n    bool inited = false;\n\n    modifier initializer() {\n        require(!inited, \"already inited\");\n        _;\n        inited = true;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}