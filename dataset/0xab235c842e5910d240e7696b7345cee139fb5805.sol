{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "berlin",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/GenericContestSelector.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./external/chainlink/VRFConsumerBase.sol\";\r\nimport \"./external/openzeppelin/EnumerableSet.sol\";\r\nimport \"./abstract/Ownable.sol\";\r\nimport \"./libraries/SafeERC20.sol\";\r\n\r\ncontract GenericContestSelector is Ownable, VRFConsumerBase {\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    // Modifiers\r\n\r\n    /// @dev Verify if contest for given id exists\r\n    modifier contestExists(uint256 contestId) {\r\n        require(contests.length >= contestId, \"Contest doesn't exist\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Verify if contest is completed\r\n    modifier contestPerformed(uint contestId) {\r\n        require(!contests[contestId - 1].contestWinnersSelected, \"Contest selection performed\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Triggered after winners were selected\r\n    event ContestWinnerSelected(uint256 contestId, uint256 timestamp, uint256 contestWinner);\r\n    /// @notice Triggered when random number for contest was set\r\n    event SetRandomNumberForContest(uint256 indexed contestId);\r\n    /// @notice Triggered after new contest was added\r\n    event AddedNewContest(uint256 contestId);\r\n\r\n    // Chainlink + Randomness\r\n\r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n\r\n    /// @dev Array of all contests\r\n    Contest[] public contests;\r\n\r\n    /// @dev Key: contest.id, Value: winners in contest\r\n    mapping(uint256 => EnumerableSet.UintSet) private contestWinners;\r\n    /// @dev Key: contest.id, Value: steps completed in contest\r\n    mapping(uint256 => EnumerableSet.UintSet) internal stepsBeforeContestSelection;\r\n    /// @dev Key: Chainlink oracle request id, Value: contest.id\r\n    mapping(bytes32 => uint256) private contestRandomNumberRequestId;\r\n\r\n    struct Contest {\r\n        uint256 id;\r\n        string name;\r\n        uint256 ticketsCount;\r\n        string participantsListLink;\r\n        string participantsListSha256;\r\n        bool contestWinnersSelected;\r\n        uint256 randomResult;\r\n        uint256 previousWinnerSeed;\r\n    }\r\n\r\n    /**\r\n     * Constructor inherits VRFConsumerBase\r\n     */\r\n    constructor(\r\n        address _vrfCoordinator,\r\n        address _link,\r\n        bytes32 _keyHash,\r\n        uint256 _fee\r\n    )\r\n        Ownable(msg.sender)\r\n        VRFConsumerBase(\r\n            _vrfCoordinator, // VRF Coordinator\r\n            _link // LINK Token\r\n        )\r\n    {\r\n        keyHash = _keyHash;\r\n        fee = _fee; // LINK fee\r\n    }\r\n\r\n    /// @notice Allows owner to set the VRF keyHash\r\n    /// @param _keyHash The keyHash to be used by the VRF\r\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\r\n        keyHash = _keyHash;\r\n    }\r\n\r\n    /// @notice Allows owner to set the fee per request required by the VRF\r\n    /// @param _fee The fee to be charged for a request\r\n    function setFee(uint256 _fee) external onlyOwner {\r\n        fee = _fee;\r\n    }\r\n\r\n    /// @notice Create new contest with possibility to set all data and call\r\n    /// @notice method to select winners\r\n    /// @param name Name of the contest\r\n    /// @param participantsListLink Link to participants sheet\r\n    /// @param participantsListSha256 Link to participants sheet encoded in sha256\r\n    /// @param ticketsCount Number of maximum winners in contest\r\n    function createNewContest(\r\n        string memory name,\r\n        string memory participantsListLink,\r\n        string memory participantsListSha256,\r\n        uint256 ticketsCount\r\n        ) external onlyOwner {\r\n\r\n        // Add new empty contest\r\n        contests.push();\r\n\r\n        Contest storage contest = contests[contests.length - 1];\r\n        contest.id = contests.length;\r\n        contest.name = name;\r\n\r\n        // Set random number for contest\r\n        getRandomNumber(contest.id);\r\n\r\n        // Check and set 'participantsListLink' for contest\r\n        if(bytes(participantsListLink).length != 0)\r\n            setParticipantsListLink(contest.id, participantsListLink);\r\n\r\n        // Check and set 'participantsListSha256' for contest\r\n        if(bytes(participantsListSha256).length != 0)\r\n            setParticipantsListSha256(contest.id, participantsListSha256);\r\n\r\n        // Check and set 'ticketsCount' for contest\r\n        if(ticketsCount > 0)\r\n            setTicketsNumber(contest.id, ticketsCount);\r\n\r\n        emit AddedNewContest(contest.id);\r\n    }\r\n\r\n    /// @notice Return contest data for given 'contest.id'\r\n    function getContestById(uint256 contestId) external view contestExists(contestId) returns(Contest memory) {\r\n        Contest storage contest = contests[contestId - 1];\r\n\r\n        return contest;\r\n    }\r\n\r\n    /**\r\n     * Requests randomness\r\n     */\r\n    function getRandomNumber(uint256 contestId) public virtual contestExists(contestId) {\r\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - provide LINK to the contract\");\r\n\r\n        bytes32 requestId = requestRandomness(keyHash, fee);\r\n\r\n        contestRandomNumberRequestId[requestId] = contestId;\r\n    }\r\n\r\n    /**\r\n     * Callback function used by VRF Coordinator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n        uint256 contestId = contestRandomNumberRequestId[requestId];\r\n\r\n        Contest storage contest = contests[contestId - 1];\r\n        contest.randomResult = randomness;\r\n\r\n        emit SetRandomNumberForContest(contestId);\r\n\r\n        if (!stepsBeforeContestSelection[contestId].contains(1)) {\r\n            stepsBeforeContestSelection[contestId].add(1);\r\n        }\r\n    }\r\n\r\n    /// @notice Set number of tickets for contest\r\n    /// @param contestId Contest ID\r\n    /// @param number Number of maximum winner in contest\r\n    function setTicketsNumber(\r\n        uint256 contestId,\r\n        uint256 number\r\n        ) public onlyOwner contestExists(contestId) contestPerformed(contestId) {\r\n        Contest storage contest = contests[contestId - 1];\r\n        contest.ticketsCount = number;\r\n        if (!stepsBeforeContestSelection[contestId].contains(2)) {\r\n            stepsBeforeContestSelection[contestId].add(2);\r\n        }\r\n    }\r\n\r\n    /// @notice Set link for participants sheet\r\n    /// @param contestId Contest ID\r\n    /// @param link Participants sheet link\r\n    function setParticipantsListLink(\r\n        uint256 contestId,\r\n        string memory link\r\n        ) public onlyOwner contestExists(contestId) contestPerformed(contestId) {\r\n        Contest storage contest = contests[contestId - 1];\r\n        contest.participantsListLink = link;\r\n\r\n        if (!stepsBeforeContestSelection[contestId].contains(3)) {\r\n            stepsBeforeContestSelection[contestId].add(3);\r\n        }\r\n    }\r\n\r\n    /// @notice Set encoded in sha256 participants sheet\r\n    /// @param contestId Contest ID\r\n    /// @param sha256Hash Hash of participants sheet\r\n    function setParticipantsListSha256(\r\n        uint256 contestId,\r\n        string memory sha256Hash\r\n        ) public onlyOwner contestExists(contestId) contestPerformed(contestId) {\r\n        Contest storage contest = contests[contestId - 1];\r\n        contest.participantsListSha256 = sha256Hash;\r\n\r\n        if (!stepsBeforeContestSelection[contestId].contains(4)) {\r\n            stepsBeforeContestSelection[contestId].add(4);\r\n        }\r\n    }\r\n\r\n    /// @notice Select winners in contest\r\n    /// @param contestId Contest ID\r\n    /// @param count Winners to select in contest\r\n    function selectContestWinners(uint256 contestId, uint256 count) public onlyOwner contestExists(contestId) {\r\n        require(stepsBeforeContestSelection[contestId].length() == 4, \"Contest: Not all steps performed\");\r\n        require(contests[contestId - 1].randomResult != 0, \"Contest: Chainlink data recheck\");\r\n        require((count + contestWinners[contestId].length()) <= contests[contestId - 1].ticketsCount, \"Contest: Outside of ticket range\");\r\n\r\n        Contest storage contest = contests[contestId - 1];\r\n\r\n        if (contest.previousWinnerSeed == 0) {\r\n            contest.previousWinnerSeed = contest.randomResult;\r\n        }\r\n\r\n        for (uint256 i = 0; i < count; i++) {\r\n            uint256 winnerSeed;\r\n            uint256 winnerIndex;\r\n\r\n            bool winnerSelected = false;\r\n            uint256 nonce = 0;\r\n            do {\r\n                winnerSeed = uint256(keccak256(abi.encodePacked(contest.previousWinnerSeed, i, nonce)));\r\n                winnerIndex = (winnerSeed % contest.ticketsCount) + 1;\r\n                nonce++;\r\n\r\n                winnerSelected = !contestWinners[contestId].contains(winnerIndex);\r\n            } while (!winnerSelected);\r\n\r\n            contestWinners[contestId].add(winnerIndex);\r\n            contest.previousWinnerSeed = winnerSeed;\r\n\r\n            emit ContestWinnerSelected(contestId, block.timestamp, winnerIndex);\r\n        }\r\n\r\n        contest.contestWinnersSelected = true;\r\n    }\r\n\r\n    /// @notice Returns array of winners in contest\r\n    /// @param contestId Contest ID\r\n    function getContestWinners(uint256 contestId) external view contestExists(contestId) returns(uint256[] memory) {\r\n        uint256[] memory winners = new uint256[](contestWinners[contestId].length());\r\n\r\n        for (uint256 i = 0; i < contestWinners[contestId].length(); i++) {\r\n            winners[i] = contestWinners[contestId].at(i);\r\n        }\r\n\r\n        return winners;\r\n    }\r\n\r\n    /// @notice Returns array of winners in contest in given range\r\n    /// @param contestId Contest ID\r\n    /// @param from Start index for contest winners\r\n    /// @param to Last index for contest winners\r\n    function getContestWinnersInRange(\r\n        uint256 contestId,\r\n        uint256 from,\r\n        uint256 to\r\n        ) external view contestExists(contestId) returns(uint256[] memory)  {\r\n        require(from <= to, \"Incorrect range\");\r\n        require(to < contestWinners[contestId].length(), \"Incorrect range\");\r\n\r\n        uint256[] memory winners = new uint256[](to - from + 1);\r\n\r\n        for (uint256 i = 0; i <= to - from; i++) {\r\n            winners[i] = contestWinners[contestId].at(i + from);\r\n        }\r\n\r\n        return winners;\r\n    }\r\n\r\n    function recoverErc20(address token) external onlyOwner {\r\n        uint256 amount = IERC20(token).balanceOf(address(this));\r\n        if (amount > 0) {\r\n            IERC20(token).safeTransfer(owner, amount);\r\n        }\r\n    }\r\n\r\n    function recover() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n}\r\n"
    },
    "contracts/abstract/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// Source: https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract OwnableData {\r\n    address public owner;\r\n    address public pendingOwner;\r\n}\r\n\r\nabstract contract Ownable is OwnableData {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address _owner) {\r\n        require(_owner != address(0), \"Ownable: zero address\");\r\n        owner = _owner;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\r\n    /// Can only be invoked by the current `owner`.\r\n    /// @param newOwner Address of the new owner.\r\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\r\n    function transferOwnership(address newOwner, bool direct) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0), \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/external/chainlink/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 remaining\r\n    );\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function balanceOf(\r\n    address owner\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 balance\r\n    );\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8 decimalPlaces\r\n    );\r\n\r\n  function decreaseApproval(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function increaseApproval(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) external;\r\n\r\n  function name()\r\n    external\r\n    view\r\n    returns (\r\n      string memory tokenName\r\n    );\r\n\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (\r\n      string memory tokenSymbol\r\n    );\r\n\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalTokensIssued\r\n    );\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n}\r\n"
    },
    "contracts/external/chainlink/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./LinkTokenInterface.sol\";\r\n\r\nimport \"./VRFRequestIDBase.sol\";\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n    /**\r\n     * @notice fulfillRandomness handles the VRF response. Your contract must\r\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n     * @notice principles to keep in mind when implementing your fulfillRandomness\r\n     * @notice method.\r\n     *\r\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n     * @dev signature, and will call it once it has verified the proof\r\n     * @dev associated with the randomness. (It is triggered via a call to\r\n     * @dev rawFulfillRandomness, below.)\r\n     *\r\n     * @param requestId The Id initially returned by requestRandomness\r\n     * @param randomness the VRF output\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\r\n\r\n    /**\r\n     * @dev In order to keep backwards compatibility we have kept the user\r\n     * seed field around. We remove the use of it because given that the blockhash\r\n     * enters later, it overrides whatever randomness the used seed provides.\r\n     * Given that it adds no security, and can easily lead to misunderstandings,\r\n     * we have removed it from usage and can now provide a simpler API.\r\n     */\r\n    uint256 private constant USER_SEED_PLACEHOLDER = 0;\r\n\r\n    /**\r\n     * @notice requestRandomness initiates a request for VRF output given _seed\r\n     *\r\n     * @dev The fulfillRandomness method receives the output, once it's provided\r\n     * @dev by the Oracle, and verified by the vrfCoordinator.\r\n     *\r\n     * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n     * @dev the _fee must exceed the fee specified during registration of the\r\n     * @dev _keyHash.\r\n     *\r\n     * @dev The _seed parameter is vestigial, and is kept only for API\r\n     * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n     * @dev your own randomness, here, but it's not necessary because the VRF\r\n     * @dev oracle will mix the hash of the block containing your request into the\r\n     * @dev VRF seed it ultimately uses.\r\n     *\r\n     * @param _keyHash ID of public key against which randomness is generated\r\n     * @param _fee The amount of LINK to send with the request\r\n     *\r\n     * @return requestId unique ID for this request\r\n     *\r\n     * @dev The returned requestId can be used to distinguish responses to\r\n     * @dev concurrent requests. It is passed as the first argument to\r\n     * @dev fulfillRandomness.\r\n     */\r\n    function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\r\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\r\n        // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n        // the hash of the block containing this request to obtain the seed/input\r\n        // which is finally passed to the VRF cryptographic machinery.\r\n        uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\r\n        // nonces[_keyHash] must stay in sync with\r\n        // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n        // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n        // This provides protection against the user repeating their input seed,\r\n        // which would result in a predictable/duplicate output, if multiple such\r\n        // requests appeared in the same block.\r\n        nonces[_keyHash] = nonces[_keyHash] + 1;\r\n        return makeRequestId(_keyHash, vRFSeed);\r\n    }\r\n\r\n    LinkTokenInterface internal immutable LINK;\r\n    address private immutable vrfCoordinator;\r\n\r\n    // Nonces for each VRF key from which randomness has been requested.\r\n    //\r\n    // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n    mapping(bytes32 => uint256) /* keyHash */ /* nonce */\r\n        private nonces;\r\n\r\n    /**\r\n     * @param _vrfCoordinator address of VRFCoordinator contract\r\n     * @param _link address of LINK token contract\r\n     *\r\n     * @dev https://docs.chain.link/docs/link-token-contracts\r\n     */\r\n    constructor(address _vrfCoordinator, address _link) {\r\n        vrfCoordinator = _vrfCoordinator;\r\n        LINK = LinkTokenInterface(_link);\r\n    }\r\n\r\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n    // the origin of the call\r\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n        require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n        fulfillRandomness(requestId, randomness);\r\n    }\r\n}\r\n"
    },
    "contracts/external/chainlink/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  /**\r\n   * @notice returns the seed which is actually input to the VRF coordinator\r\n   *\r\n   * @dev To prevent repetition of VRF output due to repetition of the\r\n   * @dev user-supplied seed, that seed is combined in a hash with the\r\n   * @dev user-specific nonce, and the address of the consuming contract. The\r\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n   * @dev the final seed, but the nonce does protect against repetition in\r\n   * @dev requests which are included in a single block.\r\n   *\r\n   * @param _userSeed VRF seed input provided by user\r\n   * @param _requester Address of the requesting contract\r\n   * @param _nonce User-specific nonce at the time of the request\r\n   */\r\n  function makeVRFInputSeed(\r\n    bytes32 _keyHash,\r\n    uint256 _userSeed,\r\n    address _requester,\r\n    uint256 _nonce\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the id for this request\r\n   * @param _keyHash The serviceAgreement ID to be used for this request\r\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n   * @return The id for this request\r\n   *\r\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n   * @dev contract, but the one generated by makeVRFInputSeed\r\n   */\r\n  function makeRequestId(\r\n    bytes32 _keyHash,\r\n    uint256 _vRFInputSeed\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      bytes32\r\n    )\r\n  {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}"
    },
    "contracts/external/openzeppelin/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    // EIP 2612\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function nonces(address owner) external view returns (uint256);\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../interfaces/IERC20.sol\";\r\n\r\nlibrary SafeERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SafeERC20: Transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, uint256 amount) internal {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SafeERC20: TransferFrom failed\");\r\n    }\r\n}\r\n"
    }
  }
}}