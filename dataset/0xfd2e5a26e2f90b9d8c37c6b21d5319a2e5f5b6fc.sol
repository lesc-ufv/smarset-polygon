{{
  "language": "Solidity",
  "sources": {
    "contracts/royalties/FeeReceiverProxy.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n/**\n * FANZONE.io NFT implementation of the LUKSO LSP-8-IdentifiableDigitalAsset standard\n * for more see https://fanzone.io/nfts\n */\n\n// constants\nimport { FEE_SCALE } from \"./constants.sol\";\nimport { FEE_COLLECTOR_NAME_HASH } from \"../registry/constants.sol\";\n\n// libs\nimport \"../royalties/RoyaltySharesLib.sol\";\n\n// interfaces\nimport \"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/extensions/ILSP7CompatibilityForERC20.sol\";\nimport \"../registry/IContractRegistry.sol\";\nimport \"./IFeeReceiverProxy.sol\";\nimport \"./IFeeCollector.sol\";\nimport \"./IFeeCollectorRevenueShareCallback.sol\";\nimport \"./IRoyaltyShares.sol\";\n\n// modules\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\ncontract FeeReceiverProxy is\n    IFeeReceiverProxy,\n    IFeeCollectorRevenueShareCallback,\n    Initializable\n{\n    //\n    // --- Storage\n    //\n\n    address public cardToken;\n    address public contractRegistry;\n\n    //\n    // --- Initialize\n    //\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() initializer {\n        // when the base logic contract is deployed, the initialized flag should get set so its not\n        // possible to call `initialize(...)`\n    }\n\n    function initialize(address _cardToken, address _contractRegistry)\n        public\n        override\n        initializer\n    {\n        cardToken = _cardToken;\n        contractRegistry = _contractRegistry;\n    }\n\n    //\n    // --- OpenSea support for FeeCollector logic\n    //\n\n    function shareRevenueToFeeCollector(address[] calldata feeTokenList)\n        public\n    {\n        for (uint256 i = 0; i < feeTokenList.length; i++) {\n            address token = feeTokenList[i];\n            _shareRevenue(token);\n        }\n    }\n\n    function _shareRevenue(address feeToken) internal {\n        RoyaltySharesLib.RoyaltyShare[]\n            memory creatorRoyalties = IRoyaltyShares(cardToken).royaltyShares();\n\n        uint256 balance;\n        if (feeToken == address(0)) {\n            balance = address(this).balance;\n        } else {\n            balance = ILSP7CompatibilityForERC20(feeToken).balanceOf(\n                address(this)\n            );\n        }\n\n        IFeeCollector feeCollector = IFeeCollector(_getFeeCollectorAddress());\n\n        uint256 baseRevenueShareFee = feeCollector.baseRevenueShareFee();\n        uint256 amount = (balance * FEE_SCALE) / baseRevenueShareFee;\n\n        feeCollector.shareRevenue(\n            feeToken,\n            amount,\n            address(0),\n            creatorRoyalties,\n            abi.encode(feeToken, balance)\n        );\n    }\n\n    function _transferFeesToCollector(\n        address feeCollector,\n        address feeToken,\n        uint256 feeAmount\n    ) internal {\n        if (feeToken == address(0)) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = payable(feeCollector).call{ value: feeAmount }(\n                \"\"\n            );\n            require(success, \"FeeReceiverProxy: transfer failed\");\n        } else {\n            ILSP7CompatibilityForERC20(feeToken).transfer(\n                feeCollector,\n                feeAmount\n            );\n        }\n    }\n\n    //\n    // --- FeeCollectorCallback logic\n    //\n\n    function revenueShareCallback(\n        uint256 baseFee,\n        bytes calldata dataForCallback\n    ) external override(IFeeCollectorRevenueShareCallback) {\n        address feeCollector = _getFeeCollectorAddress();\n\n        if (msg.sender != feeCollector) {\n            revert RevenueShareCallbackInvalidSender();\n        }\n\n        (address feeToken, uint256 balance) = abi.decode(\n            dataForCallback,\n            (address, uint256)\n        );\n\n        // NOTE: sending `balance` instead of `baseFee` as we want to always drain to 0 and not leave\n        // any dust\n        baseFee;\n        _transferFeesToCollector(feeCollector, feeToken, balance);\n    }\n\n    //\n    // --- Contract Registry queries\n    //\n\n    function _getFeeCollectorAddress() internal view returns (address) {\n        return\n            IContractRegistry(contractRegistry).getRegisteredContract(\n                FEE_COLLECTOR_NAME_HASH\n            );\n    }\n\n    //\n    // --- Fallbacks\n    //\n\n    // solhint-disable-next-line no-empty-blocks\n    fallback() external payable {}\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n}\n"
    },
    "contracts/royalties/constants.sol": {
      "content": "// using basis points to describe fees\nuint256 constant FEE_SCALE = 100_00;\n"
    },
    "contracts/registry/constants.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// keccak256(\"FeeCollector\")\nbytes32 constant FEE_COLLECTOR_NAME_HASH = 0xd59ed7e0cf777b70bff43b36b5e7942a53db5cdc1ed3eac0584ffe6898bb47cd;\n\n// keccak256(\"CardTokenScoring\")\nbytes32 constant CARD_TOKEN_SCORING_NAME_HASH = 0xdffe073e73d032dfae2943de6514599be7d9b1cd7b5ff3c3cafaeafef9ce8120;\n\n// keccak256(\"OpenSeaProxy\")\nbytes32 constant OPENSEA_PROXY_NAME_HASH = 0x0cef494da2369e60d9db5c21763fa9ba82fceb498a37b9aaa12fe66296738da9;\n"
    },
    "contracts/royalties/RoyaltySharesLib.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\nlibrary RoyaltySharesLib {\n    struct RoyaltyShare {\n        address receiver;\n        // using basis points to describe shares\n        uint96 share;\n    }\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/extensions/ILSP7CompatibilityForERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// interfaces\nimport \"../ILSP7DigitalAsset.sol\";\n\n/**\n * @dev LSP8 extension, for compatibility for clients / tools that expect ERC20.\n */\ninterface ILSP7CompatibilityForERC20 is ILSP7DigitalAsset {\n    /**\n     * @notice To provide compatibility with indexing ERC20 events.\n     * @dev Emitted when `amount` tokens is transferred from `from` to `to`.\n     * @param from The sending address\n     * @param to The receiving address\n     * @param value The amount of tokens transfered.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @notice To provide compatibility with indexing ERC20 events.\n     * @dev Emitted when `owner` enables `spender` for `value` tokens.\n     * @param owner The account giving approval\n     * @param spender The account receiving approval\n     * @param value The amount of tokens `spender` has access to from `owner`\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /*\n     * @dev Compatible with ERC20 transfer\n     * @param to The receiving address\n     * @param amount The amount of tokens to transfer\n     */\n    function transfer(address to, uint256 amount) external;\n\n    /*\n     * @dev Compatible with ERC20 transferFrom\n     * @param from The sending address\n     * @param to The receiving address\n     * @param amount The amount of tokens to transfer\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n\n    /*\n     * @dev Compatible with ERC20 approve\n     * @param operator The address to approve for `amount`\n     * @param amount The amount to approve\n     */\n    function approve(address operator, uint256 amount) external;\n\n    /*\n     * @dev Compatible with ERC20 allowance\n     * @param tokenOwner The address of the token owner\n     * @param operator The address approved by the `tokenOwner`\n     * @return The amount `operator` is approved by `tokenOwner`\n     */\n    function allowance(address tokenOwner, address operator)\n        external\n        returns (uint256);\n}\n"
    },
    "contracts/registry/IContractRegistry.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\ninterface IContractRegistry {\n    //\n    // --- Events\n    //\n\n    event RegisteredContract(bytes32 nameHash, address target);\n    event WhitelistedToken(address token, bool whitelisted);\n\n    //\n    // --- Registry Queries\n    //\n\n    function getRegisteredContract(bytes32 nameHash)\n        external\n        view\n        returns (address);\n\n    //\n    // --- Registry Logic\n    //\n\n    function setRegisteredContract(bytes32 nameHash, address target) external;\n\n    function removeRegisteredContract(bytes32 nameHash) external;\n\n    //\n    // --- Whitelist Token Queries\n    //\n\n    function isWhitelistedToken(address token) external view returns (bool);\n\n    function allWhitelistedTokens() external view returns (address[] memory);\n\n    //\n    // --- Whitelist Token Logic\n    //\n\n    function setWhitelistedToken(address token) external;\n\n    function removeWhitelistedToken(address token) external;\n}\n"
    },
    "contracts/royalties/IFeeReceiverProxy.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.0;\n\ninterface IFeeReceiverProxy {\n    function initialize(address cardToken, address contractRegistry) external;\n}\n"
    },
    "contracts/royalties/IFeeCollector.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// libs\nimport \"./RoyaltySharesLib.sol\";\n\ninterface IFeeCollector {\n    //\n    // --- Struct\n    //\n\n    // NOTE: packed into one storage slot\n    struct RevenueShareFees {\n        uint16 platform;\n        uint16 creator;\n        uint16 referral;\n    }\n\n    //\n    // --- Fee queries\n    //\n\n    function feeBalance(address receiver, address token)\n        external\n        view\n        returns (uint256);\n\n    function revenueShareFees() external view returns (RevenueShareFees memory);\n\n    function baseRevenueShareFee() external view returns (uint256);\n\n    function platformFeeReceiver() external view returns (address);\n\n    //\n    // --- Fee logic\n    //\n\n    function shareRevenue(\n        address token,\n        uint256 amount,\n        address referrer,\n        RoyaltySharesLib.RoyaltyShare[] calldata creatorRoyalties,\n        bytes calldata dataForCallback\n    ) external returns (uint256);\n\n    function withdrawTokens(address[] calldata tokenList) external;\n\n    function withdrawTokensForMany(\n        address[] calldata addressList,\n        address[] calldata tokenList\n    ) external;\n}\n"
    },
    "contracts/royalties/IFeeCollectorRevenueShareCallback.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\ninterface IFeeCollectorRevenueShareCallback {\n    error RevenueShareCallbackInvalidSender();\n\n    // @notice Called to `msg.sender` after FeeCollector.revenueShare is called.\n    // @param totalFee The amount expected to be transfered to the FeeCollector after the callback is complete\n    // @param dataForCallback The data provided when calling FeeCollector.revenueShare to process the callback\n    function revenueShareCallback(\n        uint256 totalFee,\n        bytes memory dataForCallback\n    ) external;\n}\n"
    },
    "contracts/royalties/IRoyaltyShares.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// libs\nimport \"./RoyaltySharesLib.sol\";\n\ninterface IRoyaltyShares {\n    //\n    // --- Royalty Queries\n    //\n\n    function royaltyShares()\n        external\n        view\n        returns (RoyaltySharesLib.RoyaltyShare[] memory royaltiesForAsset);\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/ILSP7DigitalAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// interfaces\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\";\n\n/**\n * @dev Required interface of a LSP8 compliant contract.\n */\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\n    // --- Events\n\n    /**\n     * @dev Emitted when `amount` tokens is transferred from `from` to `to`.\n     * @param operator The address of operator sending tokens\n     * @param from The address which tokens are sent\n     * @param to The receiving address\n     * @param amount The amount of tokens transferred\n     * @param force When set to TRUE, `to` may be any address but\n     * when set to FALSE `to` must be a contract that supports LSP1 UniversalReceiver\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses\n     */\n    event Transfer(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bool force,\n        bytes data\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\n     * @param operator The address authorized as an operator\n     * @param tokenOwner The token owner\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\n     */\n    event AuthorizedOperator(\n        address indexed operator,\n        address indexed tokenOwner,\n        uint256 indexed amount\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens.\n     * @param operator The address revoked from operating\n     * @param tokenOwner The token owner\n     */\n    event RevokedOperator(address indexed operator, address indexed tokenOwner);\n\n    // --- Token queries\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation\n     * If the contract represents a NFT then 0 SHOULD be used, otherwise 18 is the common value\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {balanceOf} and {transfer}.\n     */\n    function decimals() external view returns (uint256);\n\n    /**\n     * @dev Returns the number of existing tokens.\n     * @return The number of existing tokens\n     */\n    function totalSupply() external view returns (uint256);\n\n    // --- Token owner queries\n\n    /**\n     * @dev Returns the number of tokens owned by `tokenOwner`.\n     * @param tokenOwner The address to query\n     * @return The number of tokens owned by this address\n     */\n    function balanceOf(address tokenOwner) external view returns (uint256);\n\n    // --- Operator functionality\n\n    /**\n     * @param operator The address to authorize as an operator.\n     * @param amount The amount of tokens operator has access to.\n     * @dev Sets `amount` as the amount of tokens `operator` address has access to from callers tokens.\n     *\n     * See {isOperatorFor}.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be the zero address.\n     *\n     * Emits an {AuthorizedOperator} event.\n     */\n    function authorizeOperator(address operator, uint256 amount) external;\n\n    /**\n     * @param operator The address to revoke as an operator.\n     * @dev Removes `operator` address as an operator of callers tokens.\n     *\n     * See {isOperatorFor}.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be the zero address.\n     *\n     * Emits a {RevokedOperator} event.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @param operator The address to query operator status for.\n     * @param tokenOwner The token owner.\n     * @return The amount of tokens `operator` address has access to from `tokenOwner`.\n     * @dev Returns amount of tokens `operator` address has access to from `tokenOwner`.\n     * Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own\n     * operator.\n     */\n    function isOperatorFor(address operator, address tokenOwner)\n        external\n        view\n        returns (uint256);\n\n    // --- Transfer functionality\n\n    /**\n     * @param from The sending address.\n     * @param to The receiving address.\n     * @param amount The amount of tokens to transfer.\n     * @param force When set to TRUE, to may be any address but\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n     *\n     * @dev Transfers `amount` of tokens from `from` to `to`. The `force` parameter will be used\n     * when notifying the token sender and receiver.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `amount` tokens must be owned by `from`.\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\n     * `amount` tokens.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(\n        address from,\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) external;\n\n    /**\n     * @param from The list of sending addresses.\n     * @param to The list of receiving addresses.\n     * @param amount The amount of tokens to transfer.\n     * @param force When set to TRUE, to may be any address but\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n     *\n     * @dev Transfers many tokens based on the list `from`, `to`, `amount`. If any transfer fails\n     * the call will revert.\n     *\n     * Requirements:\n     *\n     * - `from`, `to`, `amount` lists are the same length.\n     * - no values in `from` can be the zero address.\n     * - no values in `to` can be the zero address.\n     * - each `amount` tokens must be owned by `from`.\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\n     * `amount` tokens.\n     *\n     * Emits {Transfer} events.\n     */\n    function transferBatch(\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amount,\n        bool force,\n        bytes[] memory data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n/**\n * @title The interface for ERC725Y General key/value store\n * @dev ERC725Y provides the ability to set arbitrary key value sets that can be changed over time\n * It is intended to standardise certain keys value pairs to allow automated retrievals and interactions\n * from interfaces and other smart contracts\n */\ninterface IERC725Y {\n    /**\n     * @notice Emitted when data at a key is changed\n     * @param key The key which value is set\n     * @param value The value to set\n     */\n    event DataChanged(bytes32 indexed key, bytes value);\n\n    /**\n     * @notice Gets array of data at multiple given keys\n     * @param keys The array of keys which values to retrieve\n     * @return values The array of data stored at multiple keys\n     */\n    function getData(bytes32[] memory keys) external view returns (bytes[] memory values);\n\n    /**\n     * @param keys The array of keys which values to set\n     * @param values The array of values to set\n     * @dev Sets array of data at multiple given `key`\n     * SHOULD only be callable by the owner of the contract set via ERC173\n     *\n     * Emits a {DataChanged} event.\n     */\n    function setData(bytes32[] memory keys, bytes[] memory values) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}