{{
  "language": "Solidity",
  "sources": {
    "contracts/FluidLeverageToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\npragma experimental ABIEncoderV2;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport { ERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\n\nimport {\n  IERC20,\n  ILendingPoolAddressesProvider,\n  ILendingPool,\n  IProtocolDataProvider,\n  IPriceOracleGetter,\n  IDebtToken,\n  IFlashloanAdapter,\n  ITokenIncentives\n} from \"./utils/Interfaces.sol\";\nimport { SafeERC20, DataTypes } from \"./utils/Libraries.sol\";\nimport { DangoMath } from \"./utils/DangoMath.sol\";\n\n/**\n * @title DangoFluidLeverageToken\n * @author Dango.Cafe\n *\n * Entry point contract for minting, burning & rebalancing of Fluid Leverage Token system\n * Leverage position is rebalanced every 24 hours to the target leverage ratio\n */\ncontract DangoFluidLeverageToken is Initializable, ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, DangoMath {\n  using SafeMathUpgradeable for uint256;\n  using SafeERC20 for IERC20;\n\n  /* ============ Constants ============ */\n\n  uint256 public constant REBALANCE_DELAY = 86400;                                // Length of 1 epoch in seconds. 1 Day\n  uint256 public constant REBALANCE_GRACE_PERIOD = 7200;                          // Grace period for rebalancing in seconds. 2 hours\n\n  /* ============ Immutables ============ */\n\n  uint8 private immutable debtDecimals;                                           // Collateral token decimals\n  uint8 private immutable collDecimals;                                           // Debt token decimals\n\n  ILendingPoolAddressesProvider public immutable AAVE_ADDRESSES_PROVIDER;         // Aave Lending Pool Address Provider instance\n  IProtocolDataProvider public immutable AAVE_DATA_PROVIDER;                      // Aave Protocol Data Provider instance\n  IERC20 public immutable COLLATERAL_ASSET;                                       // Collateral Token Instance\n  IERC20 public immutable DEBT_ASSET;                                             // Debt Token Instance\n\n  uint256 public immutable targetLeverageRatio;                                   // Target Leverage ratio\n  uint256 public immutable lowerLeverageLimit;                                    // Lowest possible leverage ratio that doesn't trigger emergency rebalancing\n  uint256 public immutable upperLeverageLimit;                                    // Maxium possible leverage ratio that doesn't trigger emergency rebalancing\n\n  /* ============ State Variables ============ */\n\n  ILendingPool public AAVE_LENDING_POOL;                                          // Aave Lending Pool instance\n  IPriceOracleGetter public AAVE_ORACLE;                                          // Aave Oracle instance\n  address public flashloanAdapter;                                                // Address of Flashloan Adapter\n  address public feeCollector;                                                    // Address of the fee collector\n  uint256 public mintFee;                                                         // Mint fee in wei (1e18 = 100%, 1e16 = 1%)\n  uint256 public burnFee;                                                         // Burn fee in wei (1e18 = 100%, 1e16 = 1%)\n  uint256 public indexPrice;                                                      // Last tracked index price of the Fluid Leverage Token in collateral token\n  uint256 public lastRebalancingTime;                                             // Timestamp of the last rebalancing time\n  uint256 public totalCapacity;                                                   // Current total deposit capacity\n  mapping(address => bool) rebalancers;                                           // Whitelist of rebalancers\n\n  /* ============ Modifiers ============ */\n\n  /**\n   * Throws error if sender is not Flashloan Adapter contract\n   */\n  modifier onlyFlashloanAdapter() {\n    require(msg.sender == flashloanAdapter, \"access-denied-not-flashloan-adapter\");\n    _;\n  }\n\n  /* ============ Events ============ */\n\n  event Rebalanced(\n    bool indexed _isEmergency,                  // Whether the rebalancing is emergency\n    uint256 _currentLeverageRatio,              // Leverage ratio before the rebalancing\n    uint256 _newLeverageRatio                   // Leverage ratio after the rebalancing\n  );\n\n  event Deposit(\n    address indexed _user,                      // User address\n    uint256 _amtCollateral,                     // Amount of collateral deposited\n    uint256 _amtMinted,                         // Amount of fluid leverage tokens minted\n    uint256 _currentLeverageRatio               // Leverage ratio upon deposit\n  );\n\n  event Withdraw(\n    address indexed _user,                      // User address\n    bool _isFlashloan,                          // Whether the withdraw was done by flashloan\n    uint256 _amtWithdrawn,                      // Amount of collateral withdrawn\n    uint256 _amtBurned,                         // Amount fluid leverage tokens burned\n    uint256 _currentLeverageRatio               // Leverage ratio upon withdraw\n  );\n\n  event UpdateFlashloanAdapter(\n    address _currentFlashloanAdapter,           // Address of the flashloan adpater before updating\n    address _newFlashloanAdapter                // Address of the new flashloan adapter\n  );\n\n  event UpdateFeeCollector(\n    address _currentFeeCollector,               // Address of the fee collector before updating\n    address _newFeeCollector                    // Address of the new fee collector\n  );\n\n  event UpdateFees(\n    uint256 _currentMintFee,                    // Mint fees before updating\n    uint256 _currentBurnFee,                    // Burn fees before updating\n    uint256 _newMintFee,                        // New mint fees\n    uint256 _newBurnFee                         // New burn fees\n  );\n\n  event IncreaseCapacity(\n    uint256 _currentCapacity,                   // Current deposit limit\n    uint256 _newCapacity                        // New deposit limit\n  );\n\n  event WhitelistRebalancers(\n    address[] _whitelisted                      // Array of new whitelisted addresses\n  );\n\n  event RevokeRebalancers(\n    address[] _revoked                          // Array of revoked addresses\n  );\n\n  /* ============ Constructor ============ */\n\n  /**\n   * Sets the values for immutables\n   *\n   * @param _provider           Address of Aave Lending Pool Address Provider\n   * @param _dataProvider       Address of Aave Protocol Data Provider\n   * @param _collateral         Address of the collateral token\n   * @param _debt               Address of the debt token\n   * @param _target             Target leverage ratio in wei (2e18 = 2x leverage)\n   * @param _lower              Lowest possible leverage ratio that doesn't trigger emergency rebalancing\n   * @param _upper              Maxium possible leverage ratio that doesn't trigger emergency rebalancing\n   */\n  constructor(\n    ILendingPoolAddressesProvider _provider,\n    IProtocolDataProvider _dataProvider,\n    IERC20 _collateral,\n    IERC20 _debt,\n    uint256 _target,\n    uint256 _lower,\n    uint256 _upper\n  ) {\n    address _aToken;\n\n    (_aToken, , ) = _dataProvider.getReserveTokensAddresses(address(_collateral));\n    require(_aToken != address(0x0), \"invalid-collateral-address\");\n\n    (_aToken, , ) = _dataProvider.getReserveTokensAddresses(address(_debt));\n    require(_aToken != address(0x0), \"invalid-collateral-address\");\n\n    require(_lower < _target && _upper > _target, \"target-lev-out-of-range\");\n    require(_target > 1e18, \"invalid-target-lev\");\n\n    AAVE_ADDRESSES_PROVIDER = _provider;\n    AAVE_DATA_PROVIDER = _dataProvider;\n\n    COLLATERAL_ASSET = _collateral;\n    DEBT_ASSET = _debt;\n\n    targetLeverageRatio = _target;\n    lowerLeverageLimit = _lower;\n    upperLeverageLimit = _upper;\n\n    collDecimals = _collateral.decimals();\n    debtDecimals = _debt.decimals();\n  }\n\n  /* ============ Initializer ============ */\n\n  /**\n   * Initializes state variables & inheritted contracts\n   *\n   * @param _name               Name of the Fluid Leverage Token\n   * @param _symbol             Symbol of the Fluid Leverage Token\n   * @param _flashloanAdapter   Address of flashloan adapter / receiver base\n   * @param _feeCollector       Address of the fee collector\n   * @param _mintFee            Initial minting fee (in wei; 1e18 = 100%)\n   * @param _burnFee            Initital burn fee (in wei; 1e18 = 100%)\n   * @param _capacity           Initial deposit limit (in wei)\n   * @param _rebalancers        Addresses of whitelisted rebalancers\n   */\n  function initialize(\n    string calldata _name,\n    string calldata _symbol,\n    address _flashloanAdapter,\n    address _feeCollector,\n    uint256 _mintFee,\n    uint256 _burnFee,\n    uint256 _capacity,\n    address[] memory _rebalancers\n  ) initializer public {\n    require(_mintFee <= 1e16, \"mint-fee-too-large\");\n    require(_burnFee <= 3e16, \"burn-fee-too-large\");\n\n    __Ownable_init();\n    __ERC20_init(_name, _symbol);\n    __ReentrancyGuard_init();\n\n    AAVE_LENDING_POOL = ILendingPool(AAVE_ADDRESSES_PROVIDER.getLendingPool());\n    AAVE_ORACLE = IPriceOracleGetter(AAVE_ADDRESSES_PROVIDER.getPriceOracle());\n\n    indexPrice = 1e18;\n    flashloanAdapter = _flashloanAdapter;\n    feeCollector = _feeCollector;\n    mintFee = _mintFee;\n    burnFee = _burnFee;\n    totalCapacity = _capacity;\n    lastRebalancingTime = block.timestamp;\n\n    for (uint256 index = 0; index < _rebalancers.length; index++) {\n      rebalancers[_rebalancers[index]] = true;\n    }\n  }\n\n  /* ============ User Facing State Changing Methods ============ */\n\n  /**\n   * @notice Mint Fluid Leverage Token by depositting the collateral token\n   *\n   * Charges minting fee based on the current value of `mintFee`\n   * Flashloans propotional amount of debt and swaps into collateral to achieve current leverage ratio (No Flashloan fees)\n   *\n   * @param _amt               Amount of collateral to deposit\n   */\n  function deposit(uint256 _amt) external nonReentrant {\n    (uint256 _fee, uint256 _finalAmt) = _calculateMintFee(_amt);\n    COLLATERAL_ASSET.safeTransferFrom(msg.sender, flashloanAdapter, _finalAmt);\n    COLLATERAL_ASSET.safeTransferFrom(msg.sender, feeCollector, _fee);\n\n    DataTypes.FlashloanData memory _data;\n\n    _data.opType = 2;\n    _data.userDepositAmt = _finalAmt;\n    _data.flashAsset = address(DEBT_ASSET);\n    _data.targetAsset = address(COLLATERAL_ASSET);\n\n    if (collDecimals != 18) {\n      _finalAmt = wdiv(_finalAmt, 10 ** collDecimals);\n    }\n\n    uint256 _flashMultiplier = getCurrentLeverRatio().sub(1e18);\n    uint256 _flashloanAmt = wmul(wdiv(_finalAmt, getDebtPrice()), _flashMultiplier);\n    if (debtDecimals != 18) {\n      _flashloanAmt = wmul(_flashloanAmt, 10 ** debtDecimals);\n    }\n    uint256 _amtToMint = wdiv(_finalAmt, getIndex());\n\n    _data.flashAmt = _flashloanAmt;\n\n    (,, address _variableDebtToken) = AAVE_DATA_PROVIDER.getReserveTokensAddresses(address(DEBT_ASSET));\n    IDebtToken(_variableDebtToken).approveDelegation(flashloanAdapter, _flashloanAmt);\n\n    _flashloan(address(DEBT_ASSET), _flashloanAmt, abi.encode(_data));\n    _mint(msg.sender, _amtToMint);\n\n    require(totalSupply() <= totalCapacity, \"deposit-limit-hit\");\n\n    emit Deposit(msg.sender, _amt, _amtToMint, getCurrentLeverRatio());\n  }\n\n  /**\n   * @notice Burn Fluid Leverage Tokens and redeem it for collateral\n   *\n   * Charges burning fee based on the current value of `burnFee`\n   * This method doesn't use flashloan, and hence only useful for small withdrawals\n   * Withdraws collateral, and convert some of them to debt token and repay the debt\n   *\n   * @param _amt               Amount of fluid leverage tokens to burn\n   */\n  function withdraw(uint256 _amt) external nonReentrant {\n    require(balanceOf(msg.sender) >= _amt, \"not-enough-bal\");\n\n    uint256 _amtToReturn = wmul(_amt, getIndex());\n    uint256 _multiplier = getCurrentLeverRatio().sub(1e18);\n    uint256 _amtToFlash = wmul(_amtToReturn, _multiplier);\n\n    if (collDecimals != 18) {\n      _amtToFlash = wmul(_amtToFlash, 10 ** collDecimals);\n      _amtToReturn = wmul(_amtToReturn, 10 ** collDecimals);\n    }\n\n    uint256 _totalWithdraw = _amtToReturn.add(_amtToFlash);\n\n    _withdrawCollateral(_totalWithdraw, address(this));\n    COLLATERAL_ASSET.safeTransfer(flashloanAdapter, _amtToFlash);\n    IFlashloanAdapter(flashloanAdapter).executeWithdraw(_amtToFlash);\n\n    (uint256 _fee, uint256 _finalAmt) = _calculateBurnFee(_amtToReturn);\n    COLLATERAL_ASSET.safeTransfer(feeCollector, _fee);\n    COLLATERAL_ASSET.safeTransfer(msg.sender, _finalAmt);\n\n    _burn(msg.sender, _amt);\n\n    emit Withdraw(msg.sender, false, _amtToReturn, _amt, getCurrentLeverRatio());\n  }\n\n  /**\n   * @notice Burn Fluid Leverage Tokens and redeem it for collateral (using Flashloan)\n   *\n   * Charges burning fee based on the current value of `burnFee`\n   * Similar to `withdraw`, but using flashloan. Has additional flashloan fees (0.09% charged by Aave)\n   * Useful for large withdrawals\n   *\n   * @param _amt               Amount of fluid leverage tokens to burn\n   */\n  function withdrawViaFlashloan(uint256 _amt) external nonReentrant {\n    require(balanceOf(msg.sender) >= _amt, \"not-enough-bal\");\n\n    uint256 _scaledAmt = wmul(_amt, getIndex());\n    uint256 _multiplier = getCurrentLeverRatio().sub(1e18);\n    uint256 _amtToFlash = wmul(_scaledAmt, _multiplier);\n    uint256 _flashPremium = _amtToFlash.mul(AAVE_LENDING_POOL.FLASHLOAN_PREMIUM_TOTAL()).div(10000);\n    uint256 _amtToReturn = _scaledAmt.sub(_flashPremium);\n\n    if (collDecimals != 18) {\n      _amtToFlash = wmul(_amtToFlash, 10 ** collDecimals);\n      _amtToReturn = wmul(_amtToReturn, 10 ** collDecimals);\n    }\n\n    DataTypes.FlashloanData memory _data;\n    _data.opType = 3;\n    _data.flashAmt = _amtToFlash;\n    _data.flashAsset = address(COLLATERAL_ASSET);\n    _data.targetAsset = address(DEBT_ASSET);\n\n    _flashloan(address(COLLATERAL_ASSET), _amtToFlash, abi.encode(_data));\n    _withdrawCollateral(_amtToReturn, address(this));\n\n    (uint256 _fee, uint256 _finalAmt) = _calculateBurnFee(_amtToReturn);\n    COLLATERAL_ASSET.safeTransfer(feeCollector, _fee);\n    COLLATERAL_ASSET.safeTransfer(msg.sender, _finalAmt);\n\n    _burn(msg.sender, _amt);\n\n    emit Withdraw(msg.sender, true, _amtToReturn, _amt, getCurrentLeverRatio());\n  }\n\n  /* ============ Non-User Facing State Changing Methods ============ */\n\n  /**\n   * @notice Rebalance collateral and debt into target leverage ratio\n   *\n   * Called by once a day. Can only be called by whitelisted `rebalancers`\n   */\n  function rebalance() external nonReentrant {\n    require(rebalancers[msg.sender], \"not-a-rebalancer\");\n    require(block.timestamp > lastRebalancingTime.add(REBALANCE_DELAY).sub(REBALANCE_GRACE_PERIOD), \"too-soon-to-rebalance\");\n    require(block.timestamp < lastRebalancingTime.add(REBALANCE_DELAY).add(REBALANCE_GRACE_PERIOD), \"rebalancing-time-over\");\n\n    uint256 _oldLeverageRatio = getCurrentLeverRatio();\n\n    _rebalance();\n\n    lastRebalancingTime = block.timestamp;\n\n    emit Rebalanced(false, _oldLeverageRatio, getCurrentLeverRatio());\n  }\n\n  /**\n   * @notice Rebalance collateral and debt into target leverage ratio in emergency cases\n   *\n   * Called only when one of the emergency conditions are satisfied\n   * Condition 1 - There are no rebalances in the last 1.5 epoch\n   * Condition 2 - Leverage ratio goes out of the < `lowerLeverageLimit` - `upperLeverageLimit` > range\n   */\n  function emergencyRebalance() external nonReentrant {\n    bool _leverCondition = getCurrentLeverRatio() < lowerLeverageLimit || getCurrentLeverRatio() > upperLeverageLimit;\n    bool _timeCondition = block.timestamp > lastRebalancingTime.add(REBALANCE_DELAY).add(REBALANCE_DELAY.div(2));\n\n    require(_leverCondition || _timeCondition, \"cannot-invoke-emergency-rebalance\");\n\n    uint256 _oldLeverageRatio = getCurrentLeverRatio();\n\n    _rebalance();\n\n    lastRebalancingTime = block.timestamp;\n\n    emit Rebalanced(true, _oldLeverageRatio, getCurrentLeverRatio());\n  }\n\n  /* ============ View Methods ============ */\n\n  /**\n   * @notice Returns current Leverage Ratio\n   */\n  function getCurrentLeverRatio() public view returns (uint256 _leverRatio) {\n    if (totalSupply() == 0) {\n      return targetLeverageRatio;\n    }\n\n    uint256 _debtPrice = getDebtPrice();\n\n    (uint256 _collBal,,,,,,,,) = AAVE_DATA_PROVIDER.getUserReserveData(address(COLLATERAL_ASSET), address(this));\n    (,, uint256 _debtBal,,,,,,) = AAVE_DATA_PROVIDER.getUserReserveData(address(DEBT_ASSET), address(this));\n\n    if (collDecimals != 18) {\n      uint256 _tokenUnit = 10 ** collDecimals;\n      _collBal = wdiv(_collBal, _tokenUnit);\n    }\n    if (debtDecimals != 18) {\n      uint256 _tokenUnit = 10 ** debtDecimals;\n      _debtBal = wdiv(_debtBal, _tokenUnit);\n    }\n\n    uint256 _realExposure = _collBal.sub(wmul(_debtBal, _debtPrice));\n\n    _leverRatio = wdiv(_collBal, _realExposure);\n  }\n\n  /**\n   * @notice Returns current Debt price in Collateral. Price taken from Aave Oracle\n   */\n  function getDebtPrice() public view returns (uint256 _debtPrice) {\n    uint256 _collateralPriceEth = AAVE_ORACLE.getAssetPrice(address(COLLATERAL_ASSET));\n    uint256 _debtPriceEth = AAVE_ORACLE.getAssetPrice(address(DEBT_ASSET));\n\n    _debtPrice = wdiv(_debtPriceEth, _collateralPriceEth);\n  }\n\n  /**\n   * @notice Returns current index price of Fluid Leverage Token (priced in collateral)\n   */\n  function getIndex() public view returns (uint256 _newIndex) {\n    if (totalSupply() == 0) {\n      return 1e18;\n    }\n\n    uint256 _debtPrice = getDebtPrice();\n\n    (uint256 _collBal,,,,,,,,) = AAVE_DATA_PROVIDER.getUserReserveData(address(COLLATERAL_ASSET), address(this));\n    (,, uint256 _debtBal,,,,,,) = AAVE_DATA_PROVIDER.getUserReserveData(address(DEBT_ASSET), address(this));\n\n    if (collDecimals != 18) {\n      uint256 _tokenUnit = 10 ** collDecimals;\n      _collBal = wdiv(_collBal, _tokenUnit);\n    }\n    if (debtDecimals != 18) {\n      uint256 _tokenUnit = 10 ** debtDecimals;\n      _debtBal = wdiv(_debtBal, _tokenUnit);\n    }\n\n\n    uint256 _realExposure = _collBal.sub(wmul(_debtBal, _debtPrice));\n    uint256 _idealCollBal = wmul(targetLeverageRatio, _realExposure);\n\n    if (_idealCollBal > _collBal) {\n      uint256 _deltaDebt = wdiv(wmul(targetLeverageRatio, _realExposure).sub(_collBal), _debtPrice);\n      uint256 _idealDeltaColl = wmul(_deltaDebt, _debtPrice);\n\n      _newIndex = indexPrice.add(wdiv(_idealDeltaColl, totalSupply()));\n    } else {\n      uint256 _deltaDebt = wdiv(_collBal.sub(wmul(targetLeverageRatio, _realExposure)), _debtPrice);\n      uint256 _idealDeltaColl = wmul(_deltaDebt, _debtPrice);\n\n      _newIndex = indexPrice.sub(wdiv(_idealDeltaColl, totalSupply()));\n    }\n  }\n\n  /* ============ Internal View Methods ============ */\n\n  /**\n   * @notice Calculates Mint Fee\n   *\n   * @param _amt               Input amount\n   *\n   * @return _feeAmt           Fee charged on input amount\n   * @return _amtSubFee        Amount after deducting the fee amount\n   */\n  function _calculateMintFee(uint256 _amt) internal view returns (uint256 _feeAmt, uint256 _amtSubFee) {\n    _feeAmt = wmul(_amt, mintFee);\n    _amtSubFee = _amt.sub(_feeAmt);\n  }\n\n  /**\n   * @notice Calculates Burn Fee\n   *\n   * @param _amt               Input amount\n   *\n   * @return _feeAmt           Fee charged on input amount\n   * @return _amtSubFee        Amount after deducting the fee amount\n   */\n  function _calculateBurnFee(uint256 _amt) internal view returns (uint256 _feeAmt, uint256 _amtSubFee) {\n    _feeAmt = wmul(_amt, burnFee);\n    _amtSubFee = _amt.sub(_feeAmt);\n  }\n\n  /* ============ Internal State Changing Methods ============ */\n\n  /**\n   * @notice Invokes Aave Flashloan\n   *\n   * @param _asset             Address of the asset needed for flashloan\n   * @param _amt               Amount to flashloan\n   * @param _data              Data to transfer to Flashloan Adapter\n   */\n  function _flashloan(address _asset, uint256 _amt, bytes memory _data) internal {\n    address[] memory assets = new address[](1);\n    assets[0] = address(_asset);\n\n    uint256[] memory amounts = new uint256[](1);\n    amounts[0] = _amt;\n\n    uint256[] memory modes = new uint256[](1);\n    modes[0] = _asset == address(DEBT_ASSET) ? 2 : 0;\n\n    bytes memory params = _data;\n    uint16 referralCode = 0;\n\n    AAVE_LENDING_POOL.flashLoan(\n        flashloanAdapter,\n        assets,\n        amounts,\n        modes,\n        address(this),\n        params,\n        referralCode\n    );\n  }\n\n  /**\n   * @notice Withdraw collateral\n   *\n   * @param _amt               Amount to withdraw\n   * @param _to                Address to receive the collateral\n   */\n  function _withdrawCollateral(uint256 _amt, address _to) internal {\n    AAVE_LENDING_POOL.withdraw(address(COLLATERAL_ASSET), _amt, _to);\n  }\n\n  /**\n   * @notice Internal rebalancing logic\n   *\n   * Increases the leverage if the strategy has made improvement in the last epoch, deleverage otherwise (Uses flashloan)\n   */\n  function _rebalance() internal {\n    (uint256 _collBal,,,,,,,,) = AAVE_DATA_PROVIDER.getUserReserveData(address(COLLATERAL_ASSET), address(this));\n    (,, uint256 _debtBal,,,,,,) = AAVE_DATA_PROVIDER.getUserReserveData(address(DEBT_ASSET), address(this));\n\n    uint256 _debtPrice = getDebtPrice();\n\n    if (collDecimals != 18) {\n      uint256 _tokenUnit = 10 ** collDecimals;\n      _collBal = wdiv(_collBal, _tokenUnit);\n    }\n    if (debtDecimals != 18) {\n      uint256 _tokenUnit = 10 ** debtDecimals;\n      _debtBal = wdiv(_debtBal, _tokenUnit);\n    }\n\n    uint256 _realExposure = _collBal.sub(wmul(_debtBal, _debtPrice));\n    uint256 _idealCollBal = wmul(targetLeverageRatio, _realExposure);\n\n    if (_idealCollBal > _collBal) {\n      uint256 _deltaDebt = wdiv(wmul(targetLeverageRatio, _realExposure).sub(_collBal), _debtPrice);\n\n      if (debtDecimals != 18) {\n        _deltaDebt = wmul(_deltaDebt, 10 ** debtDecimals);\n      }\n\n      DataTypes.FlashloanData memory _data;\n\n      _data.flashAsset = address(DEBT_ASSET);\n      _data.targetAsset = address(COLLATERAL_ASSET);\n      _data.flashAmt = _deltaDebt;\n\n      (,, address _variableDebtToken) = AAVE_DATA_PROVIDER.getReserveTokensAddresses(address(DEBT_ASSET));\n      IDebtToken(_variableDebtToken).approveDelegation(flashloanAdapter, _deltaDebt);\n\n      _flashloan(address(DEBT_ASSET), _deltaDebt, abi.encode(_data));\n    } else {\n      uint256 _deltaDebt = wdiv(_collBal.sub(wmul(targetLeverageRatio, _realExposure)), _debtPrice);\n      uint256 _idealDeltaColl = wmul(_deltaDebt, _debtPrice);\n\n      if (collDecimals != 18) {\n        _idealDeltaColl = wmul(_idealDeltaColl, 10 ** collDecimals);\n      }\n\n      DataTypes.FlashloanData memory _data;\n\n      _data.opType = 1;\n      _data.flashAsset = address(COLLATERAL_ASSET);\n      _data.targetAsset = address(DEBT_ASSET);\n      _data.flashAmt = _idealDeltaColl;\n\n      _flashloan(address(COLLATERAL_ASSET), _idealDeltaColl, abi.encode(_data));\n    }\n\n    (uint256 _newCollBal,,,,,,,,) = AAVE_DATA_PROVIDER.getUserReserveData(address(COLLATERAL_ASSET), address(this));\n\n    if (collDecimals != 18) {\n      uint256 _tokenUnit = 10 ** collDecimals;\n      _newCollBal = wdiv(_newCollBal, _tokenUnit);\n    }\n\n    if (_newCollBal > _collBal) {\n      indexPrice = indexPrice.add(wdiv(_newCollBal.sub(_collBal), totalSupply()));\n    } else {\n      indexPrice = indexPrice.sub(wdiv(_collBal.sub(_newCollBal), totalSupply()));\n    }\n  }\n\n  /* ============ Admin Methods ============ */\n\n  /**\n   * @notice Update Aave lending pool address, only needs to call if that has been upgraded\n   */\n  function __updateAaveLendingPool() external onlyOwner {\n    AAVE_LENDING_POOL = ILendingPool(AAVE_ADDRESSES_PROVIDER.getLendingPool());\n  }\n\n  /**\n   * @notice Update Aave oracle address, only needs to call if that has been upgraded\n   */\n  function __updateAaveOracle() external onlyOwner {\n    AAVE_ORACLE = IPriceOracleGetter(AAVE_ADDRESSES_PROVIDER.getPriceOracle());\n  }\n\n  /**\n   * @notice Update flashloan adapter address\n   *\n   * @param _newAdapter        Address of the new flashloan adapter\n   */\n  function __changeFlashloanAdapter(address _newAdapter) external onlyOwner {\n    require(_newAdapter != address(0x0), \"invalid-address\");\n\n    address _currentFlashloanAdapter = flashloanAdapter;\n\n    flashloanAdapter = _newAdapter;\n\n    emit UpdateFlashloanAdapter(_currentFlashloanAdapter, _newAdapter);\n  }\n\n  /**\n   * @notice Update fee collector address\n   *\n   * @param _newCollector      Address of the new fee collector\n   */\n  function __changeFeeCollector(address _newCollector) external onlyOwner {\n    require(_newCollector != address(0x0), \"invalid-address\");\n\n    address _currentFeeCollector = feeCollector;\n\n    feeCollector = _newCollector;\n\n    emit UpdateFeeCollector(_currentFeeCollector, _newCollector);\n  }\n\n  /**\n   * @notice Update minting and burning fees\n   *\n   * @param _mintFee           New mint fee\n   * @param _burnFee           New burn fee\n   */\n  function __changeFees(uint256 _mintFee, uint256 _burnFee) external onlyOwner {\n    require(_mintFee <= 1e16, \"mint-fee-too-large\");\n    require(_burnFee <= 3e16, \"burn-fee-too-large\");\n\n    uint256 _currentMintFee = mintFee;\n    uint256 _currentBurnFee = burnFee;\n\n    mintFee = _mintFee;\n    burnFee = _burnFee;\n\n    emit UpdateFees(_currentMintFee, _currentBurnFee, _mintFee, _burnFee);\n  }\n\n  /**\n   * @notice Increase deposit capacity\n   *\n   * @param _newCapacity       New mint fee\n   */\n  function __increaseTotalCapacity(uint256 _newCapacity) external onlyOwner {\n    require(_newCapacity > totalCapacity, \"cannot-decrease-capacity\");\n\n    uint256 _currentCapacity = totalCapacity;\n\n    totalCapacity = _newCapacity;\n\n    emit IncreaseCapacity(_currentCapacity, _newCapacity);\n  }\n\n  /**\n   * @notice Whitelist rebalancers\n   *\n   * @param _rebalancers       Array of rebalancers addresses to whitelist\n   */\n  function __whitelistRebalancers(address[] memory _rebalancers) external onlyOwner {\n    for (uint256 index = 0; index < _rebalancers.length; index++) {\n      rebalancers[_rebalancers[index]] = true;\n    }\n\n    emit WhitelistRebalancers(_rebalancers);\n  }\n\n  /**\n   * @notice Revoke rebalancers\n   *\n   * @param _rebalancers       Array of rebalancers addresses to revoke access\n   */\n  function __revokeRebalancers(address[] memory _rebalancers) external onlyOwner {\n    for (uint256 index = 0; index < _rebalancers.length; index++) {\n      rebalancers[_rebalancers[index]] = false;\n    }\n\n    emit RevokeRebalancers(_rebalancers);\n  }\n\n  /**\n   * @notice Withdraw collateral. Only called by flashloan adapter\n   *\n   * @param _amt               Amount of collateral to withdraw\n   */\n  function __withdrawCollateral(uint256 _amt) external onlyFlashloanAdapter {\n    _withdrawCollateral(_amt, flashloanAdapter);\n  }\n\n  /**\n   * @notice Claim Aave / Matic rewards. Only called by flashloan adapter\n   */\n  function __claimRewards() external onlyFlashloanAdapter {\n    address[] memory _assets = new address[](2);\n    (_assets[0],,) = AAVE_DATA_PROVIDER.getReserveTokensAddresses(address(COLLATERAL_ASSET));\n    (,,_assets[1]) = AAVE_DATA_PROVIDER.getReserveTokensAddresses(address(DEBT_ASSET));\n\n    ITokenIncentives _incentives = ITokenIncentives(0x357D51124f59836DeD84c8a1730D72B749d8BC23);\n\n    if (_incentives.getRewardsBalance(_assets, address(this)) > 0) {\n      _incentives.claimRewards(_assets, type(uint256).max, flashloanAdapter);\n    }\n  }\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/utils/Interfaces.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\npragma experimental ABIEncoderV2;\n\nimport { DataTypes } from \"./Libraries.sol\";\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the decimals of the token\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ninterface ILendingPoolAddressesProvider {\n    event LendingPoolUpdated(address indexed newAddress);\n    event ConfigurationAdminUpdated(address indexed newAddress);\n    event EmergencyAdminUpdated(address indexed newAddress);\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n    event PriceOracleUpdated(address indexed newAddress);\n    event LendingRateOracleUpdated(address indexed newAddress);\n    event ProxyCreated(bytes32 id, address indexed newAddress);\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n    function setAddress(bytes32 id, address newAddress) external;\n\n    function setAddressAsProxy(bytes32 id, address impl) external;\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getLendingPool() external view returns (address);\n\n    function setLendingPoolImpl(address pool) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n\n    function setLendingPoolConfiguratorImpl(address configurator) external;\n\n    function getLendingPoolCollateralManager() external view returns (address);\n\n    function setLendingPoolCollateralManager(address manager) external;\n\n    function getPoolAdmin() external view returns (address);\n\n    function setPoolAdmin(address admin) external;\n\n    function getEmergencyAdmin() external view returns (address);\n\n    function setEmergencyAdmin(address admin) external;\n\n    function getPriceOracle() external view returns (address);\n\n    function setPriceOracle(address priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n\n    function setLendingRateOracle(address lendingRateOracle) external;\n}\n\ninterface ILendingPool {\n    /**\n    * @dev Emitted on deposit()\n    * @param reserve The address of the underlying asset of the reserve\n    * @param user The address initiating the deposit\n    * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n    * @param amount The amount deposited\n    * @param referral The referral code used\n    **/\n    event Deposit(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referral\n    );\n\n    /**\n    * @dev Emitted on withdraw()\n    * @param reserve The address of the underlyng asset being withdrawn\n    * @param user The address initiating the withdrawal, owner of aTokens\n    * @param to Address that will receive the underlying\n    * @param amount The amount to be withdrawn\n    **/\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n    /**\n    * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n    * @param reserve The address of the underlying asset being borrowed\n    * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n    * initiator of the transaction on flashLoan()\n    * @param onBehalfOf The address that will be getting the debt\n    * @param amount The amount borrowed out\n    * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n    * @param borrowRate The numeric rate at which the user has borrowed\n    * @param referral The referral code used\n    **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint256 borrowRateMode,\n        uint256 borrowRate,\n        uint16 indexed referral\n    );\n\n    /**\n    * @dev Emitted on repay()\n    * @param reserve The address of the underlying asset of the reserve\n    * @param user The beneficiary of the repayment, getting his debt reduced\n    * @param repayer The address of the user initiating the repay(), providing the funds\n    * @param amount The amount repaid\n    **/\n    event Repay(\n        address indexed reserve,\n        address indexed user,\n        address indexed repayer,\n        uint256 amount\n    );\n\n    /**\n    * @dev Emitted on swapBorrowRateMode()\n    * @param reserve The address of the underlying asset of the reserve\n    * @param user The address of the user swapping his rate mode\n    * @param rateMode The rate mode that the user wants to swap to\n    **/\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n    /**\n    * @dev Emitted on setUserUseReserveAsCollateral()\n    * @param reserve The address of the underlying asset of the reserve\n    * @param user The address of the user enabling the usage as collateral\n    **/\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n    /**\n    * @dev Emitted on setUserUseReserveAsCollateral()\n    * @param reserve The address of the underlying asset of the reserve\n    * @param user The address of the user enabling the usage as collateral\n    **/\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n    /**\n    * @dev Emitted on rebalanceStableBorrowRate()\n    * @param reserve The address of the underlying asset of the reserve\n    * @param user The address of the user for which the rebalance has been executed\n    **/\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n    /**\n    * @dev Emitted on flashLoan()\n    * @param target The address of the flash loan receiver contract\n    * @param initiator The address initiating the flash loan\n    * @param asset The address of the asset being flash borrowed\n    * @param amount The amount flash borrowed\n    * @param premium The fee flash borrowed\n    * @param referralCode The referral code used\n    **/\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint256 amount,\n        uint256 premium,\n        uint16 referralCode\n    );\n\n    /**\n    * @dev Emitted when the pause is triggered.\n    */\n    event Paused();\n\n    /**\n    * @dev Emitted when the pause is lifted.\n    */\n    event Unpaused();\n\n    /**\n    * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n    * LendingPoolCollateral manager using a DELEGATECALL\n    * This allows to have the events in the generated ABI for LendingPool.\n    * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n    * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n    * @param user The address of the borrower getting liquidated\n    * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n    * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n    * @param liquidator The address of the liquidator\n    * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n    * to receive the underlying collateral asset directly\n    **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n    * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n    * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n    * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n    * gets added to the LendingPool ABI\n    * @param reserve The address of the underlying asset of the reserve\n    * @param liquidityRate The new liquidity rate\n    * @param stableBorrowRate The new stable borrow rate\n    * @param variableBorrowRate The new variable borrow rate\n    * @param liquidityIndex The new liquidity index\n    * @param variableBorrowIndex The new variable borrow index\n    **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n    * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n    * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n    * @param asset The address of the underlying asset to deposit\n    * @param amount The amount to be deposited\n    * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n    *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n    *   is a different wallet\n    * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n    *   0 if the action is executed directly by the user, without any middle-man\n    **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n    * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n    * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n    * @param asset The address of the underlying asset to withdraw\n    * @param amount The underlying amount to be withdrawn\n    *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n    * @param to Address that will receive the underlying, same as msg.sender if the user\n    *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n    *   different wallet\n    **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external;\n\n    /**\n    * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n    * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n    * corresponding debt token (StableDebtToken or VariableDebtToken)\n    * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n    *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n    * @param asset The address of the underlying asset to borrow\n    * @param amount The amount to be borrowed\n    * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n    * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n    *   0 if the action is executed directly by the user, without any middle-man\n    * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n    * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n    * if he has been given credit delegation allowance\n    **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n    * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n    * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n    * @param asset The address of the borrowed underlying asset previously borrowed\n    * @param amount The amount to repay\n    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n    * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n    * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n    * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n    * other borrower whose debt should be removed\n    **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external;\n\n    /**\n    * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n    * @param asset The address of the underlying asset borrowed\n    * @param rateMode The rate mode that the user wants to swap to\n    **/\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n    /**\n    * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n    * - Users can be rebalanced if the following conditions are satisfied:\n    *     1. Usage ratio is above 95%\n    *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n    *        borrowed at a stable rate and depositors are not earning enough\n    * @param asset The address of the underlying asset borrowed\n    * @param user The address of the user to be rebalanced\n    **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n    * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n    * @param asset The address of the underlying asset deposited\n    * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n    **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n    /**\n    * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n    * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n    *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n    * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n    * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n    * @param user The address of the borrower getting liquidated\n    * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n    * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n    * to receive the underlying collateral asset directly\n    **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n    * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n    * as long as the amount taken plus a fee is returned.\n    * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n    * For further details please visit https://developers.aave.com\n    * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n    * @param assets The addresses of the assets being flash-borrowed\n    * @param amounts The amounts amounts being flash-borrowed\n    * @param modes Types of the debt to open if the flash loan is not returned:\n    *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n    *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n    *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n    * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n    * @param params Variadic packed params to pass to the receiver as extra information\n    * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n    *   0 if the action is executed directly by the user, without any middle-man\n    **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n    * @dev Returns the user account data across all the reserves\n    * @param user The address of the user\n    * @return totalCollateralETH the total collateral in ETH of the user\n    * @return totalDebtETH the total debt in ETH of the user\n    * @return availableBorrowsETH the borrowing power left of the user\n    * @return currentLiquidationThreshold the liquidation threshold of the user\n    * @return ltv the loan to value of the user\n    * @return healthFactor the current health factor of the user\n    **/\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n        uint256 totalCollateralETH,\n        uint256 totalDebtETH,\n        uint256 availableBorrowsETH,\n        uint256 currentLiquidationThreshold,\n        uint256 ltv,\n        uint256 healthFactor\n        );\n\n    function initReserve(\n        address reserve,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\n        external;\n\n    function setConfiguration(address reserve, uint256 configuration) external;\n\n    /**\n    * @dev Returns the configuration of the reserve\n    * @param asset The address of the underlying asset of the reserve\n    * @return The configuration of the reserve\n    **/\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n    * @dev Returns the configuration of the user across all the reserves\n    * @param user The user address\n    * @return The configuration of the user\n    **/\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n    * @dev Returns the normalized income normalized income of the reserve\n    * @param asset The address of the underlying asset of the reserve\n    * @return The reserve's normalized income\n    */\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n    * @dev Returns the normalized variable debt per unit of asset\n    * @param asset The address of the underlying asset of the reserve\n    * @return The reserve normalized variable debt\n    */\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n    /**\n    * @dev Returns the state and configuration of the reserve\n    * @param asset The address of the underlying asset of the reserve\n    * @return The state of the reserve\n    **/\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromAfter,\n        uint256 balanceToBefore\n    ) external;\n\n    function getReservesList() external view returns (address[] memory);\n\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n    function setPause(bool val) external;\n\n    function paused() external view returns (bool);\n\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\n}\n\ninterface IProtocolDataProvider {\n    struct TokenData {\n        string symbol;\n        address tokenAddress;\n    }\n\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\n\n    function getAllReservesTokens() external view returns (TokenData[] memory);\n\n    function getAllATokens() external view returns (TokenData[] memory);\n\n    function getReserveConfigurationData(address asset) external view returns (uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen);\n\n    function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp);\n\n    function getUserReserveData(address asset, address user) external view returns (uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled);\n\n    function getReserveTokensAddresses(address asset) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\n}\n\ninterface IPriceOracleGetter {\n    function getAssetPrice(address _asset) external view returns (uint256);\n\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\n\n    function getSourceOfAsset(address _asset) external view returns(address);\n    \n    function getFallbackOracle() external view returns(address);\n}\n\n/**\n * @title IFlashLoanReceiver interface\n * @notice Interface for the Aave fee IFlashLoanReceiver.\n * @author Aave\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n **/\ninterface IFlashLoanReceiver {\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n}\n\ninterface IDebtToken {\n    /**\n    * @dev delegates borrowing power to a user on the specific debt token\n    * @param delegatee the address receiving the delegated borrowing power\n    * @param amount the maximum amount being delegated. Delegation will still\n    * respect the liquidation constraints (even if delegated, a delegatee cannot\n    * force a delegator HF to go below 1)\n    **/\n    function approveDelegation(address delegatee, uint256 amount) external;\n}\n\n/**\n * @title IFluidLeverage interface\n * @notice Interface for the Fluid Leverage Tokens\n * @author Dango.Cafe\n * @dev Use this interface to interact with Dango FLT Systems\n **/\ninterface IFluidLeverage is IERC20 {\n    function deposit(uint256 _amt) external;\n\n    function withdraw(uint256 _amt) external;\n\n    function targetLeverageRatio() external view returns (uint256);\n\n    function lowerLeverageLimit() external view returns (uint256);\n\n    function upperLeverageLimit() external view returns (uint256);\n\n    function flashloanAdapter() external view returns (address);\n\n    function getCurrentLeverRatio() external view returns (uint256 _leverRatio);\n\n    function getDebtPrice() external view returns (uint256 _debtPrice);\n\n    function getIndex() external view returns (uint256 _newIndex);\n\n    function mintFee() external view returns (uint256);\n\n    function burnFee() external view returns (uint256);\n\n    function indexPrice() external view returns (uint256);\n\n    function lastRebalancingTime() external view returns (uint256);\n\n    function totalCapacity() external view returns (uint256);\n\n    function rebalancers(address _rebalancer) external view returns (bool);\n\n    function COLLATERAL_ASSET() external view returns (IERC20);\n\n    function DEBT_ASSET() external view returns (IERC20);\n\n    function __withdrawCollateral(uint256 _amt) external;\n\n    function __claimRewards() external;\n}\n\n/**\n * @title IFlashloanAdapter interface\n * @notice Interface for the Dango Flashloan Adapter\n * @author Dango.Cafe\n **/\ninterface IFlashloanAdapter {\n    function executeWithdraw(uint256 _amt) external;\n}\n\n/**\n * @title ISushiRouter interface\n * @notice Interface for Sushiswap Router\n **/\ninterface ISushiRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\n/**\n * @title ITokenIncentives interface\n * @notice Interface for Aave/Matic incentives contracts\n **/\ninterface ITokenIncentives {\n    function claimRewards(address[] calldata assets, uint256 amount, address to) external;\n\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n}"
    },
    "contracts/utils/Libraries.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nimport { IERC20 } from \"./Interfaces.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Extended https://github.com/aave/protocol-v2/blob/master/contracts/protocol/libraries/types/DataTypes.sol\nlibrary DataTypes {\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        uint256 data;\n    }\n\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\n\n    /**\n     * @notice Shared Datatype for all Flashloan operations\n     */\n    struct FlashloanData {\n        // Variable to indicate the type of operation needs to perform during the flashloan\n        // opType: 0 = Rebalance Up, 1 = Rebalance Down, 2 = Deposit & 3 = Withdraw\n        uint256 opType;\n        // Amount of collateral deposited by the user. Valid only `deposit` method. This needs to be deposited along with the flashloan swap\n        uint256 userDepositAmt;\n        // Amount of flashloan taken\n        uint256 flashAmt;\n        // Address of the flashloan token\n        address flashAsset;\n        // Swap target token\n        address targetAsset;\n    }\n}"
    },
    "contracts/utils/DangoMath.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\n\n/**\n * @title DangoMath\n * @author Dango.Cafe\n *\n * Taken from ds-math\n */\ncontract DangoMath {\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = SafeMathUpgradeable.add(SafeMathUpgradeable.mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = SafeMathUpgradeable.add(SafeMathUpgradeable.mul(x, WAD), y / 2) / y;\n    }\n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}