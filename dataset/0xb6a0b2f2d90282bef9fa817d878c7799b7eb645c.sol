{{
  "language": "Solidity",
  "sources": {
    "contracts/NFTStakingVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"./interfaces/IKryptoPunks.sol\";\nimport \"./interfaces/IKryptoPunksToken.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract NFTStakingVault is Ownable, IERC721Receiver {\n    //--------------------------------------------------------------------\n    // VARIABLES\n\n    uint256 public totalItemsStaked;\n    uint256 private constant MONTH = 30 days;\n\n    IKryptoPunks nft;\n    IKryptoPunksToken token;\n\n    struct Stake {\n        address owner;\n        uint256 stakedAt;\n    }\n\n    mapping(uint256 => Stake) vault;\n\n    //--------------------------------------------------------------------\n    // EVENTS\n\n    event ItemStaked(uint256 tokenId, address owner, uint256 timestamp);\n    event ItemUnstaked(uint256 tokenId, address owner, uint256 timestamp);\n    event Claimed(address owner, uint256 reward);\n\n    //--------------------------------------------------------------------\n    // ERRORS\n\n    error NFTStakingVault__ItemAlreadyStaked();\n    error NFTStakingVault__NotItemOwner();\n\n    //--------------------------------------------------------------------\n    // CONSTRUCTOR\n\n    constructor(address _nftAddress, address _tokenAddress) {\n        nft = IKryptoPunks(_nftAddress);\n        token = IKryptoPunksToken(_tokenAddress);\n    }\n\n    //--------------------------------------------------------------------\n    // FUNCTIONS\n\n    function stake(uint256[] calldata tokenIds) external {\n        uint256 tokenId;\n        uint256 stakedCount;\n        \n        uint256 len = tokenIds.length;\n        for (uint256 i; i < len; ) {\n            tokenId = tokenIds[i];\n            if (vault[tokenId].owner != address(0)) {\n                revert NFTStakingVault__ItemAlreadyStaked();\n            }\n            if (nft.ownerOf(tokenId) != msg.sender) {\n                revert NFTStakingVault__NotItemOwner();\n            }\n\n            nft.safeTransferFrom(msg.sender, address(this), tokenId);\n\n            vault[tokenId] = Stake(msg.sender, block.timestamp);\n\n            emit ItemStaked(tokenId, msg.sender, block.timestamp);\n\n            unchecked {\n                stakedCount++;\n                ++i;\n            }\n        }\n        totalItemsStaked = totalItemsStaked + stakedCount;\n    }\n\n    function unstake(uint256[] calldata tokenIds) external {\n        _claim(msg.sender, tokenIds, true);\n    }\n\n    function claim(uint256[] calldata tokenIds) external {\n        _claim(msg.sender, tokenIds, false);\n    }\n\n    function _claim(\n        address user,\n        uint256[] calldata tokenIds,\n        bool unstakeAll\n    ) internal {\n        uint256 tokenId;\n        uint256 calculatedReward;\n        uint256 rewardEarned;\n        \n        uint256 len = tokenIds.length;\n        for (uint256 i; i < len; ) {\n            tokenId = tokenIds[i];\n            if (vault[tokenId].owner != user) {\n                revert NFTStakingVault__NotItemOwner();\n            }\n            uint256 _stakedAt = vault[tokenId].stakedAt;\n\n            uint256 stakingPeriod = block.timestamp - _stakedAt;\n            uint256 _dailyReward = _calculateReward(stakingPeriod);\n            calculatedReward +=\n                (100 * _dailyReward * stakingPeriod * 1e18) /\n                1 days;\n\n            vault[tokenId].stakedAt = block.timestamp;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        rewardEarned = calculatedReward / 100;\n\n        emit Claimed(user, rewardEarned);\n\n        if (rewardEarned != 0) {\n            token.mint(user, rewardEarned);\n        }\n\n        if (unstakeAll) {\n            _unstake(user, tokenIds);\n        }\n    }\n\n    function _unstake(address user, uint256[] calldata tokenIds) internal {\n        uint256 tokenId;\n        uint256 unstakedCount;\n        \n        uint256 len = tokenIds.length;\n        for (uint256 i; i < len; ) {\n            tokenId = tokenIds[i];\n            require(vault[tokenId].owner == user, \"Not Owner\");\n\n            nft.safeTransferFrom(address(this), user, tokenId);\n\n            delete vault[tokenId];\n\n            emit ItemUnstaked(tokenId, user, block.timestamp);\n\n            unchecked {\n                unstakedCount++;\n                ++i;\n            }\n        }\n        totalItemsStaked = totalItemsStaked - unstakedCount;\n    }\n\n    // calculate the daily staking reward based on the NFT staking period\n    function _calculateReward(uint256 stakingPeriod)\n        internal\n        pure\n        returns (uint256 dailyReward)\n    {\n        if (stakingPeriod <= MONTH) {\n            dailyReward = 1;\n        } else if (stakingPeriod < 3 * MONTH) {\n            dailyReward = 2;\n        } else if (stakingPeriod < 6 * MONTH) {\n            dailyReward = 4;\n        } else if (stakingPeriod >= 6 * MONTH) {\n            dailyReward = 8;\n        }\n    }\n\n    //--------------------------------------------------------------------\n    // VIEW FUNCTIONS\n\n    function getDailyReward(uint256 stakingPeriod)\n        external\n        pure\n        returns (uint256 dailyReward)\n    {\n        dailyReward = _calculateReward(stakingPeriod);\n    }\n\n    function getTotalRewardEarned(address user)\n        external\n        view\n        returns (uint256 rewardEarned)\n    {\n        uint256 calculatedReward;\n        uint256[] memory tokens = tokensOfOwner(user);\n        \n        uint256 len = tokens.length;\n        for (uint256 i; i < len; ) {\n            uint256 _stakedAt = vault[tokens[i]].stakedAt;\n            uint256 stakingPeriod = block.timestamp - _stakedAt;\n            uint256 _dailyReward = _calculateReward(stakingPeriod);\n            calculatedReward +=\n                (100 * _dailyReward * stakingPeriod * 1e18) /\n                1 days;\n            unchecked {\n                ++i;\n            }\n        }\n        rewardEarned = calculatedReward / 100;\n        \n    }\n\n    function getRewardEarnedPerNft(uint256 _tokenId)\n        external\n        view\n        returns (uint256 rewardEarned)\n    {\n        uint256 _stakedAt = vault[_tokenId].stakedAt;\n        uint256 stakingPeriod = block.timestamp - _stakedAt;\n        uint256 _dailyReward = _calculateReward(stakingPeriod);\n        uint256 calculatedReward = (100 * _dailyReward * stakingPeriod * 1e18) /\n            1 days;\n        rewardEarned = calculatedReward / 100;\n    }\n\n    function balanceOf(address user)\n        public\n        view\n        returns (uint256 nftStakedbalance)\n    {\n        uint256 supply = nft.totalSupply();\n        unchecked {\n            for (uint256 i; i <= supply; ++i) {\n                if (vault[i].owner == user) {\n                    nftStakedbalance += 1;\n                }\n            }\n        }\n    }\n\n    function tokensOfOwner(address user)\n        public\n        view\n        returns (uint256[] memory tokens)\n    {\n        uint256 balance = balanceOf(user);\n        uint256 supply = nft.totalSupply();\n        tokens = new uint256[](balance);\n\n        uint256 counter;\n\n        if (balance == 0) {\n            return tokens;\n        }\n\n        unchecked {\n            for (uint256 i; i <= supply; ++i) {\n                if (vault[i].owner == user) {\n                    tokens[counter] = i;\n                    counter++;\n                }\n                if (counter == balance) {\n                    return tokens;\n                }\n            }\n        }\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/interfaces/IKryptoPunks.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\ninterface IKryptoPunks {\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function approve(address to, uint256 tokenId) external;\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    function mint(uint256 _mintAmount) external;\n\n    function tokensOfOwner(address _owner)\n        external\n        view\n        returns (uint256[] memory);\n\n    function totalSupply() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IKryptoPunksToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IKryptoPunksToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    function mint(address to, uint256 amount) external;\n\n    function burnFrom(address account, uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}