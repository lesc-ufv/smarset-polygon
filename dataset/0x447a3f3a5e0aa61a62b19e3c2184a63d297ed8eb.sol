{{
  "language": "Solidity",
  "sources": {
    "contracts/tournament_v2/TRVDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n//\n//   +-+ +-+ +-+   +-+ +-+ +-+   +-+ +-+ +-+ +-+ +-+ +-+ +-+\n//   |T| |h| |e|   |R| |e| |d|   |V| |i| |l| |l| |a| |g| |e|\n//   +-+ +-+ +-+   +-+ +-+ +-+   +-+ +-+ +-+ +-+ +-+ +-+ +-+\n//\n//\n//   The Red Village + Pellar 2022\n//\n\ncontract TRVDeployer is Ownable {\n  // 0 -> access control\n  // 1 -> ca state\n  // 2 -> cf state\n  // 3 -> tournament state\n  // 4 -> champion utils\n  // 5 -> blooding service\n  // 6 -> bloodbath service\n  // 7 -> blood elo service\n  // 8 -> solo service\n  // 9 -> tournament route\n  mapping(uint256 => address) public elements;\n\n  constructor() {\n    // replace deployed contract here.\n    elements[0] = 0x3f0B50B7A270de536D5De35C11C2613284C4304e;\n\n    elements[1] = 0x54a5Bd715f60931627B8d67C4B7b82758F3B8a16;\n    elements[2] = 0x2f6FC934242583A96Ef6ACBF933132eBba094E1a;\n    elements[3] = 0x4c856111387B2cb179c841680e403D4dd27601de;\n\n    elements[4] = 0x1aD18cC83908C8377E7af9950A2056F20f19Da8d;\n    elements[5] = 0x3F2593cde3315af710F166A636F9459fd1d28667;\n    elements[6] = 0xD76f0cA9A8Baa6DB419Ab3EBd0B85a80456a3b63;\n    elements[7] = 0x48afDd7684347Ee6b7A0F30F82eCd0b69180B841;\n    elements[8] = 0xBf3583DefA1F73E09F0EA53309699F0D9cB4a3d9;\n\n    elements[9] = 0xF681C909C16a0c5AA10308075144DC5666e936BE;\n  }\n\n  function setContracts(uint256[] memory _ids, address[] memory _contracts) external onlyOwner {\n    require(_ids.length == _contracts.length, \"Input mismatch\");\n\n    for (uint256 i = 0; i < _ids.length; i++) {\n      elements[_ids[i]] = _contracts[i];\n    }\n  }\n\n  function setupRouterRolesForAdmin(address[] memory _contracts) external onlyOwner {\n\n    for (uint256 i = 0; i < _contracts.length; i++) {\n      IAll(elements[0]).grantMaster(_contracts[i], elements[9]);\n    }\n  }\n\n  function init() external onlyOwner {\n    IAll(elements[0]).grantMaster(address(this), elements[1]);\n    IAll(elements[0]).grantMaster(address(this), elements[2]);\n    IAll(elements[0]).grantMaster(address(this), elements[3]);\n\n    IAll(elements[0]).grantMaster(address(this), elements[4]);\n    IAll(elements[0]).grantMaster(address(this), elements[5]);\n    IAll(elements[0]).grantMaster(address(this), elements[6]);\n    IAll(elements[0]).grantMaster(address(this), elements[7]);\n    IAll(elements[0]).grantMaster(address(this), elements[8]);\n\n    IAll(elements[0]).grantMaster(address(this), elements[9]);\n  }\n\n  function setup() external onlyOwner {\n    IAll(elements[0]).setAccessControlProvider(elements[0]);\n    IAll(elements[1]).setAccessControlProvider(elements[0]);\n    IAll(elements[2]).setAccessControlProvider(elements[0]);\n    IAll(elements[3]).setAccessControlProvider(elements[0]);\n    IAll(elements[4]).setAccessControlProvider(elements[0]);\n    IAll(elements[5]).setAccessControlProvider(elements[0]);\n    IAll(elements[6]).setAccessControlProvider(elements[0]);\n    IAll(elements[7]).setAccessControlProvider(elements[0]);\n    IAll(elements[8]).setAccessControlProvider(elements[0]);\n    IAll(elements[9]).setAccessControlProvider(elements[0]);\n  }\n\n  function bindingService() external onlyOwner {\n    bindingRoleForService(elements[5]);\n    bindingRoleForService(elements[6]);\n    bindingRoleForService(elements[7]);\n    bindingRoleForService(elements[8]);\n  }\n\n  function bindingRoleForService(address _service) internal {\n    IAll(elements[0]).grantMaster(_service, elements[1]);\n    IAll(elements[0]).grantMaster(_service, elements[2]);\n    IAll(elements[0]).grantMaster(_service, elements[3]);\n\n    IAll(_service).bindChampionAttributesState(elements[1]);\n    IAll(_service).bindChampionFightingState(elements[2]);\n    IAll(_service).bindTournamentState(elements[3]);\n    IAll(_service).bindChampionUtils(elements[4]);\n  }\n\n  function bindingRoleForRoute() external onlyOwner {\n    IAll(elements[0]).grantMaster(elements[9], elements[5]);\n    IAll(elements[0]).grantMaster(elements[9], elements[6]);\n    IAll(elements[0]).grantMaster(elements[9], elements[7]);\n    IAll(elements[0]).grantMaster(elements[9], elements[8]);\n  }\n\n  function bindingServiceForRoute() external onlyOwner {\n    IAll(elements[9]).bindService(0, elements[8]);\n    IAll(elements[9]).bindService(1, elements[5]);\n    IAll(elements[9]).bindService(2, elements[6]);\n    IAll(elements[9]).bindService(3, elements[7]);\n  }\n}\n\ninterface IAll {\n  function setAccessControlProvider(address) external;\n\n  function grantMaster(address, address) external;\n\n  function bindChampionAttributesState(address) external;\n\n  function bindChampionFightingState(address) external;\n\n  function bindTournamentState(address) external;\n\n  function bindChampionUtils(address) external;\n\n  function bindService(uint64, address) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}