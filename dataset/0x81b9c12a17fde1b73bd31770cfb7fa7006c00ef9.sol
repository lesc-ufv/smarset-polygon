{{
  "language": "Solidity",
  "sources": {
    "contracts/Dex.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"./Interfaces/ISleep.sol\";\nimport \"./Interfaces/IHealth.sol\";\nimport \"./Interfaces/IBedroomNft.sol\";\nimport \"./Interfaces/IUpgradeNft.sol\";\nimport \"./Interfaces/ITracker.sol\";\nimport \"./Interfaces/IUpgrader.sol\";\n\n/// @title GetSleepn Decentralized Exchange Contract\n/// @author Sleepn\n/// @notice This contract can be use to mint and upgrade a Bedroom NFT\ncontract Dex is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @notice Sleep Token Contract\n    ISleep public sleepTokenInstance;\n\n    /// @notice Health Token Contract\n    IHealth public healthTokenInstance;\n\n    /// @notice Bedroom NFT Contract\n    IBedroomNft public bedroomNftInstance;\n\n    /// @notice UpgradeNFT Contract\n    IUpgradeNft public upgradeNftInstance;\n\n    /// @notice Tracker Contract\n    ITracker public trackerInstance;\n\n    /// @notice Upgrader Contract\n    IUpgrader public upgraderInstance;\n\n    /// @notice Dex Contract address\n    address public teamWallet;\n\n    /// @dev Dev Wallet\n    address private devWallet;\n\n    /// @notice Payment Token\n    IERC20Upgradeable public paymentToken;\n\n    /// @notice Bedroom NFT Purchase cost\n    uint256 public bedroomNftPurchaseCost;\n\n    /// @notice Packs costs\n    struct Pack {\n        string designURI; // Design Id\n        uint256 price; // Price\n        uint256[] upgradeIds; // UpgradeIds\n    }\n\n    /// @notice Upgrade Nft Buying Data\n    struct UpgradeNft {\n        bool isAvailable; // Is available ?\n        uint256 cost; // Cost\n        uint256 amountAvailable; // Amount available\n    }\n\n    /// @notice Upgrade Nft Buying Data depending on the id of the Upgrade Nft\n    mapping(uint256 => UpgradeNft) private upgradeNftBuyingData;\n\n    /// @notice Pack costs depending on the Pack ID\n    mapping(uint256 => Pack) private packCosts;\n\n    /// @notice Bedroom NFT Purchased Event\n    event BedroomNftPurchased(\n        address indexed owner, uint256 indexed bedroomNftId, uint256 price\n    );\n    /// @notice Upgrade NFT Purchased Event\n    event UpgradeNftPurchased(\n        address indexed owner, uint256 indexed upgradeNftId, uint256 price\n    );\n    /// @notice Pack Purchased Event\n    event PackPurchased(\n        address indexed owner,\n        uint256 indexed packId,\n        uint256 bedroomNftId,\n        uint256 price\n    );\n    /// @notice Withdraw Money Event\n    event WithdrawMoney(address indexed receiver, uint256 price);\n    /// @notice Bedroom NFT Purchase Cost Setted Event\n    event BedroomNftPurchaseCostSetted(uint256 price);\n    /// @notice Pack Cost Setted Event\n    event PackCostSetted(uint256 packId, uint256 price);\n    /// @notice Upgrade NFT Data Setted Event\n    event UpgradeNftBuyingDataSetted(\n        uint256 upgradeNftId, uint256 amountAvailable, bool isAvailable\n    );\n    /// @notice Upgrade Nft linked to a Bedroom Nft Event\n    event UpgradeNftLinkedToBedroomNft(\n        uint256 indexed bedroomNftId,\n        uint256 indexed upgradeNftId,\n        string designURI\n    );\n    /// @notice Upgrade Nft unlinked from a Bedroom Nft Event\n    event UpgradeNftUnlinkedFromBedroomNft(\n        uint256 indexed bedroomNftId,\n        uint256 indexed upgradeNftId,\n        string designURI\n    );\n\n    /// @notice Restricted Access Error - Wrong caller\n    error RestrictedAccess(address caller);\n    /// @notice Upgrade Nft not available Error - Upgrade Nft is not available\n    error UpgradeNftNotAvailable(uint256 tokenId);\n\n    /// @dev Constructor\n    /// @param _teamWallet Team Wallet address\n    function initialize(address _teamWallet) public initializer {\n        __Ownable_init();\n        teamWallet = _teamWallet;\n    }\n\n    /// @notice Settles contracts addresses\n    /// @param _sleepToken Address of the Sleep Token contract\n    /// @param _healthToken Address of the Health Token contract\n    /// @param _bedroomNft Address of the Bedroom NFT contract\n    /// @param _upgradeNft Address of the Upgrade NFT contract\n    /// @param _tracker Address of the Tracker contract\n    /// @param _upgrader Address of the Upgrader contract\n    /// @param _teamWallet New Team Wallet address\n    /// @param _devWallet New Dev Wallet address\n    /// @param _tokenAddress New Payment Token contract address\n    /// @dev This function can only be called by the owner of the contract\n    function setAddresses(\n        ISleep _sleepToken,\n        IHealth _healthToken,\n        IBedroomNft _bedroomNft,\n        IUpgradeNft _upgradeNft,\n        ITracker _tracker,\n        IUpgrader _upgrader,\n        address _teamWallet,\n        address _devWallet,\n        IERC20Upgradeable _tokenAddress\n    ) external onlyOwner {\n        sleepTokenInstance = _sleepToken;\n        bedroomNftInstance = _bedroomNft;\n        upgradeNftInstance = _upgradeNft;\n        trackerInstance = _tracker;\n        upgraderInstance = _upgrader;\n        teamWallet = _teamWallet;\n        devWallet = _devWallet;\n        paymentToken = _tokenAddress;\n        healthTokenInstance = _healthToken;\n    }\n\n    /// @notice Settles NFTs purchase price\n    /// @param _price Purchase price of the NFT\n    /// @dev This function can only be called by the owner of the contract\n    function setBuyingPrice(uint256 _price) external onlyOwner {\n        bedroomNftPurchaseCost = _price;\n        emit BedroomNftPurchaseCostSetted(_price);\n    }\n\n    /// @notice Settles Packs data\n    /// @param _upgradeIds Ids of the Upgrade Nfts\n    /// @param _designURI Bedroom NFT Design URI\n    /// @param _price Purchase price of the Pack\n    /// @param _packId Pack ID\n    /// @dev This function can only be called by the owner of the contract or the dev wallet\n    function setPackPrice(\n        uint256[] calldata _upgradeIds,\n        string calldata _designURI,\n        uint256 _price,\n        uint256 _packId\n    ) external {\n        if (msg.sender != owner() && msg.sender != devWallet) {\n            revert RestrictedAccess(msg.sender);\n        }\n        packCosts[_packId] = Pack(_designURI, _price, _upgradeIds);\n        emit PackCostSetted(_packId, _price);\n    }\n\n    /// @notice Settles Upgrade NFTs purchase price\n    /// @param _upgradeId Id of the Upgrade Nft\n    /// @param _price Purchase price of the Upgrade Nft\n    /// @param _amountAvailable Amount available of the Upgrade Nft\n    /// @param _isAvailable Is the Upgrade Nft available ?\n    /// @dev This function can only be called by the owner of the contract or the dev wallet\n    function setUpgradeBuyingData(\n        uint256 _upgradeId,\n        uint256 _price,\n        uint256 _amountAvailable,\n        bool _isAvailable\n    ) external {\n        if (msg.sender != owner() && msg.sender != devWallet) {\n            revert RestrictedAccess(msg.sender);\n        }\n        upgradeNftBuyingData[_upgradeId] =\n            UpgradeNft(_isAvailable, _price, _amountAvailable);\n        emit UpgradeNftBuyingDataSetted(\n            _upgradeId, _amountAvailable, _isAvailable\n            );\n    }\n\n    /// @notice Settles Upgrade NFTs purchase price - Batch Transaction\n    /// @param _upgradeIds IDs of the Upgrade NFTs\n    /// @param _prices Purchase prices of the Upgrade NFTs\n    /// @param _amountsAvailable Amounts available of the Upgrade NFTs\n    /// @param _isAvailable Are the Upgrade NFTs available ?\n    /// @dev This function can only be called by the owner of the contract or the dev wallet\n    function setUpgradePriceBatch(\n        uint256[] calldata _upgradeIds,\n        uint256[] calldata _prices,\n        uint256[] calldata _amountsAvailable,\n        bool[] calldata _isAvailable\n    ) external {\n        if (msg.sender != owner() && msg.sender != devWallet) {\n            revert RestrictedAccess(msg.sender);\n        }\n        for (uint256 i = 0; i < _upgradeIds.length; ++i) {\n            upgradeNftBuyingData[_upgradeIds[i]] =\n                UpgradeNft(_isAvailable[i], _prices[i], _amountsAvailable[i]);\n            emit UpgradeNftBuyingDataSetted(\n                _prices[i], _amountsAvailable[i], _isAvailable[i]\n                );\n        }\n    }\n\n    /// @notice Returns the data of a Pack\n    /// @param _packId Id of the Pack\n    /// @return _designURI Upgrade Nft URI\n    /// @return _price Purchase price of the Upgrade NFT\n    /// @return _upgradeIds Upgrade Nfts ID\n    function getPackData(uint256 _packId)\n        external\n        view\n        returns (\n            string memory _designURI, // Design URI\n            uint256 _price, // Price\n            uint256[] memory _upgradeIds // UpgradeIds\n        )\n    {\n        Pack memory spec = packCosts[_packId];\n        _designURI = spec.designURI;\n        _price = spec.price;\n        _upgradeIds = spec.upgradeIds;\n    }\n\n    /// @notice Returns the price of an Upgrade Nft\n    /// @param _upgradeId Id of the upgrade\n    /// @return _price Purchase price of the Upgrade NFT\n    /// @return _amountAvailable Amount of Upgrade NFTs available\n    /// @return _isAvailable If the Upgrade NFT is available\n    function getUpgradeNftBuyingData(uint256 _upgradeId)\n        external\n        view\n        returns (uint256 _price, uint256 _amountAvailable, bool _isAvailable)\n    {\n        _price = upgradeNftBuyingData[_upgradeId].cost;\n        _amountAvailable = upgradeNftBuyingData[_upgradeId].amountAvailable;\n        _isAvailable = upgradeNftBuyingData[_upgradeId].isAvailable;\n    }\n\n    /// @notice Withdraws the money from the contract\n    /// @param _token Address of the token to withdraw\n    /// @dev This function can only be called by the owner or the dev Wallet\n    function withdrawMoney(IERC20Upgradeable _token) external {\n        if (msg.sender != owner() && msg.sender != devWallet) {\n            revert RestrictedAccess(msg.sender);\n        }\n        uint256 balance = _token.balanceOf(address(this));\n        _token.safeTransfer(teamWallet, balance);\n        emit WithdrawMoney(teamWallet, balance);\n    }\n\n    /// @notice Launches the mint procedure of a Bedroom NFT\n    function buyBedroomNft() external nonReentrant {\n        // Token Transfer\n        paymentToken.safeTransferFrom(\n            msg.sender, address(this), bedroomNftPurchaseCost\n        );\n\n        // NFT Minting\n        uint256 tokenId = bedroomNftInstance.mintBedroomNft(msg.sender);\n\n        emit BedroomNftPurchased(msg.sender, tokenId, bedroomNftPurchaseCost);\n    }\n\n    /// @notice Buy an Upgrade Nft\n    /// @param _upgradeId Id of the Upgrade Nft\n    function buyUpgradeNft(uint256 _upgradeId) external nonReentrant {\n        // Verifies that the Nft is available\n        UpgradeNft memory upgradeNft = upgradeNftBuyingData[_upgradeId];\n        if (!upgradeNft.isAvailable || upgradeNft.amountAvailable == 0) {\n            revert UpgradeNftNotAvailable(_upgradeId);\n        }\n\n        // Burns tokens\n        sleepTokenInstance.burnFrom(msg.sender, upgradeNft.cost);\n\n        // Mints Upgrade NFT\n        upgradeNftInstance.mint(_upgradeId, 1, msg.sender);\n\n        // Decreases the amount of Upgrade NFTs available\n        upgradeNftBuyingData[_upgradeId].amountAvailable -= 1;\n\n        emit UpgradeNftPurchased(msg.sender, _upgradeId, upgradeNft.cost);\n    }\n\n    /// @notice Buy a Pack\n    /// @param _packId Id of the Pack\n    function buyPack(uint256 _packId) external nonReentrant {\n        // Gets Pack data\n        Pack memory spec = packCosts[_packId];\n\n        // Token Transfer\n        paymentToken.safeTransferFrom(msg.sender, address(this), spec.price);\n\n        // NFT Minting\n        uint256 bedroomNftId = bedroomNftInstance.mintBedroomNft(msg.sender);\n\n        for (uint256 i = 0; i < spec.upgradeIds.length; ++i) {\n            // NFT Minting\n            upgradeNftInstance.mint(spec.upgradeIds[i], 1, msg.sender);\n\n            upgraderInstance.linkUpgradeNft(\n                msg.sender, bedroomNftId, spec.upgradeIds[i], spec.designURI\n            );\n        }\n\n        emit PackPurchased(msg.sender, _packId, bedroomNftId, spec.price);\n    }\n\n    /// @notice Links an Upgrade Nft\n    /// @param _upgradeNftId Id of the Upgrade NFT\n    /// @param _bedroomNftId Id of the Bedroom NFT\n    /// @param _newDesignURI New Design URI of the Bedroom NFT\n    function linkUpgradeNft(\n        uint256 _upgradeNftId,\n        uint256 _bedroomNftId,\n        string calldata _newDesignURI\n    ) external nonReentrant {\n        upgraderInstance.linkUpgradeNft(\n            msg.sender, _bedroomNftId, _upgradeNftId, _newDesignURI\n        );\n        emit UpgradeNftLinkedToBedroomNft(\n            _bedroomNftId, _upgradeNftId, _newDesignURI\n            );\n    }\n\n    /// @notice Links an Upgrade Nft - Batch transaction\n    /// @param _upgradeNftIds IDs of the Upgrade NFTs\n    /// @param _bedroomNftId Id of the Bedroom NFT\n    /// @param _newDesignURI New Design URI of the Bedroom NFT\n    function linkUpgradeNftBatch(\n        uint256[] calldata _upgradeNftIds,\n        uint256 _bedroomNftId,\n        string calldata _newDesignURI\n    ) external nonReentrant {\n        for (uint256 i = 0; i < _upgradeNftIds.length; ++i) {\n            upgraderInstance.linkUpgradeNft(\n                msg.sender, _upgradeNftIds[i], _bedroomNftId, _newDesignURI\n            );\n            emit UpgradeNftLinkedToBedroomNft(\n                _bedroomNftId, _upgradeNftIds[i], _newDesignURI\n                );\n        }\n    }\n\n    /// @notice Unlinks an Upgrade Nft\n    /// @param _upgradeNftId Id of the Upgrade NFT\n    /// @param _bedroomNftId Id of the Bedroom NFT\n    /// @param _newDesignURI New Design URI of the Bedroom NFT\n    function unlinkUpgradeNft(\n        uint256 _upgradeNftId,\n        uint256 _bedroomNftId,\n        string calldata _newDesignURI\n    ) external nonReentrant {\n        upgraderInstance.unlinkUpgradeNft(\n            msg.sender, _bedroomNftId, _upgradeNftId, _newDesignURI\n        );\n        emit UpgradeNftUnlinkedFromBedroomNft(\n            _bedroomNftId, _upgradeNftId, _newDesignURI\n            );\n    }\n}\n"
    },
    "contracts/Interfaces/ISleep.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Interface of $Sleep Contract\n/// @author Sleepn\n/// @notice $Sleep is the official token of Sleepn\ninterface ISleep is IERC20 {\n    /// @notice Stops the contract\n    /// @dev This function can only be called by the owner of the contract\n    function pause() external;\n\n    /// @notice Starts the contract\n    /// @dev This function can only be called by the owner of the contract\n    function unpause() external;\n\n    /// @notice Mints tokens\n    /// @param _amount Amount of tokens to mint\n    /// @dev This function can only be called by the owner\n    function mint(uint256 _amount) external;\n\n    /// @notice Burns tokens\n    /// @param _account Tokens owner address\n    /// @param _amount Tokens amount to burn\n    function burnFrom(address _account, uint256 _amount) external;\n\n    /// @notice Burns tokens\n    /// @param _amount Tokens amount to burn\n    function burn(uint256 _amount) external;\n}\n"
    },
    "contracts/Interfaces/IHealth.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Interface of $Health Contract\n/// @author Sleepn\n/// @notice $Health is the governance token of Sleepn\ninterface IHealth is IERC20 {\n    /// @notice Stops the contract\n    /// @dev This function can only be called by the owner of the contract\n    function pause() external;\n\n    /// @notice Starts the contract\n    /// @dev This function can only be called by the owner of the contract\n    function unpause() external;\n\n    /// @notice Mints tokens\n    /// @param _to Tokens receiver address\n    /// @param _amount Amount of tokens to mint\n    /// @dev This function can only be called by the owner\n    function mint(address _to, uint256 _amount) external;\n\n    /// @notice Burns tokens\n    /// @param _account Tokens owner address\n    /// @param _amount Tokens amount to burn\n    function burnFrom(address _account, uint256 _amount) external;\n\n    /// @notice Burns tokens\n    /// @param _amount Tokens amount to burn\n    function burn(uint256 _amount) external;\n}\n"
    },
    "contracts/Interfaces/IUpgradeNft.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IBedroomNft.sol\";\n\n/// @title Interface of the Upgrade Nft Contract\n/// @author Sleepn\n/// @notice An update NFT is used to upgrade a Bedroom NFT\ninterface IUpgradeNft is IERC1155 {\n    //// @notice Upgrade NFT Minted Event\n    event UpgradeNftMinted(\n        address indexed owner, uint256 tokenId, uint256 amount\n    );\n    /// @notice Upgrade NFT Data Settled Event\n    event UpgradeNftDataSettled(\n        uint256 indexed tokenId,\n        string _designURI,\n        uint24 _data,\n        uint16 _level,\n        uint16 _levelMin,\n        uint16 _value,\n        uint8 _attributeIndex,\n        uint8 _valueToAdd,\n        uint8 _typeNft\n    );\n    /// @notice Withdraw Money Event\n    event WithdrawMoney(address indexed owner, uint256 amount);\n\n    /// @notice Restricted Access Error - Wrong caller\n    error RestrictedAccess(address caller);\n    /// @notice Different Length Error - Arrays length\n    error DifferentLength();\n    /// @notice Upgrade Nft already linked Error - Upgrade NFTs have to be unlinked before any transfer\n    error UpgradeNftAlreadyLinked(uint256 tokenId);\n    /// @notice State not updated Error - State is not updated in tracker contract\n    error StateNotUpdated();\n\n    /// @notice Returns the  data of a NFT\n    /// @param _tokenId NFT ID\n    /// @return _data NFT additionnal data\n    /// @return _level NFT level\n    /// @return _levelMin NFT level min required\n    /// @return _value NFT value\n    /// @return _attributeIndex Score attribute index\n    /// @return _valueToAdd Value to add to the score\n    /// @return _typeNft NFT Type\n    function getData(uint256 _tokenId)\n        external\n        view\n        returns (\n            uint24 _data,\n            uint16 _level,\n            uint16 _levelMin,\n            uint16 _value,\n            uint8 _attributeIndex,\n            uint8 _valueToAdd,\n            uint8 _typeNft\n        );\n\n    /// @notice Settles the URI of a NFT\n    /// @param _tokenId Id of the NFT\n    /// @param _tokenURI Uri of the NFT\n    /// @dev This function can only be called by the owner of the contract\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI) external;\n\n    /// @notice Settles baseURI as the _baseURI for all tokens\n    /// @param _baseURI Base URI of NFTs\n    /// @dev This function can only be called by the owner of the contract\n    function setBaseURI(string memory _baseURI) external;\n\n    /// @notice Settles dev wallet address\n    /// @param _newDevWalletAddress New dev wallet address\n    /// @dev This function can only be called by the owner of the contract\n    function setDevAddress(address _newDevWalletAddress) external;\n\n    /// @notice Settles the data of a NFT\n    /// @param _tokenId NFT ID\n    /// @param _designURI Upgrade Nft URI\n    /// @param _data Additionnal data (optionnal)\n    /// @param _level Level to add to the Bedroom Nft\n    /// @param _levelMin Bedroom Nft Level min required\n    /// @param _value Upgrade Nft value\n    /// @param _attributeIndex Score involved (optionnal)\n    /// @param _valueToAdd Value to add to the score (optionnal)\n    /// @param _typeNft NFT Type\n    /// @dev This function can only be called by the owner or the dev Wallet\n    function setData(\n        uint256 _tokenId,\n        string memory _designURI,\n        uint96 _data,\n        uint96 _level,\n        uint96 _levelMin,\n        uint96 _value,\n        uint96 _attributeIndex,\n        uint96 _valueToAdd,\n        uint96 _typeNft\n    ) external;\n\n    /// @notice Mints a new Upgrade Nft\n    /// @param _tokenId NFT ID\n    /// @param _amount Amount of tokens\n    /// @param _account Upgrade Nft Owner\n    /// @dev This function can only be called by the owner or the dev Wallet or the Dex contract\n    function mint(uint256 _tokenId, uint256 _amount, address _account)\n        external;\n\n    /// @notice Mints Upgrade Nfts per batch\n    /// @param _tokenIds NFT IDs\n    /// @param _amounts Amount of tokens\n    /// @param _accounts Upgrade Nft Owners\n    /// @dev This function can only be called by the owner or the dev Wallet or the Dex contract\n    function mintBatch(\n        uint256[] calldata _tokenIds,\n        uint256[] calldata _amounts,\n        address[] calldata _accounts\n    ) external;\n\n    /// @notice Withdraws the money from the contract\n    /// @param _token Address of the token to withdraw\n    /// @dev This function can only be called by the owner or the dev Wallet\n    function withdrawMoney(IERC20 _token) external;\n}\n"
    },
    "contracts/Interfaces/ITracker.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n/// @title Interface of the Tracker Contract\n/// @author Sleepn\n/// @notice The Tracker Contract is used to track the NFTs\n\ninterface ITracker {\n    /// @dev Struct to store the NFT IDs of a user\n    struct NftsID {\n        EnumerableSet.UintSet bedroomNfts;\n        EnumerableSet.UintSet upgradeNfts;\n    }\n    /// @dev Struct to store the amounts owned of a NFT ID\n    struct UpgradeNft {\n        uint256 amountOwned;\n        uint256 amountUsed;\n        EnumerableSet.UintSet bedroomNftIds;\n    }\n\n    /// @notice Restricted Access Error - Wrong caller\n    error RestrictedAccess(address caller);\n    /// @notice Invalid NFT ID Error - NFT ID is invalid\n    error IdAlreadyUsed(uint256 tokenId);\n\n    /// @notice BedroomNft ID Linked To Wallet Event\n    event BedroomNftLinkedToWallet(\n        uint256 indexed bedroomNftId,\n        address indexed owner\n    );\n    /// @notice BedroomNft ID Unlinked From Wallet Event\n    event BedroomNftUnlinkedFromWallet(\n        uint256 indexed bedroomNftId,\n        address indexed owner\n    );\n    /// @notice UpgradeNft ID Linked To Wallet Event\n    event UpgradeNftLinkedToWallet(\n        uint256 indexed upgradeNftId,\n        address indexed owner\n    );\n    /// @notice UpgradeNft ID Unlinked From Wallet Event\n    event UpgradeNftUnlinkedFromWallet(\n        uint256 indexed upgradeNftId,\n        address indexed owner\n    );\n    /// @notice UpgradeNft ID Linked To BedroomNft ID Event\n    event UpgradeNftLinkedToBedroomNft(\n        uint256 indexed upgradeNftId,\n        uint256 indexed bedroomNftId\n    );\n    /// @notice UpgradeNft ID Unlinked From BedroomNft ID Event\n    event UpgradeNftUnlinkedFromBedroomNft(\n        uint256 indexed upgradeNftId,\n        uint256 indexed bedroomNftId\n    );\n\n    /// @notice Gets the NFTs owned by an address\n    /// @param _owner The address of the owner\n    /// @return _bedroomNfts The Bedroom NFTs owned by the address\n    /// @return _upgradeNfts The Upgrade NFTs owned by the address\n    function getNftsID(address _owner)\n        external\n        view\n        returns (uint256[] memory _bedroomNfts, uint256[] memory _upgradeNfts);\n\n    /// @notice Adds a Bedroom NFT ID to the tracker\n    /// @param _owner The owner of the NFT\n    /// @param _tokenId The NFT ID\n    /// @return stateUpdated Returns true if the update worked\n    function addBedroomNft(address _owner, uint256 _tokenId)\n        external\n        returns (bool);\n\n    /// @notice Remove a Bedroom NFT from the tracker\n    /// @param _owner The owner of the Bedroom NFT\n    /// @param _newOwner The new owner of the Bedroom NFT\n    /// @param _tokenId The ID of the Bedroom NFT\n    /// @return stateUpdated Returns true if the update worked\n    function removeBedroomNft(\n        address _owner,\n        address _newOwner,\n        uint256 _tokenId\n    ) external returns (bool);\n\n    /// @notice Returns true if the owner of the bedroom NFT is the wallet address\n    /// @param _tokenId The ID of the bedroom NFT\n    /// @param _wallet The wallet address of the owner\n    /// @return isOwner True if the owner of the bedroom NFT is the wallet address\n    function isBedroomNftOwner(uint256 _tokenId, address _wallet)\n        external\n        view\n        returns (bool isOwner);\n\n    /// @notice Returns the amount of bedroom NFTs owned by an owner\n    /// @param _owner The owner of the bedroom NFTs\n    /// @return nftsAmount The amount of bedroom NFTs owned by the owner\n    function getBedroomNftsAmount(address _owner)\n        external\n        view\n        returns (uint256 nftsAmount);\n\n    /// @notice Adds an upgrade NFT ID to the settled upgrade NFT IDs\n    /// @param _tokenId The ID of the upgrade NFT\n    function settleUpgradeNftData(uint256 _tokenId) external;\n\n    /// @notice Returns the upgrade NFT IDs that have been settled\n    /// @return nftIdsSettled The upgrade NFT IDs that have been settled\n    function getUpgradeNftSettled()\n        external\n        view\n        returns (uint256[] memory nftIdsSettled);\n\n    /// @notice Returns true if the Upgrade NFT ID is settled\n    /// @param _tokenId The ID of the Upgrade NFT\n    /// @return isSettled True if the Upgrade NFT ID is settled\n    function isIdSettled(uint256 _tokenId)\n        external\n        view\n        returns (bool isSettled);\n\n    /// @notice Adds an upgrade NFT to the tracker\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _tokenId The ID of the upgrade NFT\n    /// @return stateUpdated Returns true if the update worked\n    function addUpgradeNft(address _owner, uint256 _tokenId)\n        external\n        returns (bool);\n\n    /// @notice Removes an upgrade NFT from the tracker\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _tokenId The ID of the upgrade NFT\n    /// @return stateUpdated Returns true if the update worked\n    function removeUpgradeNft(address _owner, uint256 _tokenId)\n        external\n        returns (bool);\n\n    /// @notice Returns true if the given address is the owner of the given Upgrade NFT\n    /// @param _tokenId The ID of the Upgrade NFT to check\n    /// @param _wallet The address to check\n    /// @return isOwner True if the given address is the owner of the given Upgrade NFT\n    function isUpgradeNftOwner(uint256 _tokenId, address _wallet)\n        external\n        view\n        returns (bool isOwner);\n\n    /// @notice Returns the amount of Upgrade NFTs owned by a wallet\n    /// @param _owner The owner wallet address\n    /// @return nftsAmount The amount of Upgrade NFTs owned by the wallet\n    function getUpgradeNftsAmount(address _owner)\n        external\n        view\n        returns (uint256 nftsAmount);\n\n    /// @notice Returns the amounts of a specific Upgrade NFT owned by a specific wallet\n    /// @param _owner The owner wallet address\n    /// @param _tokenId The ID of the Upgrade NFT\n    /// @return amountOwned The amount of Upgrade NFTs owned by the wallet\n    /// @return amountUsed The amount of Upgrade NFTs used by the wallet\n    function getUpgradeNftAmounts(address _owner, uint256 _tokenId)\n        external\n        view\n        returns (uint256 amountOwned, uint256 amountUsed);\n\n    /// @notice Returns the owners of a specified Upgrade NFT\n    /// @param _tokenId The upgrade NFT ID\n    /// @return owners Owners of the specified Upgrade NFT\n    function getUpgradeNftOwners(uint256 _tokenId)\n        external\n        view\n        returns (address[] memory owners);\n\n    /// @notice Links an upgrade NFT to a Bedroom NFT\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @param _upgradeNftId The ID of the upgrade NFT\n    /// @return stateUpdated Returns true if the update worked\n    function linkUpgradeNft(\n        address _owner,\n        uint256 _bedroomNftId,\n        uint256 _upgradeNftId\n    ) external returns (bool);\n\n    /// @notice Unlinks an upgrade NFT to a Bedroom NFT\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @param _upgradeNftId The ID of the upgrade NFT\n    /// @return stateUpdated Returns true if the update worked\n    function unlinkUpgradeNft(\n        address _owner,\n        uint256 _bedroomNftId,\n        uint256 _upgradeNftId\n    ) external returns (bool);\n\n    /// @notice Returns the upgrade NFTs linked to a Bedroom NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @return upgradeNfts The upgrade NFTs linked to the Bedroom NFT\n    function getUpgradeNfts(uint256 _bedroomNftId)\n        external\n        view\n        returns (uint256[] memory upgradeNfts);\n}\n"
    },
    "contracts/Interfaces/IBedroomNft.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IUpgradeNft.sol\";\n\n/// @title Interface of the Bedroom NFT Contract\n/// @author Sleepn\n/// @notice Bedroom NFT is the main NFT of Sleepn app\ninterface IBedroomNft is IERC1155 {\n    /// @notice Scores of a Bedroom NFT\n    struct NftSpecifications {\n        address owner;\n        uint64 scores;\n        uint256 level;\n        uint256 value;\n    }\n\n    /// @notice Emits an event when a Bedroom NFT is minted\n    event BedroomNftMinted(\n        address indexed owner,\n        uint256 indexed requestID,\n        uint256 tokenId,\n        uint16 ambiance,\n        uint16 quality,\n        uint16 luck,\n        uint16 comfortability\n    );\n    /// @notice Emits an event when a Bedroom NFT Score is updated\n    event BedroomNftUpdated(\n        address indexed owner, uint256 indexed tokenId, uint256 timestamp\n    );\n    /// @notice Returned Request ID, Invoker and Token ID\n    event RequestedRandomness(\n        uint256 indexed requestId, address invoker, uint256 indexed tokenId\n    );\n    /// @notice Returned Random Numbers Event, Invoker and Token ID\n    event ReturnedRandomness(\n        uint256[] randomWords,\n        uint256 indexed requestId,\n        uint256 indexed tokenId\n    );\n    /// @notice Base URI Changed Event\n    event BaseURIChanged(string baseURI);\n    /// @notice Chainlink Data Updated Event\n    event ChainlinkDataUpdated(\n        uint32 callbackGasLimit,\n        uint64 subscriptionId,\n        bytes32 keyHash,\n        uint16 requestConfirmations\n    );\n    /// @notice Withdraw Money Event\n    event WithdrawMoney(address indexed owner, uint256 amount);\n\n    /// @notice Restricted Access Error - Wrong caller\n    error RestrictedAccess(address caller);\n\n    /// @notice Returns the number of Bedroom NFTs in existence\n    /// @return nftsNumber Representing the number of Bedroom NFTs in existence\n    function getNftsNumber() external view returns (uint256 nftsNumber);\n\n    /// @notice Returns the specifications of a Bedroom NFT\n    /// @param _tokenId Id of the Bedroom NFT\n    /// @return nftSpecifications Specifications of the Bedroom NFT\n    function getSpecifications(uint256 _tokenId)\n        external\n        view\n        returns (NftSpecifications memory nftSpecifications);\n\n    /// @notice Returns the specifications of some Bedroom NFTs\n    /// @param _tokenIds Ids of the Bedroom NFTs\n    /// @return nftSpecifications Specifications of the Bedroom NFTs\n    function getSpecificationsBatch(uint256[] calldata _tokenIds)\n        external\n        view\n        returns (NftSpecifications[] memory nftSpecifications);\n\n    /// @notice Returns the data of a NFT\n    /// @param _tokenId The id of the NFT\n    /// @return _ambiance Ambiance Score\n    /// @return _quality Quality Score\n    /// @return _luck Luck Score\n    /// @return _comfortability Comfortability Score\n    /// @return _owner NFT owner address\n    /// @return _level NFT level\n    /// @return _value NFT value\n    function getData(uint256 _tokenId)\n        external\n        view\n        returns (\n            uint16 _ambiance,\n            uint16 _quality,\n            uint16 _luck,\n            uint16 _comfortability,\n            address _owner,\n            uint256 _level,\n            uint256 _value\n        );\n\n    /// @notice Returns the data of some Bedroom NFTs\n    /// @param _tokenIds Nfts IDs\n    /// @return _ambiance Ambiance Score\n    /// @return _quality Quality Score\n    /// @return _luck Luck Score\n    /// @return _comfortability Comfortability Score\n    /// @return _owners NFT owner address\n    /// @return _levels NFT level\n    /// @return _values NFT value\n    function getDataBatch(uint256[] calldata _tokenIds)\n        external\n        view\n        returns (\n            uint16[] memory _ambiance,\n            uint16[] memory _quality,\n            uint16[] memory _luck,\n            uint16[] memory _comfortability,\n            address[] memory _owners,\n            uint256[] memory _levels,\n            uint256[] memory _values\n        );\n\n    /// @notice Updates chainlink variables\n    /// @param _callbackGasLimit Callback Gas Limit\n    /// @param _subscriptionId Chainlink subscription Id\n    /// @param _keyHash Chainlink Key Hash\n    /// @param _requestConfirmations Number of request confirmations\n    /// @dev This function can only be called by the owner of the contract\n    function updateChainlink(\n        uint32 _callbackGasLimit,\n        uint64 _subscriptionId,\n        bytes32 _keyHash,\n        uint16 _requestConfirmations\n    ) external;\n\n    /// @notice Settles initial NFT Design URI\n    /// @param _initialURI New URI\n    /// @dev This function can only be called by the owner of the contract\n    function setInitialDesignURI(string calldata _initialURI)\n        external;\n\n    /// @notice Settles the URI of a NFT\n    /// @param _tokenId Id of the NFT\n    /// @param _tokenURI Uri of the NFT\n    /// @dev This function can only be called by the owner of the contract\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI)\n        external;\n\n    /// Settles baseURI as the _baseURI for all tokens\n    /// @param _baseURI Base URI of NFTs\n    /// @dev This function can only be called by the owner of the contract\n    function setBaseURI(string memory _baseURI) external;\n\n    /// @notice Withdraws the money from the contract\n    /// @param _token Address of the token to withdraw\n    /// @dev This function can only be called by the owner or the dev Wallet\n    function withdrawMoney(IERC20 _token) external;\n\n    /// @notice Launches the procedure to create an NFT\n    /// @param _owner Owner of the NFT\n    /// @return _tokenId NFT ID\n    /// @dev This function can only be called by Dex Contract\n    function mintBedroomNft(address _owner)\n        external\n        returns (uint256 _tokenId);\n\n    /// @notice Launches the procedure to create an NFT - Batch Transaction\n    /// @param _owners Nfts Owners\n    /// @return _tokenIds NFT IDs\n    /// @dev This function can only be called by Dex Contract\n    function mintBedroomNfts(address[] calldata _owners)\n        external\n        returns (uint256[] memory _tokenIds);\n\n    /// @notice Updates a Bedroom NFT\n    /// @param _tokenId Id of the NFT\n    /// @param _newValue value of the NFT\n    /// @param _newLevel level of the NFT\n    /// @param _newScores Scores of the NFT\n    /// @param _newDesignURI Design URI of the NFT\n    function updateBedroomNft(\n        uint256 _tokenId,\n        uint256 _newValue,\n        uint256 _newLevel,\n        uint64 _newScores,\n        string memory _newDesignURI\n    ) external;\n}\n"
    },
    "contracts/Interfaces/IUpgrader.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\n/// @title Interface of the Upgrader Contract\n/// @author Sleepn\n/// @notice The Upgrader Contract is used to upgrade a Bedroom NFT\ninterface IUpgrader {\n    /// @notice Upgrade NFT linked to a Bedroom NFT Event\n    event UpgradeNftLinked(\n        uint256 indexed bedroomNftId,\n        uint256 indexed upgradeNftId,\n        address owner\n    );\n    /// @notice Upgrade NFT unlinked from a Bedroom NFT Event\n    event UpgradeNftUnlinked(\n        uint256 indexed bedroomNftId,\n        uint256 indexed upgradeNftId,\n        address owner\n    );\n\n    /// @notice Score cannot be upgraded Error - Score cannot be greater than 100\n    error ScoreCannotBeGreaterThan100(uint16 valueToAdd);\n    /// @notice NFT not owned Error - Upgrade NFT is not owned by the user\n    error NftNotOwned(uint256 tokenId, address caller);\n    /// @notice Upgrade NFT already linked Error - Upgrade NFT is already linked to a Bedroom NFT\n    error IsAlreadyLinked(uint256 tokenId);\n    /// @notice Upgrade NFT is not linked Error - Upgrade NFT is not linked to a Bedroom NFT\n    error IsNotLinked(uint256 tokenId);\n    /// @notice Restricted Access Error - Wrong caller\n    error RestrictedAccess(address caller);\n    /// @notice Level too low Error - Level is too low to upgrade\n    error LevelTooLow(uint16 levelMin, uint256 bedroomNftLevel);\n    /// @notice State not updated Error - State is not updated in tracker contract\n    error StateNotUpdated();\n\n    /// @notice Links an upgrade NFT to a Bedroom NFT\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @param _upgradeNftId The ID of the upgrade NFT\n    /// @param _designURI The new design URI of the bedroom NFT\n    function linkUpgradeNft(\n        address _owner,\n        uint256 _bedroomNftId,\n        uint256 _upgradeNftId,\n        string memory _designURI\n    ) external;\n\n    /// @notice Uninks an upgrade NFT from a Bedroom NFT\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @param _upgradeNftId The ID of the upgrade NFT\n    /// @param _designURI The new design URI of the bedroom NFT\n    function unlinkUpgradeNft(\n        address _owner,\n        uint256 _bedroomNftId,\n        uint256 _upgradeNftId,\n        string memory _designURI\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}