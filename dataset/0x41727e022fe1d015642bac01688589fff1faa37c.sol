{{
  "language": "Solidity",
  "sources": {
    "contracts/strategies/gravity/mainnet/StrategyMaximizer_SUSHI.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.6;\r\n\r\nimport \"../GravityMaximizer.sol\";\r\n\r\ncontract StrategyMaximizer_SUSHI is GravityMaximizer {\r\n\r\n    address sushi_diff;\r\n\r\n    function initializeStrategy(\r\n        address _store,\r\n        address _vault\r\n    ) public initializer {\r\n        address farmContract = address(0x0Dbe8999Cde32164340411897a7DD73654F82571);\r\n        address sushi = address(0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a);\r\n        address weth = address(0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619);\r\n        address gfi = address(0x874e178A2f3f3F9d34db862453Cd756E7eAb0381);\r\n        address bgfi_weth_lp = address(0xb37e5539C66b207302BcBf1A53A34dD69D9e27c2);\r\n        __Strategy_init(\r\n            _store,\r\n            sushi,\r\n            _vault,\r\n            farmContract,\r\n            gfi,\r\n            bgfi_weth_lp\r\n        );\r\n        routes[gfi] = [gfi];\r\n        routes[weth] = [gfi, weth];\r\n    }\r\n}"
    },
    "contracts/strategies/gravity/GravityMaximizer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../../interfaces/IStrategy.sol\";\r\nimport \"../../interfaces/IVault.sol\";\r\nimport \"../../interfaces/swaps/IUniswapV2Pair.sol\";\r\nimport \"../../interfaces/swaps/IUniswapV2Router02.sol\";\r\nimport \"../BaseUpgradeableStrategy.sol\";\r\nimport \"./interfaces/IGFIFarm.sol\";\r\n\r\n/// @title Gravity Maximizer Strategy\r\n/// @author Chainvisions\r\n/// @notice Maximizer strategy for Gravity Finance.\r\n\r\ncontract GravityMaximizer is BaseUpgradeableStrategy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant gravityRouter = address(0x57dE98135e8287F163c59cA4fF45f1341b680248);\r\n    mapping(address => address[]) public routes;\r\n\r\n    constructor() BaseUpgradeableStrategy() {}\r\n\r\n    function __Strategy_init(\r\n        address _storage,\r\n        address _underlying,\r\n        address _vault,\r\n        address _stakingContract,\r\n        address _rewardToken,\r\n        address _targetVault\r\n    )\r\n    public initializer {\r\n        BaseUpgradeableStrategy.initialize(\r\n            _storage,\r\n            _underlying,\r\n            _vault,\r\n            _stakingContract,\r\n            _rewardToken,\r\n            true,\r\n            1e16,\r\n            12 hours\r\n        );\r\n        _setTargetVault(_targetVault);\r\n\r\n        address targetVaultUnderlying = IVault(targetVault()).underlying();\r\n\r\n        routes[IUniswapV2Pair(targetVaultUnderlying).token0()] = new address[](0);\r\n        routes[IUniswapV2Pair(targetVaultUnderlying).token1()] = new address[](0);\r\n    }\r\n\r\n    /*\r\n    * Harvests yields generated and reinvests into the underlying. This\r\n    * function call will fail if deposits are paused.\r\n    */\r\n    function doHardWork() external onlyNotPausedInvesting restricted {\r\n        IGFIFarm(rewardPool()).deposit(0);\r\n        _liquidateReward();\r\n        _notifyMaximizerReward();\r\n        _investAllUnderlying();\r\n    }\r\n\r\n    /*\r\n    * Transfers out tokens that the contract is holding. One thing to note\r\n    * is that this contract exposes a list of tokens that cannot be salvaged. \r\n    * This is to ensure that a malicious admin cannot steal from the vault users.\r\n    */\r\n    function salvage(address recipient, address token, uint256 amount) external restricted {\r\n        require(!unsalvagableTokens(token), \"Strategy: Unsalvagable token\");\r\n        IERC20(token).transfer(recipient, amount);\r\n    }\r\n\r\n    function finalizeUpgrade() external onlyGovernance {\r\n        _finalizeUpgrade();\r\n        address targetVaultUnderlying = IVault(targetVault()).underlying();\r\n        routes[IUniswapV2Pair(targetVaultUnderlying).token0()] = new address[](0);\r\n        routes[IUniswapV2Pair(targetVaultUnderlying).token1()] = new address[](0);\r\n    }\r\n\r\n    /*\r\n    * Current amount of underlying invested.\r\n    */\r\n    function investedUnderlyingBalance() external view returns (uint256) {\r\n        if (rewardPool() == address(0)) {\r\n            return IERC20(underlying()).balanceOf(address(this));\r\n        }\r\n        return (_rewardPoolStake() + IERC20(underlying()).balanceOf(address(this)));\r\n    }\r\n\r\n    /*\r\n    * Withdraws all of the underlying to the vault. This is used in the case\r\n    * of a problem with the strategy or a bug that compromises the safety of the\r\n    * vault's users.\r\n    */\r\n    function withdrawAllToVault() public restricted {\r\n        if(rewardPool() != address(0)) {\r\n            IGFIFarm(rewardPool()).withdraw(_rewardPoolStake());\r\n        }\r\n        _liquidateReward();\r\n        IERC20(underlying()).safeTransfer(vault(), IERC20(underlying()).balanceOf(address(this)));\r\n    }\r\n\r\n    /*\r\n    * Withdraws `amount` of the underlying to the vault.\r\n    */\r\n    function withdrawToVault(uint256 amount) public restricted {\r\n        // Typically there wouldn't be any amount here\r\n        // however, it is possible because of the emergencyExit\r\n        if(amount > IERC20(underlying()).balanceOf(address(this))){\r\n            // While we have the check above, we still using SafeMath below\r\n            // for the peace of mind (in case something gets changed in between)\r\n            uint256 needToWithdraw = (amount - IERC20(underlying()).balanceOf(address(this)));\r\n            IGFIFarm(rewardPool()).withdraw(Math.min(_rewardPoolStake(), needToWithdraw));\r\n        }\r\n\r\n        IERC20(underlying()).safeTransfer(vault(), amount);\r\n    }\r\n\r\n    /*\r\n    * Performs an emergency exit from the farming contract and\r\n    * pauses the strategy.\r\n    */\r\n    function emergencyExit() public onlyGovernance {\r\n        IGFIFarm(rewardPool()).emergencyWithdraw();\r\n        _setPausedInvesting(true);\r\n    }\r\n\r\n    /*\r\n    * Re-enables investing into the strategy contract.\r\n    */\r\n    function continueInvesting() public onlyGovernance {\r\n        _setPausedInvesting(false);\r\n    }\r\n\r\n    function setSell(bool _sell) public onlyGovernance {\r\n        _setSell(_sell);\r\n    }\r\n\r\n    function setSellFloor(uint256 _sellFloor) public onlyGovernance {\r\n        _setSellFloor(_sellFloor);\r\n    }\r\n\r\n    function depositArbCheck() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function unsalvagableTokens(address token) public view returns (bool) {\r\n        return (token == underlying() || token == rewardToken());\r\n    }\r\n\r\n    function targetVault() public view returns (address) {\r\n        return _getAddress(\"targetVault\");\r\n    }\r\n\r\n    function _investAllUnderlying() internal onlyNotPausedInvesting {\r\n        uint256 underlyingBalance = IERC20(underlying()).balanceOf(address(this));\r\n        if(underlyingBalance > 0) {\r\n            IERC20(underlying()).safeApprove(rewardPool(), 0);\r\n            IERC20(underlying()).safeApprove(rewardPool(), underlyingBalance);\r\n            IGFIFarm(rewardPool()).deposit(underlyingBalance);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Liquidates the reward and collects fees for BELUGA stakers.\r\n    */\r\n    function _liquidateReward() internal {\r\n        uint256 rewardBalance = IERC20(rewardToken()).balanceOf(address(this));\r\n        if(!sell() || rewardBalance < sellFloor()) {\r\n            emit ProfitsNotCollected(sell(), rewardBalance < sellFloor());\r\n            return;\r\n        }\r\n\r\n        notifyProfitInRewardToken(rewardBalance);\r\n\r\n        rewardBalance = IERC20(rewardToken()).balanceOf(address(this));\r\n\r\n        address targetVaultUnderlying = IVault(targetVault()).underlying();\r\n\r\n        address token0 = IUniswapV2Pair(targetVaultUnderlying).token0();\r\n        address token1 = IUniswapV2Pair(targetVaultUnderlying).token1();\r\n\r\n        uint256 toToken0 = (rewardBalance / 2);\r\n        uint256 toToken1 = (rewardBalance - toToken0);\r\n\r\n        uint256 token0Amount;\r\n        uint256 token1Amount;\r\n\r\n        if(routes[token0].length > 1) {\r\n            IERC20(rewardToken()).safeApprove(gravityRouter, 0);\r\n            IERC20(rewardToken()).safeApprove(gravityRouter, toToken0);\r\n            uint256[] memory amounts = IUniswapV2Router02(gravityRouter).swapExactTokensForTokens(toToken0, 0, routes[token0], address(this), (block.timestamp + 600));\r\n            token0Amount = amounts[(amounts.length - 1)];\r\n        } else {\r\n            token0Amount = toToken0;\r\n        }\r\n\r\n        if(routes[token1].length > 1) {\r\n            IERC20(rewardToken()).safeApprove(gravityRouter, 0);\r\n            IERC20(rewardToken()).safeApprove(gravityRouter, toToken1);\r\n            uint256[] memory amounts = IUniswapV2Router02(gravityRouter).swapExactTokensForTokens(toToken1, 0, routes[token1], address(this), (block.timestamp + 600));\r\n            token1Amount = amounts[(amounts.length - 1)];\r\n        } else {\r\n            token1Amount = toToken1;\r\n        }\r\n\r\n        IERC20(token0).safeApprove(gravityRouter, 0);\r\n        IERC20(token0).safeApprove(gravityRouter, token0Amount);\r\n\r\n        IERC20(token1).safeApprove(gravityRouter, 0);\r\n        IERC20(token1).safeApprove(gravityRouter, token1Amount);\r\n\r\n        IUniswapV2Router02(gravityRouter).addLiquidity(token0, token1, token0Amount, token1Amount, 0, 0, address(this), (block.timestamp + 600));\r\n    }\r\n\r\n    function _notifyMaximizerReward() internal {\r\n        address targetVaultUnderlying = IVault(targetVault()).underlying();\r\n        uint256 targetUnderlyingBalance = IERC20(targetVaultUnderlying).balanceOf(address(this));\r\n\r\n        if(targetUnderlyingBalance > 0) {\r\n            IERC20(targetVaultUnderlying).safeApprove(targetVault(), 0);\r\n            IERC20(targetVaultUnderlying).safeApprove(targetVault(), targetUnderlyingBalance);\r\n            IVault(targetVault()).deposit(targetUnderlyingBalance);\r\n\r\n            uint256 targetVaultBalance = IERC20(targetVault()).balanceOf(address(this));\r\n            IERC20(targetVault()).safeTransfer(vault(), targetVaultBalance);\r\n            IVault(vault()).notifyRewardAmount(targetVault(), targetVaultBalance);\r\n        }\r\n    }\r\n\r\n    function _setTargetVault(address _address) internal {\r\n        _setAddress(\"targetVault\", _address);\r\n    }\r\n\r\n    function _rewardPoolStake() internal view returns (uint256 stake) {\r\n        (stake, ) = IGFIFarm(rewardPool()).userInfo(address(this));\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute.\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStrategy {\r\n\r\n    function unsalvagableTokens(address tokens) external view returns (bool);\r\n    \r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function vault() external view returns (address);\r\n\r\n    function withdrawAllToVault() external;\r\n    function withdrawToVault(uint256 amount) external;\r\n\r\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\r\n\r\n    // should only be called by controller\r\n    function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n    function doHardWork() external;\r\n    function depositArbCheck() external view returns(bool);\r\n}"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IVault {\r\n    function underlyingBalanceInVault() external view returns (uint256);\r\n    function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n    function underlying() external view returns (address);\r\n    function strategy() external view returns (address);\r\n\r\n    function setStrategy(address) external;\r\n    function setVaultFractionToInvest(uint256) external;\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function withdrawAll() external;\r\n    function withdraw(uint256) external;\r\n\r\n    function getReward() external;\r\n    function getRewardByToken(address) external;\r\n    function notifyRewardAmount(address, uint256) external;\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n    function underlyingBalanceWithInvestmentForHolder(address) view external returns (uint256);\r\n\r\n    // hard work should be callable only by the controller (by the hard worker) or by governance\r\n    function doHardWork() external;\r\n    function rebalance() external;\r\n}"
    },
    "contracts/interfaces/swaps/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "contracts/interfaces/swaps/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\nimport './IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"
    },
    "contracts/strategies/BaseUpgradeableStrategy.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {IController} from \"../interfaces/IController.sol\";\r\nimport {ControllableInit} from \"../ControllableInit.sol\";\r\nimport {BaseUpgradeableStrategyStorage} from \"./BaseUpgradeableStrategyStorage.sol\";\r\n\r\ncontract BaseUpgradeableStrategy is ControllableInit, BaseUpgradeableStrategyStorage {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event ProfitsNotCollected(bool sell, bool floor);\r\n    event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\r\n\r\n    modifier restricted {\r\n        require(msg.sender == vault() || msg.sender == controller()\r\n        || msg.sender == governance(),\r\n        \"Strategy: The sender has to be the controller, governance, or vault\");\r\n        _;\r\n    }\r\n\r\n    // This is only used in `investAllUnderlying()`.\r\n    // The user can still freely withdraw from the strategy.\r\n    modifier onlyNotPausedInvesting {\r\n        require(!pausedInvesting(), \"Strategy: Action blocked as the strategy is in emergency state\");\r\n        _;\r\n    }\r\n\r\n    // Allows for actions on the smart contract to be performed \r\n    // by either Governance or Beluga's Multisig, allowing \r\n    // for the multisig to take action in the case of an emergency and such.\r\n    modifier onlyGovernanceOrMultisig {\r\n        require(msg.sender == governance() || governance() == multisig(), \"Strategy: Caller not Governance or Multisig\");\r\n        _;\r\n    }\r\n\r\n    constructor() BaseUpgradeableStrategyStorage() {}\r\n\r\n    /// @notice Initializes the strategy proxy.\r\n    /// @param _storage Address of the storage contract.\r\n    /// @param _underlying Underlying token of the strategy.\r\n    /// @param _vault Address of the strategy's vault.\r\n    /// @param _rewardPool Address of the reward pool.\r\n    /// @param _rewardToken Address of the reward token.\r\n    /// @param _sell Whether or not `_rewardToken` should be liquidated.\r\n    /// @param _sellFloor Minimum amount of `_rewardToken` to liquidate rewards.\r\n    /// @param _timelockDelay Timelock for changing the proxy's implementation. \r\n    function initialize(\r\n        address _storage,\r\n        address _underlying,\r\n        address _vault,\r\n        address _rewardPool,\r\n        address _rewardToken,\r\n        bool _sell,\r\n        uint256 _sellFloor,\r\n        uint256 _timelockDelay\r\n    ) public initializer {\r\n        __Controllable_init(_storage);\r\n        _setUnderlying(_underlying);\r\n        _setVault(_vault);\r\n        _setRewardPool(_rewardPool);\r\n        _setRewardToken(_rewardToken);\r\n\r\n        _setSell(_sell);\r\n        _setSellFloor(_sellFloor);\r\n        _setTimelockDelay(_timelockDelay);\r\n        _setPausedInvesting(false);\r\n    }\r\n\r\n    /// @notice Collects protocol fees and sends them to the Controller.\r\n    /// @param _rewardBalance The amount of rewards generated that is to have fees taken from.\r\n    function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\r\n        if( _rewardBalance > 0 ){\r\n            uint256 feeAmount = (_rewardBalance * IController(controller()).profitSharingNumerator()) / IController(controller()).profitSharingDenominator();\r\n            emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\r\n            IERC20(rewardToken()).safeApprove(controller(), 0);\r\n            IERC20(rewardToken()).safeApprove(controller(), feeAmount);\r\n\r\n            IController(controller()).notifyFee(\r\n                rewardToken(),\r\n                feeAmount\r\n            );\r\n        } else {\r\n            emit ProfitLogInReward(0, 0, block.timestamp);\r\n        }\r\n    }\r\n\r\n    /// @notice Determines if the proxy can be upgraded.\r\n    /// @return If an upgrade is possible and the address of the new implementation\r\n    function shouldUpgrade() external view returns (bool, address) {\r\n        return (\r\n            nextImplementationTimestamp() != 0\r\n                && block.timestamp > nextImplementationTimestamp()\r\n                && nextImplementation() != address(0),\r\n            nextImplementation()\r\n        );\r\n    }\r\n\r\n    /// @notice Schedules an upgrade to the strategy proxy.\r\n    function scheduleUpgrade(address _impl) public onlyGovernance {\r\n        _setNextImplementation(_impl);\r\n        _setNextImplementationTimestamp(block.timestamp + timelockDelay());\r\n    }\r\n\r\n    function _finalizeUpgrade() internal {\r\n        _setNextImplementation(address(0));\r\n        _setNextImplementationTimestamp(0);\r\n    }\r\n}"
    },
    "contracts/strategies/gravity/interfaces/IGFIFarm.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IGFIFarm {\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _amount) external;\r\n    function emergencyWithdraw() external;\r\n    function userInfo(address _user) external view returns (uint256, uint256);\r\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/swaps/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"
    },
    "contracts/interfaces/IController.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IController {\r\n    function whitelist(address) external view returns (bool);\r\n    function feeExemptAddresses(address) external view returns (bool);\r\n    function greyList(address) external view returns (bool);\r\n    function keepers(address) external view returns (bool);\r\n\r\n    function doHardWork(address) external;\r\n    function batchDoHardWork(address[] memory) external;\r\n\r\n    function salvage(address, uint256) external;\r\n    function salvageStrategy(address, address, uint256) external;\r\n\r\n    function notifyFee(address, uint256) external;\r\n    function profitSharingNumerator() external view returns (uint256);\r\n    function profitSharingDenominator() external view returns (uint256);\r\n\r\n    function profitCollector() external view returns (address);\r\n}"
    },
    "contracts/ControllableInit.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport {GovernableInit, Storage} from \"./GovernableInit.sol\";\r\n\r\ncontract ControllableInit is GovernableInit {\r\n\r\n  constructor() {}\r\n\r\n  function __Controllable_init(address _storage) public initializer {\r\n    __Governable_init_(_storage);\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(Storage(_storage()).isController(msg.sender), \"Controllable: Not a controller\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyControllerOrGovernance(){\r\n    require((Storage(_storage()).isController(msg.sender) || Storage(_storage()).isGovernance(msg.sender)),\r\n      \"Controllable: The caller must be controller or governance\");\r\n    _;\r\n  }\r\n\r\n  function controller() public view returns (address) {\r\n    return Storage(_storage()).controller();\r\n  }\r\n}"
    },
    "contracts/strategies/BaseUpgradeableStrategyStorage.sol": {
      "content": "\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.6;\r\n\r\ncontract BaseUpgradeableStrategyStorage {\r\n    mapping(bytes32 => uint256) private uint256Storage;\r\n    mapping(bytes32 => address) private addressStorage;\r\n    mapping(bytes32 => bool) private boolStorage;\r\n\r\n    function underlying() public view returns (address) {\r\n        return _getAddress(\"underlying\");\r\n    }\r\n\r\n    function vault() public view returns (address) {\r\n        return _getAddress(\"vault\");\r\n    }\r\n\r\n    function rewardPool() public view returns (address) {\r\n        return _getAddress(\"rewardPool\");\r\n    }\r\n\r\n    function rewardToken() public view returns (address) {\r\n        return _getAddress(\"rewardToken\");\r\n    }\r\n\r\n    function sell() public view returns (bool) {\r\n        return _getBool(\"sell\");\r\n    }\r\n\r\n    function sellFloor() public view returns (uint256) {\r\n        return _getUint256(\"sellFloor\");\r\n    }\r\n\r\n    function pausedInvesting() public view returns (bool) {\r\n        return _getBool(\"pausedInvesting\");\r\n    }\r\n\r\n    function nextImplementation() public view returns (address) {\r\n        return _getAddress(\"nextImplementation\");\r\n    }\r\n\r\n    function nextImplementationTimestamp() public view returns (uint256) {\r\n        return _getUint256(\"nextImplementationTimestamp\");\r\n    }\r\n\r\n    function timelockDelay() public view returns (uint256) {\r\n        return _getUint256(\"timelockDelay\");\r\n    }\r\n\r\n    function multisig() public view returns (address) {\r\n        return _getAddress(\"multisig\");\r\n    }\r\n\r\n    function _setUnderlying(address _value) internal {\r\n        _setAddress(\"underlying\", _value);\r\n    }\r\n\r\n    function _setVault(address _value) internal {\r\n        _setAddress(\"vault\", _value);\r\n    }\r\n\r\n    function _setRewardPool(address _value) internal {\r\n        _setAddress(\"rewardPool\", _value);\r\n    }\r\n\r\n    function _setRewardToken(address _value) internal {\r\n        _setAddress(\"rewardToken\", _value);\r\n    }\r\n\r\n    function _setSell(bool _value) internal {\r\n        _setBool(\"sell\", _value);\r\n    }\r\n\r\n    function _setSellFloor(uint256 _value) internal {\r\n        _setUint256(\"sellFloor\", _value);\r\n    }\r\n\r\n    function _setPausedInvesting(bool _value) internal {\r\n        _setBool(\"pausedInvesting\", _value);\r\n    }\r\n\r\n    function _setNextImplementation(address _value) internal {\r\n        _setAddress(\"nextImplementation\", _value);\r\n    }\r\n\r\n    function _setNextImplementationTimestamp(uint256 _value) internal {\r\n        _setUint256(\"nextImplementationTimestamp\", _value);\r\n    }\r\n\r\n    function _setTimelockDelay(uint256 _value) internal {\r\n        _setUint256(\"timelockDelay\", _value);\r\n    }\r\n\r\n    function _setMultisig(address _value) internal {\r\n        _setAddress(\"multisig\", _value);\r\n    }\r\n\r\n    function _setUint256(string memory _key, uint256 _value) internal {\r\n        uint256Storage[keccak256(abi.encodePacked(_key))] = _value;\r\n    }\r\n\r\n    function _setAddress(string memory _key, address _value) internal {\r\n        addressStorage[keccak256(abi.encodePacked(_key))] = _value;\r\n    }\r\n\r\n    function _setBool(string memory _key, bool _value) internal {\r\n        boolStorage[keccak256(abi.encodePacked(_key))] = _value;\r\n    }\r\n\r\n    function _getUint256(string memory _key) internal view returns (uint256) {\r\n        return uint256Storage[keccak256(abi.encodePacked(_key))];\r\n    }\r\n\r\n    function _getAddress(string memory _key) internal view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(_key))];\r\n    }\r\n\r\n    function _getBool(string memory _key) internal view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(_key))];\r\n    }\r\n}"
    },
    "contracts/GovernableInit.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport {Storage} from \"./Storage.sol\";\r\n\r\n/**\r\n * @dev Contract for access control where the governance address specified\r\n * in the Storage contract can be granted access to specific functions\r\n * on a contract that inherits this contract.\r\n *\r\n * The difference between GovernableInit and Governable is that GovernableInit supports proxy\r\n * smart contracts.\r\n */\r\n\r\ncontract GovernableInit is Initializable {\r\n\r\n  bytes32 internal constant _STORAGE_SLOT = 0xa7ec62784904ff31cbcc32d09932a58e7f1e4476e1d041995b37c917990b16dc;\r\n\r\n  modifier onlyGovernance() {\r\n    require(Storage(_storage()).isGovernance(msg.sender), \"Governable: Not governance\");\r\n    _;\r\n  }\r\n\r\n  constructor() {\r\n    assert(_STORAGE_SLOT == bytes32(uint256(keccak256(\"eip1967.governableInit.storage\")) - 1));\r\n  }\r\n\r\n  function __Governable_init_(address _store) public initializer {\r\n    _setStorage(_store);\r\n  }\r\n\r\n  function _setStorage(address newStorage) private {\r\n    bytes32 slot = _STORAGE_SLOT;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      sstore(slot, newStorage)\r\n    }\r\n  }\r\n\r\n  function setStorage(address _store) public onlyGovernance {\r\n    require(_store != address(0), \"Governable: New storage shouldn't be empty\");\r\n    _setStorage(_store);\r\n  }\r\n\r\n  function _storage() internal view returns (address str) {\r\n    bytes32 slot = _STORAGE_SLOT;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      str := sload(slot)\r\n    }\r\n  }\r\n\r\n  function governance() public view returns (address) {\r\n    return Storage(_storage()).governance();\r\n  }\r\n}"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Storage {\r\n\r\n  address public governance;\r\n  address public controller;\r\n\r\n  constructor() {\r\n    governance = msg.sender;\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(isGovernance(msg.sender), \"Storage: Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setGovernance(address _governance) public onlyGovernance {\r\n    require(_governance != address(0), \"Storage: New governance shouldn't be empty\");\r\n    governance = _governance;\r\n  }\r\n\r\n  function setController(address _controller) public onlyGovernance {\r\n    require(_controller != address(0), \"Storage: New controller shouldn't be empty\");\r\n    controller = _controller;\r\n  }\r\n\r\n  function isGovernance(address account) public view returns (bool) {\r\n    return account == governance;\r\n  }\r\n\r\n  function isController(address account) public view returns (bool) {\r\n    return account == controller;\r\n  }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 150
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}