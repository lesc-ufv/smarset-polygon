{{
  "language": "Solidity",
  "sources": {
    "contracts/base/vault/SmartVault.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\nimport \"../interface/IStrategy.sol\";\r\nimport \"../interface/IController.sol\";\r\nimport \"../interface/IVaultController.sol\";\r\nimport \"./VaultStorage.sol\";\r\nimport \"../governance/Controllable.sol\";\r\nimport \"../interface/IBookkeeper.sol\";\r\n\r\n/// @title Smart Vault is a combination of implementations drawn from Synthetix pool\r\n///        for their innovative reward vesting and Yearn vault for their share price model\r\n/// @dev Use with TetuProxy\r\n/// @author belbix\r\ncontract SmartVault is Initializable, ERC20Upgradeable, VaultStorage, Controllable {\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n  using SafeMathUpgradeable for uint256;\r\n\r\n  // ************* CONSTANTS ********************\r\n  /// @notice Version of the contract\r\n  /// @dev Should be incremented when contract changed\r\n  string public constant VERSION = \"1.4.0\";\r\n  /// @dev Denominator for penalty numerator\r\n  uint256 public constant LOCK_PENALTY_DENOMINATOR = 1000;\r\n\r\n  // ********************* VARIABLES *****************\r\n  //in upgradable contracts you can skip storage ONLY for mapping and dynamically-sized array types\r\n  //https://docs.soliditylang.org/en/v0.4.21/miscellaneous.html#layout-of-state-variables-in-storage\r\n  //use VaultStorage for primitive variables\r\n\r\n  // ****** REWARD MECHANIC VARIABLES ******** //\r\n  /// @dev A list of reward tokens that able to be distributed to this contract\r\n  address[] internal _rewardTokens;\r\n  /// @dev Timestamp value when current period of rewards will be ended\r\n  mapping(address => uint256) public override periodFinishForToken;\r\n  /// @dev Reward rate in normal circumstances is distributed rewards divided on duration\r\n  mapping(address => uint256) public override rewardRateForToken;\r\n  /// @dev Last rewards snapshot time. Updated on each share movements\r\n  mapping(address => uint256) public override lastUpdateTimeForToken;\r\n  /// @dev Rewards snapshot calculated from rewardPerToken(rt). Updated on each share movements\r\n  mapping(address => uint256) public override rewardPerTokenStoredForToken;\r\n  /// @dev User personal reward rate snapshot. Updated on each share movements\r\n  mapping(address => mapping(address => uint256)) public override userRewardPerTokenPaidForToken;\r\n  /// @dev User personal earned reward snapshot. Updated on each share movements\r\n  mapping(address => mapping(address => uint256)) public override rewardsForToken;\r\n\r\n  // ******** OTHER VARIABLES **************** //\r\n  /// @dev Only for statistical purposes, no guarantee to be accurate\r\n  ///      Last timestamp value when user withdraw. Resets on transfer\r\n  mapping(address => uint256) public override userLastWithdrawTs;\r\n  /// @dev In normal circumstances hold last claim timestamp for users\r\n  mapping(address => uint256) public override userBoostTs;\r\n  /// @dev In normal circumstances hold last withdraw timestamp for users\r\n  mapping(address => uint256) public override userLockTs;\r\n  /// @dev Only for statistical purposes, no guarantee to be accurate\r\n  ///      Last timestamp value when user deposit. Doesn't update on transfers\r\n  mapping(address => uint256) public override userLastDepositTs;\r\n\r\n  /// @notice Initialize contract after setup it as proxy implementation\r\n  /// @dev Use it only once after first logic setup\r\n  /// @param _name ERC20 name\r\n  /// @param _symbol ERC20 symbol\r\n  /// @param _controller Controller address\r\n  /// @param _underlying Vault underlying address\r\n  /// @param _duration Rewards duration\r\n  /// @param _lockAllowed Set true with lock mechanic requires\r\n  /// @param _rewardToken Reward token address. Set zero address if not requires\r\n  function initializeSmartVault(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address _controller,\r\n    address _underlying,\r\n    uint256 _duration,\r\n    bool _lockAllowed,\r\n    address _rewardToken\r\n  ) external initializer {\r\n    __ERC20_init(_name, _symbol);\r\n\r\n    Controllable.initializeControllable(_controller);\r\n    VaultStorage.initializeVaultStorage(\r\n      _underlying,\r\n      _duration,\r\n      _lockAllowed\r\n    );\r\n    // initialize reward token for easily deploy new vaults from deployer address\r\n    if (_rewardToken != address(0)) {\r\n      require(_rewardToken != underlying());\r\n      _rewardTokens.push(_rewardToken);\r\n    }\r\n  }\r\n\r\n  // *************** EVENTS ***************************\r\n  event Withdraw(address indexed beneficiary, uint256 amount);\r\n  event Deposit(address indexed beneficiary, uint256 amount);\r\n  event Invest(uint256 amount);\r\n  event StrategyAnnounced(address newStrategy, uint256 time);\r\n  event StrategyChanged(address newStrategy, address oldStrategy);\r\n  event RewardAdded(address rewardToken, uint256 reward);\r\n  event RewardMovedToController(address rewardToken, uint256 amount);\r\n  event Staked(address indexed user, uint256 amount);\r\n  event Withdrawn(address indexed user, uint256 amount);\r\n  event RewardPaid(address indexed user, address rewardToken, uint256 reward);\r\n  event RewardDenied(address indexed user, address rewardToken, uint256 reward);\r\n  event AddedRewardToken(address indexed token);\r\n  event RemovedRewardToken(address indexed token);\r\n  event RewardRecirculated(address indexed token, uint256 amount);\r\n  event RewardSentToController(address indexed token, uint256 amount);\r\n\r\n  // *************** MODIFIERS ***************************\r\n\r\n  /// @dev Allow operation only for VaultController\r\n  modifier onlyVaultController() {\r\n    require(IController(controller()).vaultController() == msg.sender, \"SV: Not vault controller\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Strategy should not be a zero address\r\n  modifier whenStrategyDefined() {\r\n    require(address(strategy()) != address(0), \"SV: Zero strat\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Allowed only for active strategy\r\n  modifier isActive() {\r\n    require(active(), \"SV: Not active\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Use it for any underlying movements\r\n  modifier updateRewards(address account) {\r\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n      _updateReward(account, _rewardTokens[i]);\r\n    }\r\n    _;\r\n  }\r\n\r\n  /// @dev Use it for any underlying movements\r\n  modifier updateReward(address account, address rt){\r\n    _updateReward(account, rt);\r\n    _;\r\n  }\r\n\r\n  // ************ COMMON VIEWS ***********************\r\n\r\n  /// @notice ERC20 compatible decimals value. Should be the same as underlying\r\n  function decimals() public view override returns (uint8) {\r\n    return ERC20Upgradeable(underlying()).decimals();\r\n  }\r\n\r\n  function _vaultController() internal view returns (IVaultController){\r\n    return IVaultController(IController(controller()).vaultController());\r\n  }\r\n\r\n  // ************ GOVERNANCE ACTIONS ******************\r\n\r\n  /// @notice Change permission for decreasing ppfs during hard work process\r\n  /// @param _value true - allowed, false - disallowed\r\n  function changePpfsDecreaseAllowed(bool _value) external override onlyVaultController {\r\n    _setPpfsDecreaseAllowed(_value);\r\n  }\r\n\r\n  /// @notice Set lock period for funds. Can be called only once\r\n  /// @param _value Timestamp value\r\n  function setLockPeriod(uint256 _value) external override onlyControllerOrGovernance {\r\n    require(lockAllowed());\r\n    require(lockPeriod() == 0);\r\n    _setLockPeriod(_value);\r\n  }\r\n\r\n  /// @notice Set lock initial penalty nominator. Can be called only once\r\n  /// @param _value Penalty denominator, should be in range 0 - (LOCK_PENALTY_DENOMINATOR / 2)\r\n  function setLockPenalty(uint256 _value) external override onlyControllerOrGovernance {\r\n    require(_value <= (LOCK_PENALTY_DENOMINATOR / 2), \"SV: Wrong value\");\r\n    require(lockAllowed(), \"SV: Lock not allowed\");\r\n    require(lockPenalty() == 0, \"SV: Already defined\");\r\n    _setLockPenalty(_value);\r\n  }\r\n\r\n  /// @notice Change the active state marker\r\n  /// @param _active Status true - active, false - deactivated\r\n  function changeActivityStatus(bool _active) external override onlyVaultController {\r\n    _setActive(_active);\r\n  }\r\n\r\n  /// @notice Earn some money for honest work\r\n  function doHardWork() external whenStrategyDefined onlyControllerOrGovernance override {\r\n    invest();\r\n    uint256 sharePriceBeforeHardWork = getPricePerFullShare();\r\n    IStrategy(strategy()).doHardWork();\r\n    require(ppfsDecreaseAllowed() || sharePriceBeforeHardWork <= getPricePerFullShare(), \"SV: PPFS decreased\");\r\n  }\r\n\r\n  /// @notice Add a reward token to the internal array\r\n  /// @param rt Reward token address\r\n  function addRewardToken(address rt) external override onlyVaultController {\r\n    require(getRewardTokenIndex(rt) == type(uint256).max, \"SV: RT exist\");\r\n    require(rt != underlying(), \"SV: RT is underlying\");\r\n    _rewardTokens.push(rt);\r\n    emit AddedRewardToken(rt);\r\n  }\r\n\r\n  /// @notice Remove reward token. Last token removal is not allowed\r\n  /// @param rt Reward token address\r\n  function removeRewardToken(address rt) external override onlyVaultController {\r\n    uint256 i = getRewardTokenIndex(rt);\r\n    require(i != type(uint256).max, \"SV: Not exist\");\r\n    require(periodFinishForToken[_rewardTokens[i]] < block.timestamp, \"SV: Not finished\");\r\n    require(_rewardTokens.length > 1, \"SV: Last rt\");\r\n    uint256 lastIndex = _rewardTokens.length - 1;\r\n    // swap\r\n    _rewardTokens[i] = _rewardTokens[lastIndex];\r\n    // delete last element\r\n    _rewardTokens.pop();\r\n    emit RemovedRewardToken(rt);\r\n  }\r\n\r\n  /// @notice Withdraw all from strategy to the vault and invest again\r\n  function rebalance() external onlyControllerOrGovernance {\r\n    withdrawAllToVault();\r\n    invest();\r\n  }\r\n\r\n  /// @notice Withdraw all from strategy to the vault\r\n  function withdrawAllToVault() public onlyControllerOrGovernance whenStrategyDefined {\r\n    IStrategy(strategy()).withdrawAllToVault();\r\n  }\r\n\r\n  //****************** USER ACTIONS ********************\r\n\r\n  /// @notice Allows for depositing the underlying asset in exchange for shares.\r\n  ///         Approval is assumed.\r\n  function deposit(uint256 amount) external override onlyAllowedUsers isActive {\r\n    _deposit(amount, msg.sender, msg.sender);\r\n  }\r\n\r\n  /// @notice Allows for depositing the underlying asset in exchange for shares.\r\n  ///         Approval is assumed. Immediately invests the asset to the strategy\r\n  function depositAndInvest(uint256 amount) external override onlyAllowedUsers isActive {\r\n    _deposit(amount, msg.sender, msg.sender);\r\n    invest();\r\n  }\r\n\r\n  /// @notice Allows for depositing the underlying asset in exchange for shares assigned to the holder.\r\n  ///         This facilitates depositing for someone else\r\n  function depositFor(uint256 amount, address holder) external override onlyAllowedUsers isActive {\r\n    _deposit(amount, msg.sender, holder);\r\n  }\r\n\r\n  /// @notice Withdraw shares partially without touching rewards\r\n  function withdraw(uint256 numberOfShares) external override onlyAllowedUsers {\r\n    _withdraw(numberOfShares);\r\n  }\r\n\r\n  /// @notice Withdraw all and claim rewards\r\n  function exit() external override onlyAllowedUsers {\r\n    // for locked functionality need to claim rewards firstly\r\n    // otherwise token transfer will refresh the lock period\r\n    // also it will withdraw claimed tokens too\r\n    getAllRewards();\r\n    _withdraw(balanceOf(msg.sender));\r\n  }\r\n\r\n  /// @notice Update and Claim all rewards\r\n  function getAllRewards() public override updateRewards(msg.sender) onlyAllowedUsers {\r\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n      _payReward(_rewardTokens[i]);\r\n    }\r\n  }\r\n\r\n  /// @notice Update and Claim rewards for specific token\r\n  function getReward(address rt) external override updateReward(msg.sender, rt) onlyAllowedUsers {\r\n    _payReward(rt);\r\n  }\r\n\r\n  /// @dev Update user specific variables\r\n  ///      Store statistical information to Bookkeeper\r\n  function _beforeTokenTransfer(address from, address to, uint256 amount)\r\n  internal override updateRewards(from) updateRewards(to) {\r\n\r\n    // mint - assuming it is deposit action\r\n    if (from == address(0)) {\r\n      // new deposit\r\n      if (userBoostTs[to] == 0) {\r\n        userBoostTs[to] = block.timestamp;\r\n      }\r\n\r\n      // start lock only for new deposits\r\n      if (userLockTs[to] == 0 && lockAllowed()) {\r\n        userLockTs[to] = block.timestamp;\r\n      }\r\n\r\n      // store current timestamp\r\n      userLastDepositTs[to] = block.timestamp;\r\n    } else if (to == address(0)) {\r\n      // burn - assuming it is withdraw action\r\n      userLastWithdrawTs[from] = block.timestamp;\r\n    } else {\r\n      // regular transfer\r\n\r\n      // we can't normally refresh lock timestamp for locked assets when it transfers to another account\r\n      // need to allow transfers for reward notification process and claim rewards\r\n      require(!lockAllowed() || to == address(this) || from == address(this),\r\n        \"SV: Transfer forbidden for locked funds\");\r\n\r\n      // if recipient didn't have deposit - start boost time\r\n      if (userBoostTs[to] == 0) {\r\n        userBoostTs[to] = block.timestamp;\r\n      }\r\n\r\n      // update only for new deposit for avoiding miscellaneous sending for reset the value\r\n      if (userLastDepositTs[to] == 0) {\r\n        userLastDepositTs[to] = block.timestamp;\r\n      }\r\n\r\n      // reset timer if token transferred\r\n      userLastWithdrawTs[from] = block.timestamp;\r\n    }\r\n\r\n    // register ownership changing\r\n    // only statistic, no funds affected\r\n    try IBookkeeper(IController(controller()).bookkeeper())\r\n    .registerVaultTransfer(from, to, amount) {\r\n    } catch {}\r\n    super._beforeTokenTransfer(from, to, amount);\r\n  }\r\n\r\n  //**************** UNDERLYING MANAGEMENT FUNCTIONALITY ***********************\r\n\r\n  /// @notice Return underlying precision units\r\n  function underlyingUnit() public view override returns (uint256) {\r\n    return 10 ** uint256(ERC20Upgradeable(address(underlying())).decimals());\r\n  }\r\n\r\n  /// @notice Returns the cash balance across all users in this contract.\r\n  function underlyingBalanceInVault() public view override returns (uint256) {\r\n    return IERC20Upgradeable(underlying()).balanceOf(address(this));\r\n  }\r\n\r\n  /// @notice Returns the current underlying (e.g., DAI's) balance together with\r\n  ///         the invested amount (if DAI is invested elsewhere by the strategy).\r\n  function underlyingBalanceWithInvestment() public view override returns (uint256) {\r\n    if (address(strategy()) == address(0)) {\r\n      // initial state, when not set\r\n      return underlyingBalanceInVault();\r\n    }\r\n    return underlyingBalanceInVault()\r\n    .add(IStrategy(strategy()).investedUnderlyingBalance());\r\n  }\r\n\r\n  /// @notice Get the user's share (in underlying)\r\n  ///         underlyingBalanceWithInvestment() * balanceOf(holder) / totalSupply()\r\n  function underlyingBalanceWithInvestmentForHolder(address holder)\r\n  external view override returns (uint256) {\r\n    if (totalSupply() == 0) {\r\n      return 0;\r\n    }\r\n    return underlyingBalanceWithInvestment()\r\n    .mul(balanceOf(holder))\r\n    .div(totalSupply());\r\n  }\r\n\r\n  /// @notice Price per full share (PPFS)\r\n  ///         Vaults with 100% buybacks have a value of 1 constantly\r\n  ///         (underlyingUnit() * underlyingBalanceWithInvestment()) / totalSupply()\r\n  function getPricePerFullShare() public view override returns (uint256) {\r\n    return totalSupply() == 0\r\n    ? underlyingUnit()\r\n    : underlyingUnit().mul(underlyingBalanceWithInvestment()).div(totalSupply());\r\n  }\r\n\r\n  /// @notice Return amount of the underlying asset ready to invest to the strategy\r\n  function availableToInvestOut() public view override returns (uint256) {\r\n    uint256 wantInvestInTotal = underlyingBalanceWithInvestment();\r\n    uint256 alreadyInvested = IStrategy(strategy()).investedUnderlyingBalance();\r\n    if (alreadyInvested >= wantInvestInTotal) {\r\n      return 0;\r\n    } else {\r\n      uint256 remainingToInvest = wantInvestInTotal.sub(alreadyInvested);\r\n      return remainingToInvest <= underlyingBalanceInVault()\r\n      ? remainingToInvest : underlyingBalanceInVault();\r\n    }\r\n  }\r\n\r\n  /// @notice Burn shares, withdraw underlying from strategy\r\n  ///         and send back to the user the underlying asset\r\n  function _withdraw(uint256 numberOfShares) internal updateRewards(msg.sender) {\r\n    require(totalSupply() > 0, \"SV: No shares\");\r\n    require(numberOfShares > 0, \"SV: Zero amount\");\r\n\r\n    // store totalSupply before shares burn\r\n    uint256 totalSupply = totalSupply();\r\n\r\n    // this logic not eligible for normal vaults\r\n    // lockAllowed unchangeable attribute even for proxy upgrade process\r\n    if (lockAllowed()) {\r\n      numberOfShares = _calculateLockedAmount(numberOfShares);\r\n    }\r\n\r\n    _burn(msg.sender, numberOfShares);\r\n\r\n    // only statistic, no funds affected\r\n    try IBookkeeper(IController(controller()).bookkeeper())\r\n    .registerUserAction(msg.sender, numberOfShares, false) {\r\n    } catch {}\r\n\r\n    uint256 underlyingAmountToWithdraw = underlyingBalanceWithInvestment()\r\n    .mul(numberOfShares)\r\n    .div(totalSupply);\r\n    if (underlyingAmountToWithdraw > underlyingBalanceInVault()) {\r\n      // withdraw everything from the strategy to accurately check the share value\r\n      if (numberOfShares == totalSupply) {\r\n        IStrategy(strategy()).withdrawAllToVault();\r\n      } else {\r\n        uint256 missing = underlyingAmountToWithdraw.sub(underlyingBalanceInVault());\r\n        IStrategy(strategy()).withdrawToVault(missing);\r\n      }\r\n      // recalculate to improve accuracy\r\n      underlyingAmountToWithdraw = MathUpgradeable.min(underlyingBalanceWithInvestment()\r\n      .mul(numberOfShares)\r\n      .div(totalSupply), underlyingBalanceInVault());\r\n    }\r\n\r\n    IERC20Upgradeable(underlying()).safeTransfer(msg.sender, underlyingAmountToWithdraw);\r\n\r\n    // update the withdrawal amount for the holder\r\n    emit Withdraw(msg.sender, underlyingAmountToWithdraw);\r\n  }\r\n\r\n  /// @dev Locking logic will add a part of locked shares as rewards for this vault\r\n  ///      Calculate locked amount and distribute locked shares as reward to the current vault\r\n  /// @return Number of shares available to withdraw\r\n  function _calculateLockedAmount(uint256 numberOfShares) internal returns (uint256){\r\n    uint256 lockStart = userLockTs[msg.sender];\r\n    // refresh lock time\r\n    // if full withdraw set timer to 0\r\n    if (balanceOf(msg.sender) == numberOfShares) {\r\n      userLockTs[msg.sender] = 0;\r\n    } else {\r\n      userLockTs[msg.sender] = block.timestamp;\r\n    }\r\n    if (lockStart != 0 && lockStart < block.timestamp) {\r\n      uint256 currentLockDuration = block.timestamp.sub(lockStart);\r\n      if (currentLockDuration < lockPeriod()) {\r\n        uint256 sharesBase = numberOfShares.mul(LOCK_PENALTY_DENOMINATOR - lockPenalty()).div(LOCK_PENALTY_DENOMINATOR);\r\n        uint256 toWithdraw = sharesBase.add(\r\n          numberOfShares.sub(sharesBase).mul(currentLockDuration).div(lockPeriod())\r\n        );\r\n        uint256 lockedSharesToReward = numberOfShares.sub(toWithdraw);\r\n        numberOfShares = toWithdraw;\r\n\r\n        // move shares to current contract for using as rewards\r\n        _transfer(msg.sender, address(this), lockedSharesToReward);\r\n        // vault should have itself as reward token for recirculation process\r\n        _notifyRewardWithoutPeriodChange(lockedSharesToReward, address(this));\r\n      }\r\n    }\r\n    return numberOfShares;\r\n  }\r\n\r\n  /// @notice Mint shares and transfer underlying from user to the vault\r\n  ///         New shares = (invested amount * total supply) / underlyingBalanceWithInvestment()\r\n  function _deposit(uint256 amount, address sender, address beneficiary) internal updateRewards(sender) {\r\n    require(amount > 0, \"SV: Zero amount\");\r\n    require(beneficiary != address(0), \"SV: Zero beneficiary\");\r\n\r\n    uint256 toMint = totalSupply() == 0\r\n    ? amount\r\n    : amount.mul(totalSupply()).div(underlyingBalanceWithInvestment());\r\n    require(toMint != 0, \"SV: Zero mint\");\r\n    _mint(beneficiary, toMint);\r\n\r\n    IERC20Upgradeable(underlying()).safeTransferFrom(sender, address(this), amount);\r\n\r\n    // only statistic, no funds affected\r\n    try IBookkeeper(IController(controller()).bookkeeper())\r\n    .registerUserAction(beneficiary, toMint, true){\r\n    } catch {}\r\n\r\n    emit Deposit(beneficiary, amount);\r\n  }\r\n\r\n  /// @notice Transfer underlying to the strategy\r\n  function invest() internal whenStrategyDefined {\r\n    uint256 availableAmount = availableToInvestOut();\r\n    if (availableAmount > 0) {\r\n      IERC20Upgradeable(underlying()).safeTransfer(address(strategy()), availableAmount);\r\n      IStrategy(strategy()).investAllUnderlying();\r\n      emit Invest(availableAmount);\r\n    }\r\n  }\r\n\r\n  //**************** REWARDS FUNCTIONALITY ***********************\r\n\r\n  /// @dev Refresh reward numbers\r\n  function _updateReward(address account, address rt) internal {\r\n    rewardPerTokenStoredForToken[rt] = rewardPerToken(rt);\r\n    lastUpdateTimeForToken[rt] = lastTimeRewardApplicable(rt);\r\n    if (account != address(0) && account != address(this)) {\r\n      rewardsForToken[rt][account] = earned(rt, account);\r\n      userRewardPerTokenPaidForToken[rt][account] = rewardPerTokenStoredForToken[rt];\r\n    }\r\n  }\r\n\r\n  /// @notice Return earned rewards for specific token and account (with 100% boost)\r\n  ///         Accurate value returns only after updateRewards call\r\n  ///         ((balanceOf(account)\r\n  ///           * (rewardPerToken - userRewardPerTokenPaidForToken)) / 10**18) + rewardsForToken\r\n  function earned(address rt, address account) public view override returns (uint256) {\r\n    return\r\n    balanceOf(account)\r\n    .mul(rewardPerToken(rt).sub(userRewardPerTokenPaidForToken[rt][account]))\r\n    .div(1e18)\r\n    .add(rewardsForToken[rt][account]);\r\n  }\r\n\r\n  /// @notice Return amount ready to claim, calculated with actual boost\r\n  ///         Accurate value returns only after updateRewards call\r\n  function earnedWithBoost(address rt, address account) external view override returns (uint256) {\r\n    uint256 reward = earned(rt, account);\r\n    uint256 boostStart = userBoostTs[account];\r\n    // if we don't have a record we assume that it was deposited before boost logic and use 100% boost\r\n    if (boostStart != 0 && boostStart < block.timestamp) {\r\n      uint256 currentBoostDuration = block.timestamp.sub(boostStart);\r\n      // not 100% boost\r\n      uint256 boostDuration = _vaultController().rewardBoostDuration();\r\n      uint256 rewardRatioWithoutBoost = _vaultController().rewardRatioWithoutBoost();\r\n      if (currentBoostDuration < boostDuration) {\r\n        uint256 rewardWithoutBoost = reward.mul(rewardRatioWithoutBoost).div(100);\r\n        // calculate boosted part of rewards\r\n        reward = rewardWithoutBoost.add(\r\n          reward.sub(rewardWithoutBoost).mul(currentBoostDuration).div(boostDuration)\r\n        );\r\n      }\r\n    }\r\n    return reward;\r\n  }\r\n\r\n  /// @notice Return reward per token ratio by reward token address\r\n  ///                rewardPerTokenStoredForToken + (\r\n  ///                (lastTimeRewardApplicable - lastUpdateTimeForToken)\r\n  ///                 * rewardRateForToken * 10**18 / totalSupply)\r\n  function rewardPerToken(address rt) public view override returns (uint256) {\r\n    uint256 totalSupplyWithoutItself = totalSupply().sub(balanceOf(address(this)));\r\n    if (totalSupplyWithoutItself == 0) {\r\n      return rewardPerTokenStoredForToken[rt];\r\n    }\r\n    return\r\n    rewardPerTokenStoredForToken[rt].add(\r\n      lastTimeRewardApplicable(rt)\r\n      .sub(lastUpdateTimeForToken[rt])\r\n      .mul(rewardRateForToken[rt])\r\n      .mul(1e18)\r\n      .div(totalSupplyWithoutItself)\r\n    );\r\n  }\r\n\r\n  /// @notice Return periodFinishForToken or block.timestamp by reward token address\r\n  function lastTimeRewardApplicable(address rt) public view override returns (uint256) {\r\n    return MathUpgradeable.min(block.timestamp, periodFinishForToken[rt]);\r\n  }\r\n\r\n  /// @notice Return reward token array length\r\n  function rewardTokens() external view override returns (address[] memory){\r\n    return _rewardTokens;\r\n  }\r\n\r\n  /// @notice Return reward token array length\r\n  function rewardTokensLength() external view override returns (uint256){\r\n    return _rewardTokens.length;\r\n  }\r\n\r\n  /// @notice Return reward token index\r\n  ///         If the return value is MAX_UINT256, it means that\r\n  ///         the specified reward token is not in the list\r\n  function getRewardTokenIndex(address rt) public override view returns (uint256) {\r\n    for (uint i = 0; i < _rewardTokens.length; i++) {\r\n      if (_rewardTokens[i] == rt)\r\n        return i;\r\n    }\r\n    return type(uint256).max;\r\n  }\r\n\r\n  /// @notice Update rewardRateForToken\r\n  ///         If period ended: reward / duration\r\n  ///         else add leftover to the reward amount and refresh the period\r\n  ///         (reward + ((periodFinishForToken - block.timestamp) * rewardRateForToken)) / duration\r\n  function notifyTargetRewardAmount(address _rewardToken, uint256 amount)\r\n  external override\r\n  updateRewards(address(0))\r\n  onlyRewardDistribution {\r\n    // register notified amount for statistical purposes\r\n    IBookkeeper(IController(controller()).bookkeeper())\r\n    .registerRewardDistribution(address(this), _rewardToken, amount);\r\n\r\n    // overflow fix according to https://sips.synthetix.io/sips/sip-77\r\n    require(amount < type(uint256).max / 1e18, \"SV: Amount overflow\");\r\n    uint256 i = getRewardTokenIndex(_rewardToken);\r\n    require(i != type(uint256).max, \"SV: RT not found\");\r\n\r\n    IERC20Upgradeable(_rewardToken).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n    if (block.timestamp >= periodFinishForToken[_rewardToken]) {\r\n      rewardRateForToken[_rewardToken] = amount.div(duration());\r\n    } else {\r\n      uint256 remaining = periodFinishForToken[_rewardToken].sub(block.timestamp);\r\n      uint256 leftover = remaining.mul(rewardRateForToken[_rewardToken]);\r\n      rewardRateForToken[_rewardToken] = amount.add(leftover).div(duration());\r\n    }\r\n    lastUpdateTimeForToken[_rewardToken] = block.timestamp;\r\n    periodFinishForToken[_rewardToken] = block.timestamp.add(duration());\r\n\r\n    // Ensure the provided reward amount is not more than the balance in the contract.\r\n    // This keeps the reward rate in the right range, preventing overflows due to\r\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\r\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n    uint balance = IERC20Upgradeable(_rewardToken).balanceOf(address(this));\r\n    require(rewardRateForToken[_rewardToken] <= balance.div(duration()), \"SV: Provided reward too high\");\r\n    emit RewardAdded(_rewardToken, amount);\r\n  }\r\n\r\n  /// @dev Assume approve\r\n  ///      Add reward amount without changing reward duration\r\n  function notifyRewardWithoutPeriodChange(address _rewardToken, uint256 _amount)\r\n  external override updateRewards(address(0)) onlyRewardDistribution {\r\n    IERC20Upgradeable(_rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n    _notifyRewardWithoutPeriodChange(_amount, _rewardToken);\r\n  }\r\n\r\n  /// @notice Transfer earned rewards to caller\r\n  function _payReward(address rt) internal {\r\n    uint256 reward = earned(rt, msg.sender);\r\n    if (reward > 0 && IERC20Upgradeable(rt).balanceOf(address(this)) >= reward) {\r\n      // calculate boosted amount\r\n      uint256 boostStart = userBoostTs[msg.sender];\r\n      // refresh boost\r\n      userBoostTs[msg.sender] = block.timestamp;\r\n      // if we don't have a record we assume that it was deposited before boost logic and use 100% boost\r\n      // allow claim without penalty to some addresses, TetuSwap pairs as example\r\n      if (\r\n        boostStart != 0\r\n        && boostStart < block.timestamp\r\n        && !IController(controller()).isPoorRewardConsumer(msg.sender)\r\n      ) {\r\n        uint256 currentBoostDuration = block.timestamp.sub(boostStart);\r\n        // not 100% boost\r\n        uint256 boostDuration = _vaultController().rewardBoostDuration();\r\n        uint256 rewardRatioWithoutBoost = _vaultController().rewardRatioWithoutBoost();\r\n        if (currentBoostDuration < boostDuration) {\r\n          uint256 rewardWithoutBoost = reward.mul(rewardRatioWithoutBoost).div(100);\r\n          // calculate boosted part of rewards\r\n          uint256 toClaim = rewardWithoutBoost.add(\r\n            reward.sub(rewardWithoutBoost).mul(currentBoostDuration).div(boostDuration)\r\n          );\r\n          uint256 change = reward.sub(toClaim);\r\n          reward = toClaim;\r\n\r\n          _notifyRewardWithoutPeriodChange(change, rt);\r\n        }\r\n      }\r\n\r\n      rewardsForToken[rt][msg.sender] = 0;\r\n      IERC20Upgradeable(rt).safeTransfer(msg.sender, reward);\r\n      // only statistic, should not affect reward claim process\r\n      try IBookkeeper(IController(controller()).bookkeeper())\r\n      .registerUserEarned(msg.sender, address(this), rt, reward) {\r\n      } catch {}\r\n      emit RewardPaid(msg.sender, rt, reward);\r\n    }\r\n  }\r\n\r\n  /// @dev Add reward amount without changing reward duration\r\n  function _notifyRewardWithoutPeriodChange(uint256 _amount, address _rewardToken) internal {\r\n    require(getRewardTokenIndex(_rewardToken) != type(uint256).max, \"SV: RT not found\");\r\n    if (_amount > 1 && _amount < type(uint256).max / 1e18) {\r\n      rewardPerTokenStoredForToken[_rewardToken] = rewardPerToken(_rewardToken);\r\n      lastUpdateTimeForToken[_rewardToken] = lastTimeRewardApplicable(_rewardToken);\r\n      if (block.timestamp >= periodFinishForToken[_rewardToken]) {\r\n        // if vesting ended transfer the change to the controller\r\n        // otherwise we will have possible infinity rewards duration\r\n        IERC20Upgradeable(_rewardToken).safeTransfer(controller(), _amount);\r\n        emit RewardSentToController(_rewardToken, _amount);\r\n      } else {\r\n        uint256 remaining = periodFinishForToken[_rewardToken].sub(block.timestamp);\r\n        uint256 leftover = remaining.mul(rewardRateForToken[_rewardToken]);\r\n        rewardRateForToken[_rewardToken] = _amount.add(leftover).div(remaining);\r\n        emit RewardRecirculated(_rewardToken, _amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Disable strategy and move rewards to controller\r\n  function stop() external override onlyVaultController {\r\n    IStrategy(strategy()).withdrawAllToVault();\r\n    _setActive(false);\r\n\r\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n      address rt = _rewardTokens[i];\r\n      periodFinishForToken[rt] = block.timestamp;\r\n      rewardRateForToken[rt] = 0;\r\n      uint256 amount = IERC20Upgradeable(rt).balanceOf(address(this));\r\n      if (amount != 0) {\r\n        IERC20Upgradeable(rt).safeTransfer(controller(), amount);\r\n      }\r\n      emit RewardMovedToController(rt, amount);\r\n    }\r\n  }\r\n\r\n  //**************** STRATEGY UPDATE FUNCTIONALITY ***********************\r\n\r\n  /// @notice Check the strategy time lock, withdraw all to the vault and change the strategy\r\n  ///         Should be called via controller\r\n  function setStrategy(address _strategy) external override onlyController {\r\n    require(_strategy != address(0), \"SV: Zero strat\");\r\n    require(IStrategy(_strategy).underlying() == address(underlying()), \"SV: Wrong underlying\");\r\n    require(IStrategy(_strategy).vault() == address(this), \"SV: Wrong strat vault\");\r\n    require(IControllable(_strategy).isController(controller()), \"SV: Wrong strategy controller\");\r\n\r\n    emit StrategyChanged(_strategy, strategy());\r\n    if (_strategy != strategy()) {\r\n      if (strategy() != address(0)) {// if the original strategy (no underscore) is defined\r\n        IERC20Upgradeable(underlying()).safeApprove(address(strategy()), 0);\r\n        IStrategy(strategy()).withdrawAllToVault();\r\n      }\r\n      _setStrategy(_strategy);\r\n      IERC20Upgradeable(underlying()).safeApprove(address(strategy()), 0);\r\n      IERC20Upgradeable(underlying()).safeApprove(address(strategy()), type(uint256).max);\r\n      IController(controller()).addStrategy(_strategy);\r\n    }\r\n  }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/base/interface/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IStrategy {\r\n\r\n  enum Platform {\r\n    UNKNOWN, // 0\r\n    TETU, // 1\r\n    QUICK, // 2\r\n    SUSHI, // 3\r\n    WAULT, // 4\r\n    IRON, // 5\r\n    COSMIC, // 6\r\n    CURVE, // 7\r\n    DINO, // 8\r\n    IRON_LEND, // 9\r\n    HERMES, // 10\r\n    CAFE, // 11\r\n    TETU_SWAP // 12\r\n  }\r\n\r\n  // *************** GOVERNANCE ACTIONS **************\r\n  function STRATEGY_NAME() external view returns (string memory);\r\n\r\n  function withdrawAllToVault() external;\r\n\r\n  function withdrawToVault(uint256 amount) external;\r\n\r\n  function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n  function doHardWork() external;\r\n\r\n  function investAllUnderlying() external;\r\n\r\n  function emergencyExit() external;\r\n\r\n  function continueInvesting() external;\r\n\r\n  // **************** VIEWS ***************\r\n  function rewardTokens() external view returns (address[] memory);\r\n\r\n  function underlying() external view returns (address);\r\n\r\n  function underlyingBalance() external view returns (uint256);\r\n\r\n  function rewardPoolBalance() external view returns (uint256);\r\n\r\n  function buyBackRatio() external view returns (uint256);\r\n\r\n  function unsalvageableTokens(address token) external view returns (bool);\r\n\r\n  function vault() external view returns (address);\r\n\r\n  function investedUnderlyingBalance() external view returns (uint256);\r\n\r\n  function platform() external view returns (Platform);\r\n\r\n  function assets() external view returns (address[] memory);\r\n\r\n  function pausedInvesting() external view returns (bool);\r\n\r\n  function readyToClaim() external view returns (uint256[] memory);\r\n\r\n  function poolTotalAmount() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/base/interface/IController.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IController {\r\n\r\n  function addVaultAndStrategy(address _vault, address _strategy) external;\r\n\r\n  function addStrategy(address _strategy) external;\r\n\r\n  function governance() external view returns (address);\r\n\r\n  function dao() external view returns (address);\r\n\r\n  function bookkeeper() external view returns (address);\r\n\r\n  function feeRewardForwarder() external view returns (address);\r\n\r\n  function mintHelper() external view returns (address);\r\n\r\n  function rewardToken() external view returns (address);\r\n\r\n  function fundToken() external view returns (address);\r\n\r\n  function psVault() external view returns (address);\r\n\r\n  function fund() external view returns (address);\r\n\r\n  function announcer() external view returns (address);\r\n\r\n  function vaultController() external view returns (address);\r\n\r\n  function whiteList(address _target) external view returns (bool);\r\n\r\n  function vaults(address _target) external view returns (bool);\r\n\r\n  function strategies(address _target) external view returns (bool);\r\n\r\n  function psNumerator() external view returns (uint256);\r\n\r\n  function psDenominator() external view returns (uint256);\r\n\r\n  function fundNumerator() external view returns (uint256);\r\n\r\n  function fundDenominator() external view returns (uint256);\r\n\r\n  function isAllowedUser(address _adr) external view returns (bool);\r\n\r\n  function isDao(address _adr) external view returns (bool);\r\n\r\n  function isHardWorker(address _adr) external view returns (bool);\r\n\r\n  function isRewardDistributor(address _adr) external view returns (bool);\r\n\r\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\r\n\r\n  function isValidVault(address _vault) external view returns (bool);\r\n\r\n  function isValidStrategy(address _strategy) external view returns (bool);\r\n\r\n  // ************ DAO ACTIONS *************\r\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator) external;\r\n\r\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator) external;\r\n\r\n  function addToWhiteListMulti(address[] calldata _targets) external;\r\n\r\n  function addToWhiteList(address _target) external;\r\n\r\n  function removeFromWhiteListMulti(address[] calldata _targets) external;\r\n\r\n  function removeFromWhiteList(address _target) external;\r\n}\r\n"
    },
    "contracts/base/interface/IVaultController.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IVaultController {\r\n\r\n  function rewardBoostDuration() external view returns (uint256);\r\n\r\n  function rewardRatioWithoutBoost() external view returns (uint256);\r\n\r\n}\r\n"
    },
    "contracts/base/vault/VaultStorage.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../interface/ISmartVault.sol\";\r\n\r\n/// @title Eternal storage + getters and setters pattern\r\n/// @dev If you will change a key value it will require setup it again\r\n///      Implements IVault interface for reducing code base\r\n/// @author belbix\r\nabstract contract VaultStorage is Initializable, ISmartVault {\r\n\r\n  // don't change names or ordering!\r\n  mapping(bytes32 => uint256) private uintStorage;\r\n  mapping(bytes32 => address) private addressStorage;\r\n  mapping(bytes32 => bool) private boolStorage;\r\n\r\n  /// @notice Boolean value changed the variable with `name`\r\n  event UpdatedBoolSlot(string indexed name, bool oldValue, bool newValue);\r\n  /// @notice Address changed the variable with `name`\r\n  event UpdatedAddressSlot(string indexed name, address oldValue, address newValue);\r\n  /// @notice Value changed the variable with `name`\r\n  event UpdatedUint256Slot(string indexed name, uint256 oldValue, uint256 newValue);\r\n\r\n  /// @notice Initialize contract after setup it as proxy implementation\r\n  /// @dev Use it only once after first logic setup\r\n  /// @param _underlyingToken Vault underlying token\r\n  /// @param _durationValue Reward vesting period\r\n  function initializeVaultStorage(\r\n    address _underlyingToken,\r\n    uint256 _durationValue,\r\n    bool _lockAllowed\r\n  ) public initializer {\r\n    _setUnderlying(_underlyingToken);\r\n    _setDuration(_durationValue);\r\n    _setActive(true);\r\n    // no way to change it after initialisation for avoiding risks of misleading users\r\n    setBoolean(\"lockAllowed\", _lockAllowed);\r\n  }\r\n\r\n  // ******************* SETTERS AND GETTERS **********************\r\n\r\n  function _setStrategy(address _address) internal {\r\n    emit UpdatedAddressSlot(\"strategy\", strategy(), _address);\r\n    setAddress(\"strategy\", _address);\r\n  }\r\n\r\n  /// @notice Current strategy that vault use for farming\r\n  function strategy() public override view returns (address) {\r\n    return getAddress(\"strategy\");\r\n  }\r\n\r\n  function _setUnderlying(address _address) private {\r\n    emit UpdatedAddressSlot(\"underlying\", strategy(), _address);\r\n    setAddress(\"underlying\", _address);\r\n  }\r\n\r\n  /// @notice Vault underlying\r\n  function underlying() public view override returns (address) {\r\n    return getAddress(\"underlying\");\r\n  }\r\n\r\n  function _setDuration(uint256 _value) internal {\r\n    emit UpdatedUint256Slot(\"duration\", duration(), _value);\r\n    setUint256(\"duration\", _value);\r\n  }\r\n\r\n  /// @notice Rewards vesting period\r\n  function duration() public view override returns (uint256) {\r\n    return getUint256(\"duration\");\r\n  }\r\n\r\n  function _setActive(bool _value) internal {\r\n    emit UpdatedBoolSlot(\"active\", active(), _value);\r\n    setBoolean(\"active\", _value);\r\n  }\r\n\r\n  /// @notice Vault status\r\n  function active() public view override returns (bool) {\r\n    return getBoolean(\"active\");\r\n  }\r\n\r\n  function _setPpfsDecreaseAllowed(bool _value) internal {\r\n    emit UpdatedBoolSlot(\"ppfsDecreaseAllowed\", ppfsDecreaseAllowed(), _value);\r\n    setBoolean(\"ppfsDecreaseAllowed\", _value);\r\n  }\r\n\r\n  /// @notice Vault status\r\n  function ppfsDecreaseAllowed() public view override returns (bool) {\r\n    return getBoolean(\"ppfsDecreaseAllowed\");\r\n  }\r\n\r\n  function _setLockPeriod(uint256 _value) internal {\r\n    emit UpdatedUint256Slot(\"lockPeriod\", lockPeriod(), _value);\r\n    setUint256(\"lockPeriod\", _value);\r\n  }\r\n\r\n  /// @notice Deposit lock period\r\n  function lockPeriod() public view override returns (uint256) {\r\n    return getUint256(\"lockPeriod\");\r\n  }\r\n\r\n  function _setLockPenalty(uint256 _value) internal {\r\n    emit UpdatedUint256Slot(\"lockPenalty\", lockPenalty(), _value);\r\n    setUint256(\"lockPenalty\", _value);\r\n  }\r\n\r\n  /// @notice Base penalty if funds locked\r\n  function lockPenalty() public view override returns (uint256) {\r\n    return getUint256(\"lockPenalty\");\r\n  }\r\n\r\n  /// @notice Lock functionality allowed for this contract or not\r\n  function lockAllowed() public view override returns (bool) {\r\n    return getBoolean(\"lockAllowed\");\r\n  }\r\n\r\n  // ******************** STORAGE INTERNAL FUNCTIONS ********************\r\n\r\n  function setBoolean(string memory key, bool _value) private {\r\n    boolStorage[keccak256(abi.encodePacked(key))] = _value;\r\n  }\r\n\r\n  function getBoolean(string memory key) private view returns (bool) {\r\n    return boolStorage[keccak256(abi.encodePacked(key))];\r\n  }\r\n\r\n  function setAddress(string memory key, address _address) private {\r\n    addressStorage[keccak256(abi.encodePacked(key))] = _address;\r\n  }\r\n\r\n  function getAddress(string memory key) private view returns (address) {\r\n    return addressStorage[keccak256(abi.encodePacked(key))];\r\n  }\r\n\r\n  function setUint256(string memory key, uint256 _value) private {\r\n    uintStorage[keccak256(abi.encodePacked(key))] = _value;\r\n  }\r\n\r\n  function getUint256(string memory key) private view returns (uint256) {\r\n    return uintStorage[keccak256(abi.encodePacked(key))];\r\n  }\r\n\r\n  //slither-disable-next-line unused-state\r\n  uint256[50] private ______gap;\r\n}\r\n"
    },
    "contracts/base/governance/Controllable.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../interface/IController.sol\";\r\nimport \"../interface/IControllable.sol\";\r\n\r\n/// @title Implement basic functionality for any contract that require strict control\r\n/// @dev Can be used with upgradeable pattern.\r\n///      Require call initializeControllable() in any case.\r\n/// @author belbix\r\nabstract contract Controllable is Initializable, IControllable {\r\n  bytes32 internal constant _CONTROLLER_SLOT = 0x5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3617;\r\n  bytes32 internal constant _CREATED_SLOT = 0x6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8a;\r\n\r\n  /// @notice Controller address changed\r\n  event UpdateController(address oldValue, address newValue);\r\n\r\n  constructor() {\r\n    assert(_CONTROLLER_SLOT == bytes32(uint256(keccak256(\"eip1967.controllable.controller\")) - 1));\r\n    assert(_CREATED_SLOT == bytes32(uint256(keccak256(\"eip1967.controllable.created\")) - 1));\r\n  }\r\n\r\n  /// @notice Initialize contract after setup it as proxy implementation\r\n  ///         Save block.timestamp in the \"created\" variable\r\n  /// @dev Use it only once after first logic setup\r\n  /// @param _controller Controller address\r\n  function initializeControllable(address _controller) public initializer {\r\n    setController(_controller);\r\n    setCreated(block.timestamp);\r\n  }\r\n\r\n  function isController(address _adr) public override view returns (bool) {\r\n    return _adr == controller();\r\n  }\r\n\r\n  /// @notice Return true is given address is setup as governance in Controller\r\n  /// @param _adr Address for check\r\n  /// @return true if given address is governance\r\n  function isGovernance(address _adr) public override view returns (bool) {\r\n    return IController(controller()).governance() == _adr;\r\n  }\r\n\r\n  // ************ MODIFIERS **********************\r\n\r\n  /// @dev Allow operation only for Controller\r\n  modifier onlyController() {\r\n    require(controller() == msg.sender, \"not controller\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Allow operation only for Controller or Governance\r\n  modifier onlyControllerOrGovernance() {\r\n    require(isController(msg.sender) || isGovernance(msg.sender), \"not controller or gov\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Only smart contracts will be affected by this modifier\r\n  ///      If it is a contract it should be whitelisted\r\n  modifier onlyAllowedUsers() {\r\n    require(IController(controller()).isAllowedUser(msg.sender), \"not allowed\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Only Reward Distributor allowed. Governance is Reward Distributor by default.\r\n  modifier onlyRewardDistribution() {\r\n    require(IController(controller()).isRewardDistributor(msg.sender), \"only distr\");\r\n    _;\r\n  }\r\n\r\n  // ************* SETTERS/GETTERS *******************\r\n\r\n  /// @notice Return controller address saved in the contract slot\r\n  /// @return adr Controller address\r\n  function controller() public view returns (address adr) {\r\n    bytes32 slot = _CONTROLLER_SLOT;\r\n    assembly {\r\n      adr := sload(slot)\r\n    }\r\n  }\r\n\r\n  /// @dev Set a controller address to contract slot\r\n  /// @param _newController Controller address\r\n  function setController(address _newController) internal {\r\n    require(_newController != address(0), \"zero address\");\r\n    emit UpdateController(controller(), _newController);\r\n    bytes32 slot = _CONTROLLER_SLOT;\r\n    assembly {\r\n      sstore(slot, _newController)\r\n    }\r\n  }\r\n\r\n  /// @notice Return creation timestamp\r\n  /// @return ts Creation timestamp\r\n  function created() external view returns (uint256 ts) {\r\n    bytes32 slot = _CREATED_SLOT;\r\n    assembly {\r\n      ts := sload(slot)\r\n    }\r\n  }\r\n\r\n  /// @dev Filled only once when contract initialized\r\n  /// @param _created block.timestamp\r\n  function setCreated(uint256 _created) private {\r\n    bytes32 slot = _CREATED_SLOT;\r\n    assembly {\r\n      sstore(slot, _created)\r\n    }\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/base/interface/IBookkeeper.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IBookkeeper {\r\n\r\n  struct PpfsChange {\r\n    address vault;\r\n    uint256 block;\r\n    uint256 time;\r\n    uint256 value;\r\n    uint256 oldBlock;\r\n    uint256 oldTime;\r\n    uint256 oldValue;\r\n  }\r\n\r\n  struct HardWork {\r\n    address strategy;\r\n    uint256 block;\r\n    uint256 time;\r\n    uint256 targetTokenAmount;\r\n  }\r\n\r\n  function addVault(address _vault) external;\r\n\r\n  function addStrategy(address _strategy) external;\r\n\r\n  function registerStrategyEarned(uint256 _targetTokenAmount) external;\r\n\r\n  function registerFundKeeperEarned(address _token, uint256 _fundTokenAmount) external;\r\n\r\n  function registerUserAction(address _user, uint256 _amount, bool _deposit) external;\r\n\r\n  function registerVaultTransfer(address from, address to, uint256 amount) external;\r\n\r\n  function registerUserEarned(address _user, address _vault, address _rt, uint256 _amount) external;\r\n\r\n  function registerPpfsChange(address vault, uint256 value) external;\r\n\r\n  function registerRewardDistribution(address vault, address token, uint256 amount) external;\r\n\r\n  function vaults() external view returns (address[] memory);\r\n\r\n  function vaultsLength() external view returns (uint256);\r\n\r\n  function strategies() external view returns (address[] memory);\r\n\r\n  function strategiesLength() external view returns (uint256);\r\n\r\n  function lastPpfsChange(address vault) external view returns (PpfsChange memory);\r\n\r\n  /// @notice Return total earned TETU tokens for strategy\r\n  /// @dev Should be incremented after strategy rewards distribution\r\n  /// @param vault Strategy address\r\n  /// @return Earned TETU tokens\r\n  function targetTokenEarned(address vault) external view returns (uint256);\r\n\r\n  /// @notice Return share(xToken) balance of given user\r\n  /// @dev Should be calculated for each xToken transfer\r\n  /// @param vault Vault address\r\n  /// @param user User address\r\n  /// @return User share (xToken) balance\r\n  function vaultUsersBalances(address vault, address user) external view returns (uint256);\r\n\r\n  /// @notice Return earned token amount for given token and user\r\n  /// @dev Fills when user claim rewards\r\n  /// @param user User address\r\n  /// @param vault Vault address\r\n  /// @param token Token address\r\n  /// @return User's earned tokens amount\r\n  function userEarned(address user, address vault, address token) external view returns (uint256);\r\n\r\n  function lastHardWork(address vault) external view returns (HardWork memory);\r\n\r\n  /// @notice Return users quantity for given Vault\r\n  /// @dev Calculation based in Bookkeeper user balances\r\n  /// @param vault Vault address\r\n  /// @return Users quantity\r\n  function vaultUsersQuantity(address vault) external view returns (uint256);\r\n\r\n  function fundKeeperEarned(address vault) external view returns (uint256);\r\n\r\n  function vaultRewards(address vault, address token, uint256 idx) external view returns (uint256);\r\n\r\n  function vaultRewardsLength(address vault, address token) external view returns (uint256);\r\n\r\n  function strategyEarnedSnapshots(address strategy, uint256 idx) external view returns (uint256);\r\n\r\n  function strategyEarnedSnapshotsTime(address strategy, uint256 idx) external view returns (uint256);\r\n\r\n  function strategyEarnedSnapshotsLength(address strategy) external view returns (uint256);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/base/interface/ISmartVault.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface ISmartVault {\r\n\r\n  function setStrategy(address _strategy) external;\r\n\r\n  function changeActivityStatus(bool _active) external;\r\n\r\n  function changePpfsDecreaseAllowed(bool _value) external;\r\n\r\n  function setLockPeriod(uint256 _value) external;\r\n\r\n  function setLockPenalty(uint256 _value) external;\r\n\r\n  function doHardWork() external;\r\n\r\n  function notifyTargetRewardAmount(address _rewardToken, uint256 reward) external;\r\n\r\n  function notifyRewardWithoutPeriodChange(address _rewardToken, uint256 reward) external;\r\n\r\n  function deposit(uint256 amount) external;\r\n\r\n  function depositAndInvest(uint256 amount) external;\r\n\r\n  function depositFor(uint256 amount, address holder) external;\r\n\r\n  function withdraw(uint256 numberOfShares) external;\r\n\r\n  function exit() external;\r\n\r\n  function getAllRewards() external;\r\n\r\n  function getReward(address rt) external;\r\n\r\n  function underlying() external view returns (address);\r\n\r\n  function strategy() external view returns (address);\r\n\r\n  function getRewardTokenIndex(address rt) external view returns (uint256);\r\n\r\n  function getPricePerFullShare() external view returns (uint256);\r\n\r\n  function underlyingUnit() external view returns (uint256);\r\n\r\n  function duration() external view returns (uint256);\r\n\r\n  function underlyingBalanceInVault() external view returns (uint256);\r\n\r\n  function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n  function underlyingBalanceWithInvestmentForHolder(address holder) external view returns (uint256);\r\n\r\n  function availableToInvestOut() external view returns (uint256);\r\n\r\n  function earned(address rt, address account) external view returns (uint256);\r\n\r\n  function earnedWithBoost(address rt, address account) external view returns (uint256);\r\n\r\n  function rewardPerToken(address rt) external view returns (uint256);\r\n\r\n  function lastTimeRewardApplicable(address rt) external view returns (uint256);\r\n\r\n  function rewardTokensLength() external view returns (uint256);\r\n\r\n  function active() external view returns (bool);\r\n\r\n  function rewardTokens() external view returns (address[] memory);\r\n\r\n  function periodFinishForToken(address _rt) external view returns (uint256);\r\n\r\n  function rewardRateForToken(address _rt) external view returns (uint256);\r\n\r\n  function lastUpdateTimeForToken(address _rt) external view returns (uint256);\r\n\r\n  function rewardPerTokenStoredForToken(address _rt) external view returns (uint256);\r\n\r\n  function userRewardPerTokenPaidForToken(address _rt, address account) external view returns (uint256);\r\n\r\n  function rewardsForToken(address _rt, address account) external view returns (uint256);\r\n\r\n  function userLastWithdrawTs(address _user) external returns (uint256);\r\n\r\n  function userLastDepositTs(address _user) external returns (uint256);\r\n\r\n  function userBoostTs(address _user) external returns (uint256);\r\n\r\n  function userLockTs(address _user) external returns (uint256);\r\n\r\n  function addRewardToken(address rt) external;\r\n\r\n  function removeRewardToken(address rt) external;\r\n\r\n  function stop() external;\r\n\r\n  function ppfsDecreaseAllowed() external view returns (bool);\r\n\r\n  function lockPeriod() external view returns (uint256);\r\n\r\n  function lockPenalty() external view returns (uint256);\r\n\r\n  function lockAllowed() external view returns (bool);\r\n}\r\n"
    },
    "contracts/base/interface/IControllable.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n/**\r\n* By using this software, you understand, acknowledge and accept that Tetu\r\n* and/or the underlying software are provided “as is” and “as available”\r\n* basis and without warranties or representations of any kind either expressed\r\n* or implied. Any use of this open source software released under the ISC\r\n* Internet Systems Consortium license is done at your own risk to the fullest\r\n* extent permissible pursuant to applicable law any and all liability as well\r\n* as all warranties, including any fitness for a particular purpose with respect\r\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IControllable {\r\n\r\n  function isController(address _contract) external view returns (bool);\r\n\r\n  function isGovernance(address _contract) external view returns (bool);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}