{"AaveLendingContract.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract AaveLendingContract is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address private aaveProviderAddress = 0x744C1aaA95232EeF8A9994C4E0b3a89659D9AB79;\r\n    address private aaveLendingContractAddress = 0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf;\r\n    address private masterWallet;\r\n    address private myContractAddress;\r\n    uint256 private feePercentage;\r\n\r\n    struct userInvestment{\r\n        address assetAddress;\r\n        uint256 totalInvestment;\r\n        uint256 numberOfDeposits;\r\n        uint256 lastUpdateDateInSecond;\r\n        uint256 lastClaimedDateInSecond;\r\n    }\r\n\r\n    mapping (bytes32 =\u003e userInvestment) public userInvestments;\r\n    \r\n    constructor(address masterWalletAddress, uint256 fee){\r\n        myContractAddress = address(this);\r\n        masterWallet = masterWalletAddress;\r\n        feePercentage = fee;\r\n    }\r\n\r\n    function getPrivateUniqueKey(address assetAddress) private pure returns (bytes32){\r\n        \r\n        return keccak256(abi.encodePacked(assetAddress));\r\n    }\r\n\r\n    function getInvestment(address assetAddress) public view returns (userInvestment memory){\r\n        \r\n        return userInvestments[getPrivateUniqueKey(assetAddress)];\r\n    }\r\n\r\n    function saveInvestment(userInvestment memory investment) private returns (userInvestment memory){\r\n\r\n        userInvestments[getPrivateUniqueKey(investment.assetAddress)] = investment;\r\n\r\n        return investment;\r\n    }\r\n\r\n    function deposit(address assetAddress, uint256 amount) external onlyOwner{\r\n       \r\n        userInvestment memory investment = getInvestment(assetAddress);\r\n      \r\n        transferAssetToContract(assetAddress, amount, msg.sender);\r\n        giveApprovalForLending(assetAddress, amount);\r\n        depositFromLending(assetAddress, amount);\r\n\r\n        investment.assetAddress = assetAddress;\r\n        investment.totalInvestment = investment.totalInvestment + amount;\r\n        investment.numberOfDeposits++;\r\n        investment.lastUpdateDateInSecond = getDateTimeNowInSeconds();\r\n\r\n        saveInvestment(investment);       \r\n    }\r\n\r\n    function claim(address assetAddress, address toAddress) external onlyOwner {\r\n\r\n        userInvestment memory investment = getInvestment(assetAddress);\r\n\r\n        if(investment.totalInvestment \u003c= 0){\r\n            revert(\"Your amount is less than or equal to Zero!\");\r\n        }\r\n\r\n        if(getDateTimeNowInSeconds().sub(investment.lastUpdateDateInSecond) \u003c 86400)// 24 hr _ 86400\r\n        {\r\n             revert(\"Investment time is minimum 24hr!\");\r\n        }\r\n\r\n        uint256 balanceAtoken = getATokenBalance(assetAddress);\r\n\r\n        uint256 amountDifference = balanceAtoken.sub(investment.totalInvestment);\r\n\r\n        uint256 masterWalletAmount = (amountDifference.mul(feePercentage)).div(100);\r\n\r\n        if(withdrawFromLending(assetAddress, balanceAtoken) \u003e 0){\r\n\r\n            //To master\r\n            transferMoney(assetAddress, masterWallet, masterWalletAmount);\r\n    \r\n            //To client\r\n            transferMoney(assetAddress, toAddress, balanceAtoken.sub(masterWalletAmount));\r\n\r\n            investment.totalInvestment = investment.totalInvestment.sub(balanceAtoken);\r\n            investment.lastClaimedDateInSecond = getDateTimeNowInSeconds();\r\n\r\n            saveInvestment(investment);\r\n        } \r\n        else{\r\n            revert(\"Withdraw failed!\");\r\n        }\r\n    }   \r\n\r\n    function transferAssetToContract(address assetAddress, uint256 amount, address senderAddress) private {\r\n        \r\n        IERC20(assetAddress).transferFrom(senderAddress, myContractAddress, amount);\r\n    }\r\n\r\n    function giveApprovalForLending(address assetAddress, uint256 amount) private {\r\n\r\n        IERC20(assetAddress).approve(aaveLendingContractAddress, amount); \r\n    }\r\n\r\n    function depositFromLending(address assetAddress, uint256 amount) private {\r\n\r\n        IERC20(aaveLendingContractAddress).deposit(assetAddress, amount, myContractAddress, 0);    \r\n    }\r\n\r\n    function withdrawFromLending(address assetAddress, uint256 amount) private returns (uint256){\r\n\r\n        return IERC20(aaveLendingContractAddress).withdraw(assetAddress, amount, myContractAddress);    \r\n    }   \r\n\r\n    function transferMoney(address assetAddress, address toAddress, uint256 amount) private {        \r\n        \r\n        IERC20(assetAddress).transfer(toAddress, amount);\r\n    }\r\n\r\n    function getDateTimeNowInSeconds() private view returns (uint256){\r\n\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getATokenBalance(address assetAddress) public view returns(uint256){\r\n        (address aTokenAddress,,) = IERC20(aaveProviderAddress).getReserveTokensAddresses(assetAddress);\r\n        \r\n        return IERC20(aTokenAddress).balanceOf(myContractAddress);\r\n    }\r\n\r\n    function getBalance(address assetAddress) external view returns(uint256){      \r\n        return IERC20(assetAddress).balanceOf(myContractAddress);\r\n    }\r\n\r\n}\r\n "},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function getLendingPool() external returns (address);\r\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\r\n    function withdraw( address asset, uint256 amount, address to ) external returns (uint256);\r\n    function getReserveTokensAddresses(address asset) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @notice Contract is a inheritable smart contract that will add a\r\n * New modifier called onlyOwner available in the smart contract inherting it\r\n *\r\n * onlyOwner makes a function only callable from the Token owner\r\n *\r\n */\r\ncontract Ownable {\r\n    // _owner is the owner of the Token\r\n    address private _owner;\r\n\r\n    /**\r\n     * Event OwnershipTransferred is used to log that a ownership change of the token has occured\r\n     */\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * Modifier\r\n     * We create our own function modifier called onlyOwner, it will Require the current owner to be\r\n     * the same as msg.sender\r\n     */\r\n    modifier onlyOwner() {\r\n        require(\r\n            _owner == msg.sender,\r\n            \"Ownable: only owner can call this function\"\r\n        );\r\n        // This _; is not a TYPO, It is important for the compiler;\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @notice owner() returns the currently assigned owner of the Token\r\n     *\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @notice renounceOwnership will set the owner to zero address\r\n     * This will make the contract owner less, It will make ALL functions with\r\n     * onlyOwner no longer callable.\r\n     * There is no way of restoring the owner\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @notice transferOwnership will assign the {newOwner} as owner\r\n     *\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice _transferOwnership will assign the {newOwner} as owner\r\n     *\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler\u0027s built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n"}}