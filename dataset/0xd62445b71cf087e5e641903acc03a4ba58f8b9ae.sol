{{
  "language": "Solidity",
  "sources": {
    "/contracts/Bridgers3_0.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./lib/TransferHelper.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\r\n\r\n/// @notice Bridgers V3\r\ncontract Bridgers3 is ReentrancyGuard, Ownable, EIP712 {\r\n    using SafeMath for uint256;\r\n    using ECDSA for bytes32;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    struct Order {\r\n        uint256 fee; \r\n        address fromToken; // deposit token address\r\n        address toToken; // dest token address\r\n        string toTokenName; // dest token name\r\n        address destination; // dest address\r\n        string desName; // dest name\r\n        uint256 fromAmount; // deposit amt\r\n        uint256 minReturnAmount; // min receive amt\r\n        address midToken;  // mid token address\r\n        uint256 minMidAmount; // min middle amt\r\n        address _dex; // dex address\r\n        bytes _data; // dex calldata\r\n    }\r\n\r\n    string private constant SIGNING_DOMAIN = \"Bridgers\";\r\n    string private constant SIGNATURE_VERSION = \"3\";\r\n\r\n    bytes32 private constant ORDER_TYPE =\r\n        keccak256(\r\n            \"Order(uint256 fee,address fromToken,address toToken,string toTokenName,address destination,string desName,uint256 fromAmount,uint256 minReturnAmount,address midToken,uint256 minMidAmount,address _dex,bytes _data)\"\r\n        );\r\n\r\n    event SwapWithDex(uint256 fromAmount, address fromToken, uint256 minReturnAmount, string toTokenName, string desName);\r\n    event SwapFromEthWithDex(uint256 fromAmount, uint256 minReturnAmount, string toTokenName, string desName);\r\n    event SwapToEthWithDex(uint256 fromAmount, address fromToken, uint256 minReturnAmount, string toTokenName, string desName);\r\n\r\n    event Swap(uint256 fromAmount, address fromToken, uint256 minReturnAmount, string toToken, string destination);\r\n    event SwapFromEth(uint256 fromAmount, uint256 minReturnAmount, string toToken, string destination);\r\n\r\n    event CallDexToETH(uint256 fromAmt, address fromToken, uint256 toMinAmt);\r\n    event CallDexFromETH(uint256 fromAmt, uint256 toMinAmt, address toToken);\r\n    event Calldex(uint256 fromAmt, address fromToken, uint256 toMinAmt, address toToken);\r\n\r\n    event Withdtraw(address token, address destination, uint256 amount);\r\n    event WithdrawETH(address destination, uint256 amount);\r\n\r\n    event SwapTokenToToken( uint256 fromAmount,  address fromToken, uint256 toTokenAmount, address toToken, address destination, address _dex);\r\n    event SwapTokenToETH(uint256 fromAmount, address fromToken, uint256 toAmount, address destination, address _dex);\r\n    event SwapETHToToken(uint256 fromAmount, uint256 toTokenAmount, address toToken, address destination, address _dex);\r\n\r\n    constructor() EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {\r\n        name = \"Bridgers V3\";\r\n        symbol = \"Bridgers-V3\";\r\n    }\r\n\r\n    // Function to receive Ether. msg.data must be empty\r\n    receive() external payable {}\r\n\r\n    // Fallback function is called when msg.data is not empty\r\n    fallback() external payable {}\r\n\r\n    function _hashOrder(Order memory _order) private pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    ORDER_TYPE,\r\n                    _order.fee,\r\n                    _order.fromToken,\r\n                    _order.toToken,\r\n                    keccak256(bytes(_order.toTokenName)),\r\n                    _order.destination,\r\n                    keccak256(bytes(_order.desName)),\r\n                    _order.fromAmount,\r\n                    _order.minReturnAmount,\r\n                    _order.midToken,\r\n                    _order.minMidAmount,\r\n                    _order._dex,\r\n                    keccak256(_order._data)\r\n                )\r\n            );\r\n    }\r\n\r\n    /// @notice single chain - token to token\r\n    function swapTokenToToken(Order memory order, bytes memory _sign) external nonReentrant {\r\n        require(\r\n            owner() == _hashTypedDataV4(_hashOrder(order)).recover(_sign),\r\n            \"CALL_DATA_MUST_SIGNED_BY_OWNER\"\r\n        );\r\n        require(order.fromAmount > 0, \"DEPOSIT_AMOUNT_CAN_NOT_BE_0\");\r\n        uint256 _fromTokenBalanceOrigin = IERC20(order.fromToken).balanceOf(address(this));\r\n        TransferHelper.safeTransferFrom(\r\n            order.fromToken,\r\n            msg.sender,\r\n            address(this),\r\n            order.fromAmount\r\n        );\r\n        uint256 _inputAmount = IERC20(order.fromToken)\r\n            .balanceOf(address(this))\r\n            .sub(_fromTokenBalanceOrigin);\r\n        require(\r\n            _inputAmount >= order.fromAmount,\r\n            \"TOKEN_AMOUNT_MUST_NOT_SMALL_THAN_FROM_AMOUNT\"\r\n        );\r\n        uint256 feeAmount = _inputAmount.mul(order.fee).div(1000000);\r\n        TransferHelper.safeApprove(\r\n            order.fromToken,\r\n            order._dex,\r\n            _inputAmount.sub(feeAmount)\r\n        );\r\n        uint256 _toTokenBalanceOrigin = IERC20(order.toToken).balanceOf(\r\n            address(this)\r\n        );\r\n        (bool success, ) = order._dex.call(order._data);\r\n        require(success, \"DEX_SWAP_FAILED\");\r\n        uint256 _toTokenInputAmt = IERC20(order.toToken)\r\n            .balanceOf(address(this))\r\n            .sub(_toTokenBalanceOrigin);\r\n        require(\r\n            _toTokenInputAmt >= order.minReturnAmount,\r\n            \"NO_ENOUGH_TOTOKEN_FROM_DEX\"\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            order.toToken,\r\n            order.destination,\r\n            _toTokenInputAmt\r\n        );\r\n        emit SwapTokenToToken(\r\n            order.fromAmount,\r\n            order.fromToken,\r\n            _toTokenInputAmt,\r\n            order.toToken,\r\n            order.destination,\r\n            order._dex\r\n        );\r\n    }\r\n\r\n    /// @notice single chain - token to eth\r\n    function swapTokenToETH(Order memory order, bytes memory _sign) external nonReentrant {\r\n        require(\r\n            owner() == _hashTypedDataV4(_hashOrder(order)).recover(_sign),\r\n            \"CALL_DATA_MUST_SIGNED_BY_OWNER\"\r\n        );\r\n        require(order.fromAmount > 0, \"DEPOSIT_AMOUNT_CAN_NOT_BE_0\");\r\n        uint256 _fromTokenBalanceOrigin = IERC20(order.fromToken).balanceOf(address(this));\r\n        TransferHelper.safeTransferFrom(\r\n            order.fromToken,\r\n            msg.sender,\r\n            address(this),\r\n            order.fromAmount\r\n        );\r\n        uint256 _inputAmount = IERC20(order.fromToken)\r\n            .balanceOf(address(this))\r\n            .sub(_fromTokenBalanceOrigin);\r\n        require(\r\n            _inputAmount >= order.fromAmount,\r\n            \"TOKEN_AMOUNT_MUST_NOT_SMALL_THAN_DEPOSIT_AMOUNT\"\r\n        );\r\n        uint256 feeAmount = _inputAmount.mul(order.fee).div(1000000);\r\n        TransferHelper.safeApprove(\r\n            order.fromToken,\r\n            order._dex,\r\n            _inputAmount.sub(feeAmount)\r\n        );\r\n        uint256 _toBalanceOrigin = address(this).balance;\r\n        (bool success, ) = order._dex.call(order._data);\r\n        require(success, \"DEX_SWAP_FAILED\");\r\n        uint256 _toInputAmt = address(this).balance.sub(_toBalanceOrigin);\r\n        require(_toInputAmt >= order.minReturnAmount, \"NO_ENOUGH_TOTOKEN_FROM_DEX\");\r\n        TransferHelper.safeTransferETH(order.destination, _toInputAmt);\r\n        emit SwapTokenToETH(\r\n            order.fromAmount,\r\n            order.fromToken,\r\n            _toInputAmt,\r\n            order.destination,\r\n            order._dex\r\n        );\r\n    }\r\n\r\n    /// @notice single chain - eth to token\r\n    function swapETHToToken(Order memory order, bytes memory _sign) external payable nonReentrant\r\n    {\r\n        require(\r\n            owner() == _hashTypedDataV4(_hashOrder(order)).recover(_sign),\r\n            \"CALL_DATA_MUST_SIGNED_BY_OWNER\"\r\n        );\r\n        require(\r\n            msg.value >= order.fromAmount && order.fromAmount > 0,\r\n            \"TOKEN_AMOUNT_MUST_NOT_SMALL_THAN_DEPOSIT_AMOUNT\"\r\n        );\r\n        uint256 feeAmount = order.fromAmount.mul(order.fee).div(1000000);\r\n        uint256 _toTokenBalanceOrigin = IERC20(order.toToken).balanceOf(\r\n            address(this)\r\n        );\r\n        (bool success, ) = order._dex.call{value: order.fromAmount.sub(feeAmount)}(\r\n            order._data\r\n        );\r\n        require(success, \"DEX_SWAP_FAILED\");\r\n        uint256 _toTokenInputAmt = IERC20(order.toToken)\r\n            .balanceOf(address(this))\r\n            .sub(_toTokenBalanceOrigin);\r\n        require(\r\n            _toTokenInputAmt >= order.minReturnAmount,\r\n            \"NO_ENOUGH_TOTOKEN_FROM_DEX\"\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            order.toToken,\r\n            order.destination,\r\n            _toTokenInputAmt\r\n        );\r\n        emit SwapETHToToken(\r\n            order.fromAmount,\r\n            _toTokenInputAmt,\r\n            order.toToken,\r\n            order.destination,\r\n            order._dex\r\n        );\r\n    }\r\n\r\n    /// @notice cross chain with dex - token to token\r\n    function swapWithDex(Order memory order, bytes memory _sign)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(\r\n            owner() == _hashTypedDataV4(_hashOrder(order)).recover(_sign),\r\n            \"CALL_DATA_MUST_SIGNED_BY_OWNER\"\r\n        );\r\n        require(order.fromAmount > 0, \"DEPOSIT_AMOUNT_CAN_NOT_BE_0\");\r\n\r\n        uint256 _fromTokenBalanceOrigin = IERC20(order.fromToken).balanceOf(\r\n            address(this)\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            order.fromToken,\r\n            msg.sender,\r\n            address(this),\r\n            order.fromAmount\r\n        );\r\n        require(\r\n            IERC20(order.fromToken).balanceOf(address(this)).sub(\r\n                _fromTokenBalanceOrigin\r\n            ) >= order.fromAmount,\r\n            \"TOKEN_AMOUNT_MUST_NOT_SMALL_THAN_DEPOSIT_AMOUNT\"\r\n        );\r\n        TransferHelper.safeApprove(\r\n            order.fromToken,\r\n            order._dex,\r\n            order.fromAmount\r\n        );\r\n        uint256 _toBalanceOrigin = IERC20(order.midToken).balanceOf(\r\n            address(this)\r\n        );\r\n        (bool success, ) = order._dex.call(order._data);\r\n        require(success, \"DEX_SWAP_FAILED\");\r\n        require(\r\n            IERC20(order.midToken).balanceOf(address(this)).sub(\r\n                _toBalanceOrigin\r\n            ) >= order.minMidAmount,\r\n            \"LESS_THAN_MIN\"\r\n        );\r\n        emit SwapWithDex(\r\n            order.fromAmount,\r\n            order.fromToken,\r\n            order.minReturnAmount,\r\n            order.toTokenName,\r\n            order.desName\r\n        );\r\n    }\r\n\r\n    /// @notice cross chain with dex - token to eth\r\n    function swapToETHWithDex(Order memory order, bytes memory _sign) external nonReentrant\r\n    {\r\n        require(\r\n            owner() == _hashTypedDataV4(_hashOrder(order)).recover(_sign),\r\n            \"CALL_DATA_MUST_SIGNED_BY_OWNER\"\r\n        );\r\n        require(order.fromAmount > 0, \"DEPOSIT_AMOUNT_CAN_NOT_BE_0\");\r\n\r\n        uint256 _fromTokenBalanceOrigin = IERC20(order.fromToken).balanceOf(\r\n            address(this)\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            order.fromToken,\r\n            msg.sender,\r\n            address(this),\r\n            order.fromAmount\r\n        );\r\n        require(\r\n            IERC20(order.fromToken).balanceOf(address(this)).sub(\r\n                _fromTokenBalanceOrigin\r\n            ) >= order.fromAmount,\r\n            \"TOKEN_AMOUNT_MUST_NOT_SMALL_THAN_DEPOSIT_AMOUNT\"\r\n        );\r\n        TransferHelper.safeApprove(\r\n            order.fromToken,\r\n            order._dex,\r\n            order.fromAmount\r\n        );\r\n        uint256 _toBalanceOrigin = address(this).balance;\r\n        (bool success, ) = order._dex.call(order._data);\r\n        require(success, \"DEX_SWAP_FAILED\");\r\n        uint256 _toInputAmt = address(this).balance.sub(_toBalanceOrigin);\r\n        require(_toInputAmt >= order.minMidAmount, \"LESS_THAN_MIN\");\r\n        emit SwapToEthWithDex(\r\n            order.fromAmount,\r\n            order.fromToken,\r\n            order.minReturnAmount,\r\n            order.toTokenName,\r\n            order.desName\r\n        );\r\n    }\r\n\r\n    /// @notice cross chain with dex - eth to token\r\n    function swapFromEthWithDex(Order memory order, bytes memory _sign) external payable nonReentrant\r\n    {\r\n        require(\r\n            owner() == _hashTypedDataV4(_hashOrder(order)).recover(_sign),\r\n            \"CALL_DATA_MUST_SIGNED_BY_OWNER\"\r\n        );\r\n        require(msg.value > 0, \"NO_ETH_INPUT\");\r\n        require(\r\n            msg.value == order.fromAmount,\r\n            \"MSG_VALUE_MUST_EQUAL_DEPOSIT_AMMOUNT\"\r\n        );\r\n\r\n        uint256 midBalanceOrigin = IERC20(order.midToken).balanceOf(address(this));\r\n        (bool success, ) = order._dex.call{value: msg.value}(order._data);\r\n        require(success, \"DEX_SWAP_FAILED\");\r\n        uint256 midInputAmt = IERC20(order.midToken)\r\n            .balanceOf(address(this))\r\n            .sub(midBalanceOrigin);\r\n        require(midInputAmt >= order.minMidAmount, \"LESS_THAN_MIN\");\r\n        emit SwapFromEthWithDex(\r\n            order.fromAmount,\r\n            order.minReturnAmount,\r\n            order.toTokenName,\r\n            order.desName\r\n        );\r\n    }\r\n\r\n    /// @notice cross chain - token to others\r\n    function swap(address fromToken, string memory toToken, string memory destination, uint256 fromAmount, uint256 minReturnAmount\r\n    ) external nonReentrant {\r\n        require(fromToken != address(0), \"FROMTOKEN_CANT_T_BE_0\"); \r\n        require(fromAmount > 0, \"FROM_TOKEN_AMOUNT_MUST_BE_MORE_THAN_0\");\r\n        uint256 _inputAmount; \r\n        uint256 _fromTokenBalanceOrigin = IERC20(fromToken).balanceOf(address(this));\r\n        TransferHelper.safeTransferFrom(fromToken, msg.sender, address(this), fromAmount);\r\n        uint256 _fromTokenBalanceNew = IERC20(fromToken).balanceOf(address(this));\r\n        _inputAmount = _fromTokenBalanceNew.sub(_fromTokenBalanceOrigin);\r\n        require(_inputAmount >= fromAmount, \"TRANSFER_LESS_THAN_FROM_AMT\");\r\n        emit Swap(fromAmount, fromToken, minReturnAmount, toToken, destination);\r\n    }\r\n\r\n    /// @notice cross chain - eth to others\r\n    function swapFromEth(string memory toToken, string memory destination, uint256 minReturnAmount\r\n    ) external payable nonReentrant {\r\n        uint256 _ethAmount = msg.value;\r\n        require(_ethAmount > 0, \"ETH_AMOUNT_MUST_BE_MORE_THAN_0\");\r\n        emit SwapFromEth(_ethAmount, minReturnAmount, toToken, destination);\r\n    }\r\n\r\n\r\n    function callDexFromETH(uint256 fromAmt, address toToken, uint256 toMinAmt, address _dex, bytes calldata data\r\n    ) external payable onlyOwner {\r\n        require(_dex != address(0), \"DEX_CAN_NOT_BE_0\");\r\n        require(toMinAmt > 0, \"MIN_AMOUNT_MUST_BE_MORE_THAN_0\");\r\n        require(fromAmt > 0, \"VALUE_MUST_BE_MORE_THAN_0\");\r\n        uint256 ethBalance = address(this).balance;\r\n        require(fromAmt <= ethBalance, \"INSUFFIENT_BALANCE\");\r\n        uint256 _toBalanceOrigin = IERC20(toToken).balanceOf(address(this));\r\n        (bool success, ) = _dex.call{value: fromAmt}(data);\r\n        require(success, \"DEX_SWAP_FAILED\");\r\n        uint256 toTokenAmt = IERC20(toToken).balanceOf(address(this)).sub(_toBalanceOrigin);\r\n        require(toTokenAmt >= toMinAmt, \"LESS_THAN_MIN_AMT\");\r\n        emit CallDexFromETH( fromAmt, toMinAmt, toToken);\r\n    }\r\n\r\n    function callDexToETH(address fromToken, uint256 fromAmt, uint256 toMinAmt, address _dex, bytes calldata data\r\n    ) external onlyOwner {\r\n        require(fromToken != address(0), \"FROM_TOKEN_CAN_NOT_BE_0_ADDRESS\");\r\n        require(_dex != address(0), \"DEX_CAN_NOT_BE_0\");\r\n        require(toMinAmt > 0, \"MIN_AMOUNT_MUST_BE_MORE_THAN_0\");\r\n        uint256 _fromBalance = IERC20(fromToken).balanceOf(address(this));\r\n        require(fromAmt <= _fromBalance, \"INSUFFIENT_BALANCE\");\r\n        TransferHelper.safeApprove(fromToken, _dex, fromAmt);\r\n        uint256 _ethBalanceOrigin = address(this).balance;\r\n        (bool success, ) = _dex.call(data);\r\n        require(success, \"DEX_SWAP_FAILED\");\r\n        uint256 toEth = address(this).balance.sub(_ethBalanceOrigin);\r\n        require(toEth >= toMinAmt, \"LESS_THAN_MIN_AMT\");\r\n        emit CallDexToETH(fromAmt, fromToken, toMinAmt);\r\n    }\r\n\r\n    function callDex(address fromToken, uint256 fromAmt, address toToken, uint256 toMinAmt, address _dex, bytes calldata data\r\n    ) external onlyOwner {\r\n        require(fromToken != address(0), \"FROM_TOKEN_CAN_NOT_BE_0_ADDRESS\");\r\n        require(_dex != address(0), \"DEX_CAN_NOT_BE_0\");\r\n        require(toMinAmt > 0, \"MIN_AMOUNT_MUST_BE_MORE_THAN_0\");\r\n        uint256 _fromBalance = IERC20(fromToken).balanceOf(address(this));\r\n        require(fromAmt <= _fromBalance, \"INSUFFIENT_BALANCE\");\r\n        TransferHelper.safeApprove(fromToken, _dex, fromAmt);\r\n        uint256 _toBalanceOrigin = IERC20(toToken).balanceOf(address(this));\r\n        (bool success, ) = _dex.call(data);\r\n        require(success, \"DEX_SWAP_FAILED\");\r\n        uint256 toTokenAmt = IERC20(toToken).balanceOf(address(this)).sub(_toBalanceOrigin);\r\n        require(toTokenAmt >= toMinAmt, \"LESS_THAN_MIN_AMT\");\r\n        emit Calldex(fromAmt, fromToken, toMinAmt, toToken);\r\n    }\r\n\r\n    function withdrawETH(address destination, uint256 amount) external onlyOwner {\r\n        require(destination != address(0), \"DESTINATION_CANNT_BE_0_ADDRESS\");\r\n        uint256 balance = address(this).balance;\r\n        require(balance >= amount, \"AMOUNT_CANNT_MORE_THAN_BALANCE\");\r\n        TransferHelper.safeTransferETH(destination, amount);\r\n        emit WithdrawETH(destination, amount);\r\n    }\r\n\r\n    function withdraw(address token, address destination, uint256 amount) external onlyOwner {\r\n        require(destination != address(0), \"DESTINATION_CANNT_BE_0_ADDRESS\");\r\n        require(token != address(0), \"TOKEN_MUST_NOT_BE_0\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        require(balance >= amount, \"AMOUNT_CANNT_MORE_THAN_BALANCE\");\r\n        TransferHelper.safeTransfer(token, destination, amount);\r\n        emit Withdtraw(token, destination, amount);\r\n    }\r\n}\r\n"
    },
    "/contracts/lib/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}