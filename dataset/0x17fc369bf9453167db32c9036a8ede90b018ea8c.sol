{{
  "language": "Solidity",
  "sources": {
    "contracts/Utils/Upgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Utils/Tracker.sol\";\n\nimport \"../Interfaces/IUpgradeNft.sol\";\nimport \"../Interfaces/IBedroomNft.sol\";\n\n/// @title Upgrader Contract\n/// @author Sleepn\n/// @notice The Upgrader Contract is used to upgrade a Bedroom NFT\ncontract Upgrader {\n    /// @notice Bedroom NFT Contract address\n    IBedroomNft public immutable bedroomNftContract;\n    /// @notice Upgrade NFT Contract address\n    IUpgradeNft public immutable upgradeNftContract;\n    /// @notice Tracker Contract address\n    Tracker public immutable trackerInstance;\n    /// @notice Dex Contract address\n    address public immutable dexAddress;\n\n    /// @notice Upgrade NFT linked to a Bedroom NFT Event\n    event UpgradeNftLinked(\n        uint256 indexed bedroomNftId,\n        uint256 indexed upgradeNftId,\n        address owner\n    );\n    /// @notice Upgrade NFT unlinked from a Bedroom NFT Event\n    event UpgradeNftUnlinked(\n        uint256 indexed bedroomNftId,\n        uint256 indexed upgradeNftId,\n        address owner\n    );\n\n    /// @notice Score cannot be upgraded Error - Score cannot be greater than 100\n    error ScoreCannotBeGreaterThan100(uint16 valueToAdd);\n    /// @notice NFT not owned Error - Upgrade NFT is not owned by the user\n    error NftNotOwned(uint256 tokenId, address caller);\n    /// @notice Upgrade NFT already linked Error - Upgrade NFT is already linked to a Bedroom NFT\n    error IsAlreadyLinked(uint256 tokenId);\n    /// @notice Upgrade NFT is not linked Error - Upgrade NFT is not linked to a Bedroom NFT\n    error IsNotLinked(uint256 tokenId);\n    /// @notice Restricted Access Error - Wrong caller\n    error RestrictedAccess(address caller);\n    /// @notice Level too low Error - Level is too low to upgrade\n    error LevelTooLow(uint16 levelMin, uint256 bedroomNftLevel);\n    /// @notice State not updated Error - State is not updated in tracker contract\n    error StateNotUpdated();\n\n    /// @notice Initializer\n    /// @param _bedroomNftContractAddr Bedroom NFT Contract address\n    /// @param _dexAddress Dex Contract address\n    constructor(address _bedroomNftContractAddr, address _dexAddress) {\n        upgradeNftContract = IUpgradeNft(msg.sender);\n        bedroomNftContract = IBedroomNft(_bedroomNftContractAddr);\n        trackerInstance = new Tracker(\n            _bedroomNftContractAddr,\n            msg.sender\n        );\n        dexAddress = _dexAddress;\n    }\n\n    /// @notice Links an upgrade NFT to a Bedroom NFT\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @param _upgradeNftId The ID of the upgrade NFT\n    /// @param _designURI The new design URI of the bedroom NFT\n    function linkUpgradeNft(\n        address _owner,\n        uint256 _bedroomNftId,\n        uint256 _upgradeNftId,\n        string memory _designURI\n    ) external {\n        /// @dev Checks who is calling the function\n        if (msg.sender != dexAddress) {\n            revert RestrictedAccess(msg.sender);\n        }\n\n        /// @dev Returns the data of the Bedroom NFT\n        IBedroomNft.NftSpecifications memory nftSpecifications =\n            bedroomNftContract.getSpecifications(_bedroomNftId);\n\n        /// @dev Checks if the upgrade NFT is owned by the user\n        if (\n            nftSpecifications.owner != _owner\n                || !trackerInstance.isUpgradeNftOwner(_upgradeNftId, _owner)\n        ) {\n            revert NftNotOwned(_upgradeNftId, _owner);\n        }\n\n        /// @dev Checks if the upgrade NFT is already linked to a Bedroom NFT\n        (uint256 amountOwned, uint256 amountLinked) =\n            trackerInstance.getUpgradeNftAmounts(_owner, _upgradeNftId);\n        if (amountOwned == amountLinked) {\n            revert IsAlreadyLinked(_upgradeNftId);\n        }\n\n        /// @dev Returns the data of the upgrade NFT\n        (\n            ,\n            uint16 _level,\n            uint16 _levelMin,\n            uint16 _value,\n            uint8 _attributeIndex,\n            uint8 _valueToAdd,\n            uint8 _typeNft\n        ) = upgradeNftContract.getData(_upgradeNftId);\n\n        /// @dev Checks the level of the Bedroom NFT\n        if (nftSpecifications.level < _levelMin) {\n            revert LevelTooLow(_levelMin, nftSpecifications.level);\n        }\n\n        if (_typeNft < 4) {\n            /// @dev Checks if the NFT is level up\n            nftSpecifications.level = _level == 0\n                ? nftSpecifications.level\n                : _level + uint16(nftSpecifications.level);\n            /// @dev Checks if the NFT is value up\n            nftSpecifications.value = _value == 0\n                ? nftSpecifications.value\n                : _value + uint16(nftSpecifications.value);\n            /// @dev Checks if the NFT is attribute up\n            if (_typeNft == 2) {\n                uint16[4] memory scores = [\n                    uint16(nftSpecifications.scores),\n                    uint16(nftSpecifications.scores >> 16),\n                    uint16(nftSpecifications.scores >> 32),\n                    uint16(nftSpecifications.scores >> 48)\n                ];\n                if (scores[_attributeIndex] > 100) {\n                    revert ScoreCannotBeGreaterThan100(_valueToAdd);\n                }\n                scores[_attributeIndex] = (\n                    scores[_attributeIndex] + _valueToAdd\n                ) > 100 ? 100 : scores[_attributeIndex] + _valueToAdd;\n                nftSpecifications.scores = uint64(scores[0])\n                    + (uint64(scores[1]) << 16) + (uint64(scores[2]) << 32)\n                    + (uint64(scores[3]) << 48);\n            }\n            /// @dev Updates the Bedroom NFT\n            bedroomNftContract.updateBedroomNft(\n                _bedroomNftId,\n                nftSpecifications.value,\n                nftSpecifications.level,\n                nftSpecifications.scores,\n                _designURI\n            );\n        }\n        /// @dev Links the upgrade NFT to the Bedroom NFT\n        if (\n            !trackerInstance.linkUpgradeNft(\n                _owner, _bedroomNftId, _upgradeNftId\n            )\n        ) {\n            revert StateNotUpdated();\n        }\n        emit UpgradeNftLinked(_bedroomNftId, _upgradeNftId, _owner);\n    }\n\n    /// @notice Uninks an upgrade NFT from a Bedroom NFT\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @param _upgradeNftId The ID of the upgrade NFT\n    /// @param _designURI The new design URI of the bedroom NFT\n    function unlinkUpgradeNft(\n        address _owner,\n        uint256 _bedroomNftId,\n        uint256 _upgradeNftId,\n        string memory _designURI\n    ) external {\n        /// @dev Checks who is calling the function\n        if (msg.sender != dexAddress && msg.sender != address(trackerInstance))\n        {\n            revert RestrictedAccess(msg.sender);\n        }\n\n        /// @dev Checks if the upgrade NFT is owned by the user\n        if (!trackerInstance.isUpgradeNftOwner(_upgradeNftId, _owner)) {\n            revert NftNotOwned(_upgradeNftId, _owner);\n        }\n\n        /// @dev Checks if the upgrade NFT is linked to the Bedroom NFT\n        (, uint256 amountLinked) =\n            trackerInstance.getUpgradeNftAmounts(_owner, _upgradeNftId);\n        if (amountLinked == 0) {\n            revert IsNotLinked(_upgradeNftId);\n        }\n\n        /// @dev Returns the data of the Bedroom NFT\n        IBedroomNft.NftSpecifications memory nftSpecifications =\n            bedroomNftContract.getSpecifications(_bedroomNftId);\n\n        /// @dev Returns the data of the upgrade NFT\n        (\n            ,\n            uint16 _level,\n            ,\n            uint16 _value,\n            uint8 _attributeIndex,\n            uint8 _valueToAdd,\n            uint8 _typeNft\n        ) = upgradeNftContract.getData(_upgradeNftId);\n\n        if (_typeNft < 4) {\n            /// @dev Checks if the NFT is level up\n            nftSpecifications.level = _level == 0\n                ? nftSpecifications.level\n                : uint16(nftSpecifications.level) - _level;\n            /// @dev Checks if the NFT is value up\n            nftSpecifications.value = _value == 0\n                ? nftSpecifications.value\n                : uint16(nftSpecifications.value) - _value;\n            /// @dev Checks if the NFT is attribute up\n            if (_typeNft == 2) {\n                uint16[4] memory scores = [\n                    uint16(nftSpecifications.scores),\n                    uint16(nftSpecifications.scores >> 16),\n                    uint16(nftSpecifications.scores >> 32),\n                    uint16(nftSpecifications.scores >> 48)\n                ];\n                scores[_attributeIndex] -= _valueToAdd;\n                nftSpecifications.scores = uint64(scores[0])\n                    + (uint64(scores[1]) << 16) + (uint64(scores[2]) << 32)\n                    + (uint64(scores[3]) << 48);\n            }\n            /// @dev Updates the Bedroom NFT\n            bedroomNftContract.updateBedroomNft(\n                _bedroomNftId,\n                nftSpecifications.value,\n                nftSpecifications.level,\n                nftSpecifications.scores,\n                _designURI\n            );\n        }\n        if (\n            !trackerInstance.unlinkUpgradeNft(\n                _owner, _bedroomNftId, _upgradeNftId\n            )\n        ) {\n            revert StateNotUpdated();\n        }\n        emit UpgradeNftUnlinked(_bedroomNftId, _upgradeNftId, _owner);\n    }\n}\n"
    },
    "contracts/Utils/Tracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n/// @title Tracker Contract\n/// @author Sleepn\n/// @notice The Tracker Contract is used to track the NFTs\ncontract Tracker {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev Struct to store the NFT IDs of a user\n    struct NftsID {\n        EnumerableSet.UintSet bedroomNfts;\n        EnumerableSet.UintSet upgradeNfts;\n    }\n    /// @dev Struct to store the amounts owned of a NFT ID\n    struct UpgradeNft {\n        uint256 amountOwned;\n        uint256 amountUsed;\n        EnumerableSet.UintSet bedroomNftIds;\n    }\n\n    /// @dev Set of Upgrade NFTs ID settled\n    EnumerableSet.UintSet private upgradeNftIdsSettled;\n\n    /// @dev Maps the NFTs ID Sets to an owner\n    mapping(address => NftsID) private ownerToNftsID;\n    /// @dev Maps the Upgrade NFTs amounts to an owner and an NFT ID\n    mapping(uint256 => mapping(address => UpgradeNft)) private upgradeNftsOwned;\n    /// @dev Maps a set of owners to an Upgrade NFT ID\n    mapping(uint256 => EnumerableSet.AddressSet) private upgradeNftToOwners;\n    /// @dev Maps a set of Upgrade NFT IDs to a Bedroom NFT ID\n    mapping(uint256 => EnumerableSet.UintSet) private bedroomNftToUpgradeNfts;\n\n    /// @notice Bedroom NFT Contract address\n    address public immutable bedroomNftContract;\n    /// @notice Upgrade NFT Contract address\n    address public immutable upgradeNftContract;\n    /// @notice Upgrader Contract address\n    address public immutable upgraderContract;\n\n    /// @notice Restricted Access Error - Wrong caller\n    error RestrictedAccess(address caller);\n    /// @notice Invalid NFT ID Error - NFT ID is invalid\n    error IdAlreadyUsed(uint256 tokenId);\n\n    /// @notice BedroomNft ID Linked To Wallet Event\n    event BedroomNftLinkedToWallet(\n        uint256 indexed bedroomNftId,\n        address indexed owner\n    );\n    /// @notice BedroomNft ID Unlinked From Wallet Event\n    event BedroomNftUnlinkedFromWallet(\n        uint256 indexed bedroomNftId,\n        address indexed owner\n    );\n    /// @notice UpgradeNft ID Linked To Wallet Event\n    event UpgradeNftLinkedToWallet(\n        uint256 indexed upgradeNftId,\n        address indexed owner\n    );\n    /// @notice UpgradeNft ID Unlinked From Wallet Event\n    event UpgradeNftUnlinkedFromWallet(\n        uint256 indexed upgradeNftId,\n        address indexed owner\n    );\n    /// @notice UpgradeNft ID Linked To BedroomNft ID Event\n    event UpgradeNftLinkedToBedroomNft(\n        uint256 indexed upgradeNftId,\n        uint256 indexed bedroomNftId\n    );\n    /// @notice UpgradeNft ID Unlinked From BedroomNft ID Event\n    event UpgradeNftUnlinkedFromBedroomNft(\n        uint256 indexed upgradeNftId,\n        uint256 indexed bedroomNftId\n    );\n\n    /// @notice Constructor\n    /// @param _bedroomNftAddress Bedroom NFT Contract address\n    /// @param _upgradeNftAddress Upgrade NFT Contract address\n    constructor(address _bedroomNftAddress, address _upgradeNftAddress) {\n        bedroomNftContract = _bedroomNftAddress;\n        upgradeNftContract = _upgradeNftAddress;\n        upgraderContract = msg.sender;\n    }\n\n    /// @notice Gets the NFTs owned by an address\n    /// @param _owner The address of the owner\n    /// @return _bedroomNfts The Bedroom NFTs owned by the address\n    /// @return _upgradeNfts The Upgrade NFTs owned by the address\n    function getNftsID(address _owner)\n        external\n        view\n        returns (uint256[] memory _bedroomNfts, uint256[] memory _upgradeNfts)\n    {\n        _bedroomNfts = ownerToNftsID[_owner].bedroomNfts.values();\n        _upgradeNfts = ownerToNftsID[_owner].upgradeNfts.values();\n    }\n\n    /// @notice Adds a Bedroom NFT ID to the tracker\n    /// @param _owner The owner of the NFT\n    /// @param _tokenId The NFT ID\n    /// @return stateUpdated Returns true if the update worked\n    function addBedroomNft(address _owner, uint256 _tokenId)\n        external\n        returns (bool)\n    {\n        if (msg.sender != bedroomNftContract) {\n            revert RestrictedAccess(msg.sender);\n        }\n        emit BedroomNftLinkedToWallet(_tokenId, _owner);\n        return ownerToNftsID[_owner].bedroomNfts.add(_tokenId);\n    }\n\n    /// @notice Remove a Bedroom NFT from the tracker\n    /// @param _owner The owner of the Bedroom NFT\n    /// @param _newOwner The new owner of the Bedroom NFT\n    /// @param _tokenId The ID of the Bedroom NFT\n    /// @return stateUpdated Returns true if the update worked\n    function removeBedroomNft(\n        address _owner,\n        address _newOwner,\n        uint256 _tokenId\n    ) external returns (bool) {\n        if (msg.sender != bedroomNftContract) {\n            revert RestrictedAccess(msg.sender);\n        }\n        for (\n            uint256 i = 0; i < bedroomNftToUpgradeNfts[_tokenId].length(); i++\n        ) {\n            uint256 upgradeNftId = bedroomNftToUpgradeNfts[_tokenId].at(i);\n            bool isRemoved = removeUpgradeNft(_owner, upgradeNftId);\n            bool idAdded = addUpgradeNft(_newOwner, upgradeNftId);\n            if (!isRemoved || !idAdded) {\n                return false;\n            }\n        }\n        if (ownerToNftsID[_owner].bedroomNfts.remove(_tokenId)) {\n            emit BedroomNftUnlinkedFromWallet(_tokenId, _owner);\n            return true;\n        }\n        return false;\n    }\n\n    /// @notice Returns true if the owner of the bedroom NFT is the wallet address\n    /// @param _tokenId The ID of the bedroom NFT\n    /// @param _wallet The wallet address of the owner\n    /// @return isOwner True if the owner of the bedroom NFT is the wallet address\n    function isBedroomNftOwner(uint256 _tokenId, address _wallet)\n        external\n        view\n        returns (bool isOwner)\n    {\n        isOwner = ownerToNftsID[_wallet].bedroomNfts.contains(_tokenId);\n    }\n\n    /// @notice Returns the amount of bedroom NFTs owned by an owner\n    /// @param _owner The owner of the bedroom NFTs\n    /// @return nftsAmount The amount of bedroom NFTs owned by the owner\n    function getBedroomNftsAmount(address _owner)\n        external\n        view\n        returns (uint256 nftsAmount)\n    {\n        nftsAmount = ownerToNftsID[_owner].bedroomNfts.length();\n    }\n\n    /// @notice Adds an upgrade NFT ID to the settled upgrade NFT IDs\n    /// @param _tokenId The ID of the upgrade NFT\n    function settleUpgradeNftData(uint256 _tokenId) external {\n        if (msg.sender != upgradeNftContract) {\n            revert RestrictedAccess(msg.sender);\n        }\n        if (upgradeNftIdsSettled.contains(_tokenId)) {\n            revert IdAlreadyUsed(_tokenId);\n        }\n        upgradeNftIdsSettled.add(_tokenId);\n    }\n\n    /// @notice Returns the upgrade NFT IDs that have been settled\n    /// @return nftIdsSettled The upgrade NFT IDs that have been settled\n    function getUpgradeNftSettled()\n        external\n        view\n        returns (uint256[] memory nftIdsSettled)\n    {\n        nftIdsSettled = upgradeNftIdsSettled.values();\n    }\n\n    /// @notice Returns true if the Upgrade NFT ID is settled\n    /// @param _tokenId The ID of the Upgrade NFT\n    /// @return isSettled True if the Upgrade NFT ID is settled\n    function isIdSettled(uint256 _tokenId)\n        external\n        view\n        returns (bool isSettled)\n    {\n        isSettled = upgradeNftIdsSettled.contains(_tokenId);\n    }\n\n    /// @notice Adds an upgrade NFT to the tracker\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _tokenId The ID of the upgrade NFT\n    /// @return stateUpdated Returns true if the update worked\n    function addUpgradeNft(address _owner, uint256 _tokenId)\n        public\n        returns (bool)\n    {\n        if (\n            msg.sender != upgradeNftContract\n                && msg.sender != bedroomNftContract\n        ) {\n            revert RestrictedAccess(msg.sender);\n        }\n        ownerToNftsID[_owner].upgradeNfts.add(_tokenId);\n        upgradeNftToOwners[_tokenId].add(_owner);\n        ++upgradeNftsOwned[_tokenId][_owner].amountOwned;\n        emit UpgradeNftLinkedToWallet(_tokenId, _owner);\n        return true;\n    }\n\n    /// @notice Removes an upgrade NFT from the tracker\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _tokenId The ID of the upgrade NFT\n    /// @return stateUpdated Returns true if the update worked\n    function removeUpgradeNft(address _owner, uint256 _tokenId)\n        public\n        returns (bool)\n    {\n        if (\n            msg.sender != upgradeNftContract\n                && msg.sender != bedroomNftContract\n        ) {\n            revert RestrictedAccess(msg.sender);\n        }\n        --upgradeNftsOwned[_tokenId][_owner].amountOwned;\n        if (upgradeNftsOwned[_tokenId][_owner].amountOwned == 0) {\n            bool isRemoved1 =\n                ownerToNftsID[_owner].upgradeNfts.remove(_tokenId);\n            bool isRemoved2 = upgradeNftToOwners[_tokenId].remove(_owner);\n            if (!isRemoved1 || !isRemoved2) {\n                return false;\n            }\n        }\n        emit UpgradeNftUnlinkedFromWallet(_tokenId, _owner);\n        return true;\n    }\n\n    /// @notice Returns true if the given address is the owner of the given Upgrade NFT\n    /// @param _tokenId The ID of the Upgrade NFT to check\n    /// @param _wallet The address to check\n    /// @return isOwner True if the given address is the owner of the given Upgrade NFT\n    function isUpgradeNftOwner(uint256 _tokenId, address _wallet)\n        external\n        view\n        returns (bool isOwner)\n    {\n        isOwner = ownerToNftsID[_wallet].upgradeNfts.contains(_tokenId);\n    }\n\n    /// @notice Returns the amount of Upgrade NFTs owned by a wallet\n    /// @param _owner The owner wallet address\n    /// @return nftsAmount The amount of Upgrade NFTs owned by the wallet\n    function getUpgradeNftsAmount(address _owner)\n        external\n        view\n        returns (uint256 nftsAmount)\n    {\n        EnumerableSet.UintSet storage set = ownerToNftsID[_owner].upgradeNfts;\n        for (uint256 i = 0; i < set.length(); ++i) {\n            uint256 tokenId = set.at(i);\n            nftsAmount += upgradeNftsOwned[tokenId][_owner].amountOwned;\n        }\n    }\n\n    /// @notice Returns the amounts of a specific Upgrade NFT owned by a specific wallet\n    /// @param _owner The owner wallet address\n    /// @param _tokenId The ID of the Upgrade NFT\n    /// @return amountOwned The amount of Upgrade NFTs owned by the wallet\n    /// @return amountUsed The amount of Upgrade NFTs used by the wallet\n    function getUpgradeNftAmounts(address _owner, uint256 _tokenId)\n        external\n        view\n        returns (uint256 amountOwned, uint256 amountUsed)\n    {\n        amountOwned = upgradeNftsOwned[_tokenId][_owner].amountOwned;\n        amountUsed = upgradeNftsOwned[_tokenId][_owner].amountUsed;\n    }\n\n    /// @notice Returns the owners of a specified Upgrade NFT\n    /// @param _tokenId The upgrade NFT ID\n    /// @return owners Owners of the specified Upgrade NFT\n    function getUpgradeNftOwners(uint256 _tokenId)\n        external\n        view\n        returns (address[] memory owners)\n    {\n        owners = upgradeNftToOwners[_tokenId].values();\n    }\n\n    /// @notice Links an upgrade NFT to a Bedroom NFT\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @param _upgradeNftId The ID of the upgrade NFT\n    /// @return stateUpdated Returns true if the update worked\n    function linkUpgradeNft(\n        address _owner,\n        uint256 _bedroomNftId,\n        uint256 _upgradeNftId\n    ) external returns (bool) {\n        if (msg.sender != upgraderContract) {\n            revert RestrictedAccess(msg.sender);\n        }\n        bedroomNftToUpgradeNfts[_bedroomNftId].add(_upgradeNftId);\n        ++upgradeNftsOwned[_upgradeNftId][_owner].amountUsed;\n        emit UpgradeNftLinkedToBedroomNft(_upgradeNftId, _bedroomNftId);\n        return true;\n    }\n\n    /// @notice Unlinks an upgrade NFT to a Bedroom NFT\n    /// @param _owner The owner of the upgrade NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @param _upgradeNftId The ID of the upgrade NFT\n    /// @return stateUpdated Returns true if the update worked\n    function unlinkUpgradeNft(\n        address _owner,\n        uint256 _bedroomNftId,\n        uint256 _upgradeNftId\n    ) external returns (bool) {\n        if (msg.sender != upgraderContract) {\n            revert RestrictedAccess(msg.sender);\n        }\n        --upgradeNftsOwned[_upgradeNftId][_owner].amountUsed;\n        if (upgradeNftsOwned[_upgradeNftId][_owner].amountUsed == 0) {\n            if (!bedroomNftToUpgradeNfts[_bedroomNftId].remove(_upgradeNftId))\n            {\n                return false;\n            }\n        }\n        emit UpgradeNftUnlinkedFromBedroomNft(_upgradeNftId, _bedroomNftId);\n        return true;\n    }\n\n    /// @notice Returns the upgrade NFTs linked to a Bedroom NFT\n    /// @param _bedroomNftId The ID of the bedroom NFT\n    /// @return upgradeNfts The upgrade NFTs linked to the Bedroom NFT\n    function getUpgradeNfts(uint256 _bedroomNftId)\n        external\n        view\n        returns (uint256[] memory upgradeNfts)\n    {\n        upgradeNfts = bedroomNftToUpgradeNfts[_bedroomNftId].values();\n    }\n}\n"
    },
    "contracts/Interfaces/IBedroomNft.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IUpgradeNft.sol\";\n\n/// @title Interface of the Bedroom NFT Contract\n/// @author Sleepn\n/// @notice Bedroom NFT is the main NFT of Sleepn app\ninterface IBedroomNft is IERC1155 {\n    /// @notice Scores of a Bedroom NFT\n    struct NftSpecifications {\n        address owner;\n        uint64 scores;\n        uint256 level;\n        uint256 value;\n    }\n\n    /// @notice Emits an event when a Bedroom NFT is minted\n    event BedroomNftMinted(\n        address indexed owner,\n        uint256 indexed requestID,\n        uint256 tokenId,\n        uint16 ambiance,\n        uint16 quality,\n        uint16 luck,\n        uint16 comfortability\n    );\n    /// @notice Emits an event when a Bedroom NFT Score is updated\n    event BedroomNftUpdated(\n        address indexed owner, uint256 indexed tokenId, uint256 timestamp\n    );\n    /// @notice Returned Request ID, Invoker and Token ID\n    event RequestedRandomness(\n        uint256 indexed requestId, address invoker, uint256 indexed tokenId\n    );\n    /// @notice Returned Random Numbers Event, Invoker and Token ID\n    event ReturnedRandomness(\n        uint256[] randomWords,\n        uint256 indexed requestId,\n        uint256 indexed tokenId\n    );\n    /// @notice Base URI Changed Event\n    event BaseURIChanged(string baseURI);\n    /// @notice Chainlink Data Updated Event\n    event ChainlinkDataUpdated(\n        uint32 callbackGasLimit,\n        uint64 subscriptionId,\n        bytes32 keyHash,\n        uint16 requestConfirmations\n    );\n    /// @notice Withdraw Money Event\n    event WithdrawMoney(address indexed owner, uint256 amount);\n\n    /// @notice Restricted Access Error - Wrong caller\n    error RestrictedAccess(address caller);\n\n    /// @notice Returns the number of Bedroom NFTs in existence\n    /// @return nftsNumber Representing the number of Bedroom NFTs in existence\n    function getNftsNumber() external view returns (uint256 nftsNumber);\n\n    /// @notice Returns the specifications of a Bedroom NFT\n    /// @param _tokenId Id of the Bedroom NFT\n    /// @return nftSpecifications Specifications of the Bedroom NFT\n    function getSpecifications(uint256 _tokenId)\n        external\n        view\n        returns (NftSpecifications memory nftSpecifications);\n\n    /// @notice Returns the specifications of some Bedroom NFTs\n    /// @param _tokenIds Ids of the Bedroom NFTs\n    /// @return nftSpecifications Specifications of the Bedroom NFTs\n    function getSpecificationsBatch(uint256[] calldata _tokenIds)\n        external\n        view\n        returns (NftSpecifications[] memory nftSpecifications);\n\n    /// @notice Returns the data of a NFT\n    /// @param _tokenId The id of the NFT\n    /// @return _ambiance Ambiance Score\n    /// @return _quality Quality Score\n    /// @return _luck Luck Score\n    /// @return _comfortability Comfortability Score\n    /// @return _owner NFT owner address\n    /// @return _level NFT level\n    /// @return _value NFT value\n    function getData(uint256 _tokenId)\n        external\n        view\n        returns (\n            uint16 _ambiance,\n            uint16 _quality,\n            uint16 _luck,\n            uint16 _comfortability,\n            address _owner,\n            uint256 _level,\n            uint256 _value\n        );\n\n    /// @notice Returns the data of some Bedroom NFTs\n    /// @param _tokenIds Nfts IDs\n    /// @return _ambiance Ambiance Score\n    /// @return _quality Quality Score\n    /// @return _luck Luck Score\n    /// @return _comfortability Comfortability Score\n    /// @return _owners NFT owner address\n    /// @return _levels NFT level\n    /// @return _values NFT value\n    function getDataBatch(uint256[] calldata _tokenIds)\n        external\n        view\n        returns (\n            uint16[] memory _ambiance,\n            uint16[] memory _quality,\n            uint16[] memory _luck,\n            uint16[] memory _comfortability,\n            address[] memory _owners,\n            uint256[] memory _levels,\n            uint256[] memory _values\n        );\n\n    /// @notice Updates chainlink variables\n    /// @param _callbackGasLimit Callback Gas Limit\n    /// @param _subscriptionId Chainlink subscription Id\n    /// @param _keyHash Chainlink Key Hash\n    /// @param _requestConfirmations Number of request confirmations\n    /// @dev This function can only be called by the owner of the contract\n    function updateChainlink(\n        uint32 _callbackGasLimit,\n        uint64 _subscriptionId,\n        bytes32 _keyHash,\n        uint16 _requestConfirmations\n    ) external;\n\n    /// @notice Settles initial NFT Design URI\n    /// @param _initialURI New URI\n    /// @dev This function can only be called by the owner of the contract\n    function setInitialDesignURI(string calldata _initialURI)\n        external;\n\n    /// @notice Settles the URI of a NFT\n    /// @param _tokenId Id of the NFT\n    /// @param _tokenURI Uri of the NFT\n    /// @dev This function can only be called by the owner of the contract\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI)\n        external;\n\n    /// Settles baseURI as the _baseURI for all tokens\n    /// @param _baseURI Base URI of NFTs\n    /// @dev This function can only be called by the owner of the contract\n    function setBaseURI(string memory _baseURI) external;\n\n    /// @notice Withdraws the money from the contract\n    /// @param _token Address of the token to withdraw\n    /// @dev This function can only be called by the owner or the dev Wallet\n    function withdrawMoney(IERC20 _token) external;\n\n    /// @notice Launches the procedure to create an NFT\n    /// @param _owner Owner of the NFT\n    /// @return _tokenId NFT ID\n    /// @dev This function can only be called by Dex Contract\n    function mintBedroomNft(address _owner)\n        external\n        returns (uint256 _tokenId);\n\n    /// @notice Launches the procedure to create an NFT - Batch Transaction\n    /// @param _owners Nfts Owners\n    /// @return _tokenIds NFT IDs\n    /// @dev This function can only be called by Dex Contract\n    function mintBedroomNfts(address[] calldata _owners)\n        external\n        returns (uint256[] memory _tokenIds);\n\n    /// @notice Updates a Bedroom NFT\n    /// @param _tokenId Id of the NFT\n    /// @param _newValue value of the NFT\n    /// @param _newLevel level of the NFT\n    /// @param _newScores Scores of the NFT\n    /// @param _newDesignURI Design URI of the NFT\n    function updateBedroomNft(\n        uint256 _tokenId,\n        uint256 _newValue,\n        uint256 _newLevel,\n        uint64 _newScores,\n        string memory _newDesignURI\n    ) external;\n}\n"
    },
    "contracts/Interfaces/IUpgradeNft.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IBedroomNft.sol\";\n\n/// @title Interface of the Upgrade Nft Contract\n/// @author Sleepn\n/// @notice An update NFT is used to upgrade a Bedroom NFT\ninterface IUpgradeNft is IERC1155 {\n    //// @notice Upgrade NFT Minted Event\n    event UpgradeNftMinted(\n        address indexed owner, uint256 tokenId, uint256 amount\n    );\n    /// @notice Upgrade NFT Data Settled Event\n    event UpgradeNftDataSettled(\n        uint256 indexed tokenId,\n        string _designURI,\n        uint24 _data,\n        uint16 _level,\n        uint16 _levelMin,\n        uint16 _value,\n        uint8 _attributeIndex,\n        uint8 _valueToAdd,\n        uint8 _typeNft\n    );\n    /// @notice Withdraw Money Event\n    event WithdrawMoney(address indexed owner, uint256 amount);\n\n    /// @notice Restricted Access Error - Wrong caller\n    error RestrictedAccess(address caller);\n    /// @notice Different Length Error - Arrays length\n    error DifferentLength();\n    /// @notice Upgrade Nft already linked Error - Upgrade NFTs have to be unlinked before any transfer\n    error UpgradeNftAlreadyLinked(uint256 tokenId);\n    /// @notice State not updated Error - State is not updated in tracker contract\n    error StateNotUpdated();\n\n    /// @notice Returns the  data of a NFT\n    /// @param _tokenId NFT ID\n    /// @return _data NFT additionnal data\n    /// @return _level NFT level\n    /// @return _levelMin NFT level min required\n    /// @return _value NFT value\n    /// @return _attributeIndex Score attribute index\n    /// @return _valueToAdd Value to add to the score\n    /// @return _typeNft NFT Type\n    function getData(uint256 _tokenId)\n        external\n        view\n        returns (\n            uint24 _data,\n            uint16 _level,\n            uint16 _levelMin,\n            uint16 _value,\n            uint8 _attributeIndex,\n            uint8 _valueToAdd,\n            uint8 _typeNft\n        );\n\n    /// @notice Settles the URI of a NFT\n    /// @param _tokenId Id of the NFT\n    /// @param _tokenURI Uri of the NFT\n    /// @dev This function can only be called by the owner of the contract\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI) external;\n\n    /// @notice Settles baseURI as the _baseURI for all tokens\n    /// @param _baseURI Base URI of NFTs\n    /// @dev This function can only be called by the owner of the contract\n    function setBaseURI(string memory _baseURI) external;\n\n    /// @notice Settles dev wallet address\n    /// @param _newDevWalletAddress New dev wallet address\n    /// @dev This function can only be called by the owner of the contract\n    function setDevAddress(address _newDevWalletAddress) external;\n\n    /// @notice Settles the data of a NFT\n    /// @param _tokenId NFT ID\n    /// @param _designURI Upgrade Nft URI\n    /// @param _data Additionnal data (optionnal)\n    /// @param _level Level to add to the Bedroom Nft\n    /// @param _levelMin Bedroom Nft Level min required\n    /// @param _value Upgrade Nft value\n    /// @param _attributeIndex Score involved (optionnal)\n    /// @param _valueToAdd Value to add to the score (optionnal)\n    /// @param _typeNft NFT Type\n    /// @dev This function can only be called by the owner or the dev Wallet\n    function setData(\n        uint256 _tokenId,\n        string memory _designURI,\n        uint96 _data,\n        uint96 _level,\n        uint96 _levelMin,\n        uint96 _value,\n        uint96 _attributeIndex,\n        uint96 _valueToAdd,\n        uint96 _typeNft\n    ) external;\n\n    /// @notice Mints a new Upgrade Nft\n    /// @param _tokenId NFT ID\n    /// @param _amount Amount of tokens\n    /// @param _account Upgrade Nft Owner\n    /// @dev This function can only be called by the owner or the dev Wallet or the Dex contract\n    function mint(uint256 _tokenId, uint256 _amount, address _account)\n        external;\n\n    /// @notice Mints Upgrade Nfts per batch\n    /// @param _tokenIds NFT IDs\n    /// @param _amounts Amount of tokens\n    /// @param _accounts Upgrade Nft Owners\n    /// @dev This function can only be called by the owner or the dev Wallet or the Dex contract\n    function mintBatch(\n        uint256[] calldata _tokenIds,\n        uint256[] calldata _amounts,\n        address[] calldata _accounts\n    ) external;\n\n    /// @notice Withdraws the money from the contract\n    /// @param _token Address of the token to withdraw\n    /// @dev This function can only be called by the owner or the dev Wallet\n    function withdrawMoney(IERC20 _token) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}