{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "berlin",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@solidstate/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\n\n/**\n * @title Utility contract for preventing reentrancy attacks\n */\nabstract contract ReentrancyGuard {\n    modifier nonReentrant() {\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\n            .layout();\n        require(l.status != 2, 'ReentrancyGuard: reentrant call');\n        l.status = 2;\n        _;\n        l.status = 1;\n    }\n}\n"
    },
    "@solidstate/contracts/utils/ReentrancyGuardStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary ReentrancyGuardStorage {\n    struct Layout {\n        uint256 status;\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/facets/DirectInvestorFacet.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../interfaces/PortToken/IPortToken.sol\";\nimport {Modifiers} from \"../libraries/Modifiers.sol\";\nimport \"../libraries/LibTrackedToken.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@solidstate/contracts/utils/ReentrancyGuard.sol\";\n\n\ncontract DirectInvestorFacet is Modifiers, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event IssuedFromTrackedTokens(\n        address indexed sender,\n        address indexed portTokenAddr,\n        uint256 portTokenAmount,\n        address[] trackedTokens,\n        uint256[] trackedAmounts\n    );\n    event RedeemedToTrackedTokens(\n        address indexed sender,\n        address indexed portTokenAddr,\n        uint256 portTokenAmount,\n        address[] trackedTokens,\n        uint256[] trackedAmounts\n    );\n\n    // see LibTrackedToken for original definition, needed for ethers.js catch event\n    event TrackedTokenBalancesChanged(address indexed portTokenAddress, uint256 portTokenSupply, address[] tokenAddrs, uint256[] amounts); \n\n    /**\n    @notice issue requested amount of porfolio token using direct transfer of corresponding amount of tracked tokens from user\n            trackend tokens should be approved to diamond address before this call.\n    @param _addr portfolio token address\n    @param _amount amount of porfolio token to issue\n    */\n    function issueFromTrackedTokens(address _addr, uint256 _amount) external whenNotPaused nonReentrant {\n        require(_amount > 0, \"Zero issue amount provided\");\n\n        IPortToken portToken = IPortToken(_addr);\n        LibTrackedToken.TrackedTokensList memory tl = LibTrackedToken.getActualAmount(_addr, _amount);\n        require(tl.length > 0, \"Must track tokens to issue\");\n\n        for (uint256 i; i < tl.length; i++) {\n            IERC20(tl.tokens[i]).safeTransferFrom(msg.sender, _addr, tl.amounts[i]);\n        }\n\n        portToken.controllerMint(msg.sender, _amount);\n        emit IssuedFromTrackedTokens(msg.sender, _addr, _amount, tl.tokens, tl.amounts);\n        LibTrackedToken.emitTrackedTokenBalancesChanged(_addr);\n    }\n\n    /**\n    @notice Redeem requested amount of porfolio token with direct transfer of corresponding amount of tracked tokens to user\n    @param _addr portfolio token address\n    @param _amount amount of porfolio token to redeem\n     */\n    function redeemToTrackedTokens(address _addr, uint256 _amount) external whenNotPaused nonReentrant {\n        require(_amount > 0, \"Zero redeem amount provided\");\n\n        IPortToken portToken = IPortToken(_addr);\n        require(portToken.balanceOf(msg.sender) >= _amount, \"Redeem amount exceeds balance\");\n\n        LibTrackedToken.TrackedTokensList memory tl = LibTrackedToken.getRealAmount(_addr, _amount);\n        require(tl.length > 0, \"Must track tokens to redeem\");\n\n        for (uint256 i; i < tl.length; i++) {\n            bytes memory res = portToken.externalCall(\n                tl.tokens[i],\n                abi.encodeWithSelector(IERC20.transfer.selector, msg.sender, tl.amounts[i]),\n                0,\n                \"Direct tracked token transfer failed\"\n            );\n\n            if (res.length > 0) {\n                require(abi.decode(res, (bool)), \"Direct token transfer failed\");\n            }\n        }\n\n        portToken.controllerBurn(msg.sender, _amount);\n        emit RedeemedToTrackedTokens(msg.sender, _addr, _amount, tl.tokens, tl.amounts);\n        LibTrackedToken.emitTrackedTokenBalancesChanged(_addr);\n    }\n}\n"
    },
    "contracts/interfaces/IAggregatorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAggregatorV3Minimal {\n    function decimals() external view returns (uint8);\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    },
    "contracts/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "contracts/interfaces/IOffchainOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IOffchainOracle {\n    function getRate(IERC20 srcToken, IERC20 dstToken, bool useWrappers) external view returns (uint256 weightedRate);    \n}"
    },
    "contracts/interfaces/PortToken/IPortToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./IPortTokenControllable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\ninterface IPortToken is IERC20, IERC20Metadata, IPortTokenControllable {\n}"
    },
    "contracts/interfaces/PortToken/IPortTokenControllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPortTokenControllable {\n    function controller() external returns (address);\n    function manager() external returns (address);\n\n    function changeController(address _newController) external;\n    function controllerMint(address _to, uint256 _amt) external;\n    function controllerBurn(address _from, uint256 _amt) external;\n    function externalCall(\n        address _target,\n        bytes calldata _data,\n        uint256 _value,\n        string memory _errorMessage\n    ) external returns (bytes memory returndata);\n\n}"
    },
    "contracts/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Not contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    },
    "contracts/libraries/LibPause.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nlibrary LibPause {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"portfolio.pause.v1\");\n    struct DiamondStorage {\n        bool isPaused;\n        mapping(address => bool) pausedManagers;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function isPaused() internal view returns (bool) {\n        return diamondStorage().isPaused;\n    }\n\n    function isManagerPaused(address _manager) internal view returns (bool) {\n        return diamondStorage().pausedManagers[_manager];\n    }\n}\n"
    },
    "contracts/libraries/LibPriceInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/IAggregatorV3.sol\";\nimport \"../interfaces/IOffchainOracle.sol\";\n\nlibrary LibChainlinkUtils {\n    function getAnswer(address _feed) internal view returns (uint8 decimals, int256 price) {\n        require(_feed != address(0));\n        IAggregatorV3Minimal feed = IAggregatorV3Minimal(_feed);\n        (, price, , , ) = feed.latestRoundData();\n        decimals = feed.decimals();\n    }\n\n    function getDerivedPrice(\n        address _tokenFeed,\n        address _baseFeed,\n        uint8 _baseTokenDecimals\n    ) internal view returns (uint256 price) {\n        (uint8 tokenFeedDecimals, int256 tokenPrice) = getAnswer(_tokenFeed);\n        (uint8 baseFeedDecimals, int256 basePrice) = getAnswer(_baseFeed);\n        require(tokenPrice >= 0 && basePrice >= 0);\n\n        //price in base units\n        price = (uint256(tokenPrice) * (10**_baseTokenDecimals)) / uint256(basePrice);\n\n        //  adjust if price feed have different decimals\n        if (tokenFeedDecimals > baseFeedDecimals) {\n            price = price / (10**(tokenFeedDecimals - baseFeedDecimals));\n        } else if (tokenFeedDecimals < baseFeedDecimals) {\n            price = price * (10**(baseFeedDecimals - tokenFeedDecimals));\n        }\n    }\n}\n\nlibrary LibPriceInterface {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"portfolio.priceinterface.v1\");\n    uint256 constant SHARE_DENOMINATOR = 10000;\n\n    // feedType: feedTypes with id>=200 considered unsafe and shouldn't be used in production\n    // 1: chainlink usdc feed\n    // 254: 1inch offchain oracle\n    struct PriceSourceSettings {\n        address feed;\n        uint8 feedType;\n    }\n\n    struct DiamondStorage {\n        address baseToken; // token to price against\n        address utilityToken; // utility token address\n        uint16 minUtilityTokenShare; // desired minimum utility token share in 1/10000 (1%=100)\n        mapping(address => PriceSourceSettings) priceSources;\n        bool allowUnreliablePriceSources;\n        uint256 minTokenValuation; // portfolio token has a significant balance of tracked token if locked tracked token valuation exceeds this value (converted to base token)\n        uint256 minUtilityTokenBalance; // utility token balance required to skip utility token share check\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function hasPriceSource(address _addr) internal view returns (bool) {\n        DiamondStorage storage ds = diamondStorage();\n        PriceSourceSettings storage os = ds.priceSources[_addr];\n        return (os.feed != address(0) && os.feedType > 0 && (os.feedType < 200 || ds.allowUnreliablePriceSources));\n    }\n\n    /// @notice checks if price of provided amount of token in greater than minTokenValuation\n    /// @param _addr ERC20 token address\n    /// @param _amount amount of token\n    /// @return isSignificant\n    function amountIsSignificant(address _addr, uint256 _amount) internal view returns (bool isSignificant) {\n        return getTokenPrice(_addr, _amount) > diamondStorage().minTokenValuation;\n    }\n\n    // get amount of base token  per _amount of token\n    function getTokenPrice(address _addr, uint256 _amount) internal view returns (uint256 price) {\n        DiamondStorage storage ds = diamondStorage();\n        if (ds.baseToken == _addr) {\n            return _amount;\n        }\n\n        PriceSourceSettings storage os = ds.priceSources[_addr];\n        require(hasPriceSource(_addr), \"No price source for token\");\n\n        if (os.feedType == 1) {\n            PriceSourceSettings storage bs = ds.priceSources[ds.baseToken];\n            require(os.feed != address(0), \"No chainlink price feed for base\");\n\n            price =\n                (LibChainlinkUtils.getDerivedPrice(os.feed, bs.feed, IERC20Metadata(ds.baseToken).decimals()) * _amount) /\n                (10**IERC20Metadata(_addr).decimals());\n        } else if (os.feedType == 254) {\n            price = (IOffchainOracle(os.feed).getRate(IERC20(_addr), IERC20(ds.baseToken), true) * _amount) / (10**IERC20Metadata(_addr).decimals());\n        }\n    }\n\n    // get amount of token per _amount of base token\n    function getTokenForPrice(address _addr, uint256 _price) internal view returns (uint256 amount) {\n        DiamondStorage storage ds = diamondStorage();\n        if (ds.baseToken == _addr) {\n            return _price;\n        }\n\n        PriceSourceSettings storage os = ds.priceSources[_addr];\n        require(hasPriceSource(_addr), \"No price source for token\");\n\n        if (os.feedType == 1) {\n            PriceSourceSettings storage bs = ds.priceSources[ds.baseToken];\n            require(os.feed != address(0), \"No chainlink price feed for base\");\n\n            amount =\n                (LibChainlinkUtils.getDerivedPrice(bs.feed, os.feed, IERC20Metadata(_addr).decimals()) * _price) /\n                (10**IERC20Metadata(ds.baseToken).decimals());\n        } else if (os.feedType == 254) {\n            amount = (IOffchainOracle(os.feed).getRate(IERC20(ds.baseToken), IERC20(_addr), true) * _price) / 10**IERC20Metadata(_addr).decimals();\n            // * rate multiplicator / rate denumenator * amount / amount denumerator,  and rate multiplicator == amount denumenator\n        }\n    }\n\n    // get total amount of base token units equal to amounts of tokens\n    function getTokensTotalPrice(address[] memory _tokens, uint256[] memory _amounts) internal view returns (uint256) {\n        uint256 totalPrice = 0;\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address _addr = _tokens[i];\n            totalPrice += getTokenPrice(_addr, _amounts[i]);\n        }\n\n        return totalPrice;\n    }\n\n    function getUtilityTokenShare(address[] memory _tokens, uint256[] memory _amounts) internal view returns (uint256) {\n        uint256 totalPrice;\n        uint256 utilityPrice;\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            uint256 price = getTokenPrice(_tokens[i], _amounts[i]);\n            totalPrice += price;\n\n            if (_tokens[i] == diamondStorage().utilityToken) {\n                utilityPrice = price;\n            }\n        }\n        require(totalPrice > 0, \"Total token price is 0\");\n\n        return (utilityPrice * SHARE_DENOMINATOR) / totalPrice;\n    }\n\n    function checkUtilityTokenShare(\n        address portTokenOwner,\n        address[] memory _tokens,\n        uint256[] memory _amounts\n    ) internal view returns (bool) {\n        DiamondStorage storage ds = diamondStorage();\n        if (ds.minUtilityTokenShare == 0) {\n            return true;\n        }\n\n        if (\n            portTokenOwner != address(0) &&\n            ds.minUtilityTokenBalance > 0 &&\n            IERC20(ds.utilityToken).balanceOf(portTokenOwner) >= ds.minUtilityTokenBalance\n        ) {\n            return true;\n        }\n\n        return getUtilityTokenShare(_tokens, _amounts) >= ds.minUtilityTokenShare;\n    }\n\n    function estimateMinUtilityTokenAmount(address[] memory _tokens, uint256[] memory _amounts) internal view returns (uint256) {\n        DiamondStorage storage ds = diamondStorage();\n        if (ds.minUtilityTokenShare == 0) {\n            return 0;\n        }\n\n        uint256 totalPrice = getTokensTotalPrice(_tokens, _amounts);\n        uint256 utilityUnit = 10**IERC20Metadata(ds.utilityToken).decimals();\n        uint256 utilityPrice = getTokenPrice(ds.utilityToken, utilityUnit);\n\n        return (((totalPrice * ds.minUtilityTokenShare) / SHARE_DENOMINATOR) * utilityUnit) / utilityPrice;\n    }\n\n    function estimateAmountsFromTotalPrice(\n        uint256 _totalPrice,\n        address[] memory _tokens,\n        uint256[] memory _ratios\n    ) internal view returns (uint256[] memory _amounts) {\n        _amounts = new uint256[](_tokens.length);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            _amounts[i] = getTokenForPrice(_tokens[i], (_totalPrice * _ratios[i]) / SHARE_DENOMINATOR);\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibTokenWhitelist.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../libraries/LibPriceInterface.sol\";\n\nlibrary LibTokenWhitelist {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"portfolio.tokenlist.v1\");\n\n    struct DiamondStorage {\n        EnumerableSet.AddressSet whitelist;\n    }\n\n    event TokenEnabled(address indexed tokenAddr);\n    event TokenDisabled(address indexed tokenAddr);\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function enableToken(address _addr) internal {\n        DiamondStorage storage ds = diamondStorage();\n        if (!ds.whitelist.contains(_addr)) {\n            ds.whitelist.add(_addr);\n            emit TokenEnabled(_addr);\n        }\n    }\n\n    function disableToken(address _addr) internal {\n        DiamondStorage storage ds = diamondStorage();\n        if (ds.whitelist.contains(_addr)) {\n            ds.whitelist.remove(_addr);\n            emit TokenDisabled(_addr);\n        }\n    }\n\n    function isAllowed(address _addr) internal view returns (bool) {\n        DiamondStorage storage ds = diamondStorage();\n        return ds.whitelist.contains(_addr) && LibPriceInterface.hasPriceSource(_addr);\n    }\n}\n"
    },
    "contracts/libraries/LibTrackedToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./LibTokenWhitelist.sol\";\nimport \"./LibPriceInterface.sol\";\n\nlibrary LibTrackedToken {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"portfolio.trackedtokens.v1\");\n    uint256 constant MAX_TRACKED_TOKENS = 10;\n\n    struct TrackedTokensList {\n        address[] tokens;\n        uint256[] amounts;\n        uint256 length;\n    }\n\n    struct TrackedTokensConfig {\n        // Set of tracked token addresses\n        EnumerableSet.AddressSet trackedTokens;\n        // Amount of base units of tracked token per one (10^18 units) portfolio token\n        mapping(address => uint256) targetAmounts;\n    }\n\n    struct DiamondStorage {\n        mapping(address => TrackedTokensConfig) tokenConfig;\n    }\n\n    event TrackedTokenAdded(address indexed portTokenAddr, address tokenAddr, uint256 amount);\n    event TrackedTokenBalancesChanged(address indexed portTokenAddress, uint256 portTokenSupply, address[] tokenAddrs, uint256[] amounts);\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function configForToken(address _addr) internal view returns (TrackedTokensConfig storage tc) {\n        return diamondStorage().tokenConfig[_addr];\n    }\n\n    function addTrackedToken(\n        address _addr,\n        address _trackedAddr,\n        uint256 _amount\n    ) internal {\n        TrackedTokensConfig storage tc = configForToken(_addr);\n\n        require(_trackedAddr != _addr, \"Can`t track itself\"); // even if portToken is whitelisted, it shouldn't be allowed\n        require(LibTokenWhitelist.isAllowed(_trackedAddr), \"Token not allowed\");\n        require(!tc.trackedTokens.contains(_trackedAddr), \"Token already tracked\");\n        require(tc.trackedTokens.length() <= LibTrackedToken.MAX_TRACKED_TOKENS, \"Tracked tokens limit reached\");\n\n        tc.targetAmounts[_trackedAddr] = _amount;\n        tc.trackedTokens.add(_trackedAddr);\n\n        emit TrackedTokenAdded(_addr, _trackedAddr, _amount);\n    }\n\n    /// @notice checks if portfolio token has significant amount of at least one tracked token\n    /// @param _addr portfolio token address\n    /// @return bool\n    function hasTrackedTokenBalance(address _addr) internal view returns (bool) {\n        TrackedTokensConfig storage tc = configForToken(_addr);\n\n        uint256 _l = tc.trackedTokens.length();\n\n        for (uint256 i = 0; i < _l; i++) {\n            if (LibPriceInterface.amountIsSignificant(tc.trackedTokens.at(i), IERC20(tc.trackedTokens.at(i)).balanceOf(_addr))) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function getTargetAmount(address _addr) internal view returns (TrackedTokensList memory tl) {\n        TrackedTokensConfig storage tc = configForToken(_addr);\n        tl.length = tc.trackedTokens.length();\n\n        tl.tokens = new address[](tl.length);\n        tl.amounts = new uint256[](tl.length);\n\n        for (uint256 i; i < tl.length; i++) {\n            tl.tokens[i] = tc.trackedTokens.at(i);\n            tl.amounts[i] = tc.targetAmounts[tc.trackedTokens.at(i)];\n        }\n\n        return tl;\n    }\n\n    function getTargetAmount(address _addr, uint256 _amount) internal view returns (TrackedTokensList memory tl) {\n        require(_amount > 0);\n\n        tl = getTargetAmount(_addr);\n\n        for (uint256 i; i < tl.length; i++) {\n            tl.amounts[i] = (tl.amounts[i] * _amount) / (10**18);\n        }\n\n        return tl;\n    }\n\n    function getRealAmount(address _addr) internal view returns (TrackedTokensList memory tl) {\n        TrackedTokensConfig storage tc = configForToken(_addr);\n        tl.length = tc.trackedTokens.length();\n        tl.tokens = new address[](tl.length);\n        tl.amounts = new uint256[](tl.length);\n\n        for (uint256 i; i < tl.length; i++) {\n            tl.tokens[i] = tc.trackedTokens.at(i);\n            tl.amounts[i] = IERC20(tl.tokens[i]).balanceOf(_addr);\n        }\n\n        return tl;\n    }\n\n    function getRealAmount(address _addr, uint256 _amount) internal view returns (TrackedTokensList memory tl) {\n        require(_amount > 0);\n        tl = getRealAmount(_addr);\n        uint256 portTokenSupply = IERC20(_addr).totalSupply();\n\n        for (uint256 i; i < tl.length; i++) {\n            if (portTokenSupply > 0) {\n                tl.amounts[i] = (tl.amounts[i] * _amount) / portTokenSupply;\n            } else {\n                tl.amounts[i] = 0;\n            }\n        }\n\n        return tl;\n    }\n\n    function getActualAmount(address _addr, uint256 _amount) internal view returns (TrackedTokensList memory tl) {\n        if (hasTrackedTokenBalance(_addr) && IERC20(_addr).totalSupply() > 0) {\n            return getRealAmount(_addr, _amount);\n        } else {\n            return getTargetAmount(_addr, _amount);\n        }\n    }\n\n    function emitTrackedTokenBalancesChanged(address _addr) internal {\n        TrackedTokensList memory tl = getRealAmount(_addr);\n        emit TrackedTokenBalancesChanged(_addr, IERC20(_addr).totalSupply(), tl.tokens, tl.amounts);\n    }\n}\n"
    },
    "contracts/libraries/Modifiers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../interfaces/PortToken/IPortTokenControllable.sol\";\nimport {LibDiamond} from \"./LibDiamond.sol\";\nimport {LibPause} from \"./LibPause.sol\";\n\ncontract Modifiers {\n    // AppStorage internal s;\n\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n\n    modifier onlyTokenManager(address _tokenAddr) {\n        require(IPortTokenControllable(_tokenAddr).manager() == msg.sender, \"Only porfolio manager allowed\");\n        require(!LibPause.isManagerPaused(msg.sender), \"Portfolio manager paused\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!LibPause.isPaused(), \"Platform paused\");\n        _;\n    }\n\n    modifier onlySelf() {\n        require(msg.sender == address(this), \"Can be called only by diamond\");\n        _;\n    }\n}\n"
    }
  }
}}