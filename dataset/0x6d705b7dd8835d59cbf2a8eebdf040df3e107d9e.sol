{{
  "language": "Solidity",
  "sources": {
    "/contracts/RoyaltyPump.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IWrappedERC20.sol\";\r\nimport \"./IGatedERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./TokensRecoverable.sol\";\r\nimport './IPancakeRouter02.sol';\r\nimport './IPancakeFactory.sol';\r\nimport \"./IWBNB.sol\";\r\nimport \"./RootedTransferGate.sol\";\r\n\r\ncontract RoyaltyPump is TokensRecoverable\r\n{\r\n\r\n\r\n    //money comes in as matic\r\n    //49% of incoming matic goes to liquidity for musician token\r\n    //1% goes to liquidity controller for signed token\r\n    //50% goes to musician staking\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    \r\n    address public devAddress;  \r\n    mapping (address => bool) public royaltyCollector;\r\n    \r\n    address public immutable deployerAddress;\r\n    IPancakeRouter02 public immutable router;\r\n    IPancakeFactory public immutable factory;\r\n    IWrappedERC20 public immutable chainToken;\r\n    address public signedLiquidityController;\r\n    address public artistToken;\r\n    address public stakingContract;\r\n    IERC20 public artistLP;\r\n    RootedTransferGate gate;\r\n\r\n    mapping (IGatedERC20 => uint256) public burnRates;\r\n    mapping (IGatedERC20 => uint256) public sellRates;\r\n    mapping (IGatedERC20 => uint256) public keepRates;\r\n\r\n    mapping (IGatedERC20 => address[]) public chainTokenFeeCollectors;\r\n    mapping (IGatedERC20 => uint256[]) public chainTokenFeeRates;\r\n\r\n    mapping (IGatedERC20 => address[]) public rootedTokenFeeCollectors;\r\n    mapping (IGatedERC20 => uint256[]) public rootedTokenFeeRates;\r\n    uint256 public totalRoyaltiesCollected;\r\n\r\n    constructor(address _devAddress, IPancakeRouter02 _router, address _signedLiquidityController, address _stakingContract, address _artistToken, RootedTransferGate _gate)\r\n    {\r\n        deployerAddress = msg.sender;\r\n        devAddress = _devAddress;\r\n        royaltyCollector[msg.sender] = true;\r\n        router = _router;\r\n        chainToken = IWrappedERC20(_router.WETH());   \r\n        signedLiquidityController = _signedLiquidityController;\r\n        stakingContract = _stakingContract;\r\n        artistToken = _artistToken;\r\n        IPancakeFactory _factory = IPancakeFactory(_router.factory());\r\n        factory = _factory;\r\n        artistLP = IERC20(_factory.getPair(_router.WETH(), address(artistToken)));\r\n        gate = _gate;\r\n        \r\n\r\n        artistLP.approve(address(_router), (uint256(-1)));\r\n        IERC20(_artistToken).approve((address(_router)), uint256(-1));\r\n        IWrappedERC20(_router.WETH()).approve((address(_router)), uint256(-1));\r\n\r\n    }\r\n    modifier onlyRoyaltyCollector()\r\n    {\r\n        require(royaltyCollector[msg.sender] || msg.sender == devAddress);\r\n        _;\r\n    }\r\n    function setDevAddress(address _devAddress) public\r\n    {\r\n        require (msg.sender == deployerAddress || msg.sender == devAddress, \"Not a deployer or dev address\");\r\n        devAddress = _devAddress;\r\n    }\r\n    function setRoyaltyCollector(address _royaltyCollector) public\r\n    {\r\n        require (msg.sender == deployerAddress || msg.sender == devAddress, \"Not a deployer or dev address\");\r\n        royaltyCollector[_royaltyCollector] = true;\r\n    }\r\n   \r\n    //rates out of 10,000\r\n    function depositRoyalties() public payable onlyRoyaltyCollector() \r\n    {\r\n        require (msg.value > 0, \"Must deposit some amount\");\r\n        totalRoyaltiesCollected = totalRoyaltiesCollected + msg.value;\r\n        uint256 stakingRate = 5000;\r\n        uint256 signedRate = 100;\r\n        uint256 liquidityRate = 4900;\r\n\r\n        uint256 stakingAmount = msg.value * stakingRate / 10000;\r\n        uint256 signedAmount = msg.value * signedRate / 10000;\r\n        uint256 liquidityAmount = msg.value * liquidityRate / 10000;\r\n\r\n        IWBNB(address(chainToken)).deposit{ value: address(this).balance}();\r\n\r\n        chainToken.transfer(stakingContract, stakingAmount);\r\n        chainToken.transfer(signedLiquidityController, signedAmount);\r\n\r\n        uint256 amountToSpend = liquidityAmount.div(2);\r\n        buyArtistToken(amountToSpend);\r\n        gate.setUnrestricted(true);\r\n        addLiq(chainToken.balanceOf(address(this)));\r\n        gate.setUnrestricted(false);\r\n    }\r\n    //rates out of 10,000\r\n\r\n//todo make below private\r\n    function buyArtistToken(uint256 amountToSpend) private returns (uint256)\r\n    {\r\n        uint256[] memory amounts = router.swapExactTokensForTokens(amountToSpend, 0, buyPath(), address(this), block.timestamp);\r\n        amountToSpend = amounts[1];\r\n        return amountToSpend;\r\n    }\r\n    function addLiq(uint256 chainTokenAmount) private\r\n    {\r\n        router.addLiquidity(address(chainToken), address(artistToken), chainTokenAmount, IERC20(artistToken).balanceOf(address(this)), 0, 0, address(this), block.timestamp);\r\n    }\r\n\r\n    function buyPath() private view returns (address[] memory) \r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(chainToken);\r\n        path[1] = address(artistToken);\r\n        return path;\r\n    }\r\n}\r\n"
    },
    "/contracts/TokensRecoverable.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\n/* ROOTKIT:\r\nAllows recovery of unexpected tokens (airdrops, etc)\r\nInheriters can customize logic by overriding canRecoverTokens\r\n*/\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./Owned.sol\";\r\nimport \"./ITokensRecoverable.sol\";\r\n\r\nabstract contract TokensRecoverable is Owned, ITokensRecoverable\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    function recoverTokens(IERC20 token) public override ownerOnly() \r\n    {\r\n        require (canRecoverTokens(token));\r\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function canRecoverTokens(IERC20 token) internal virtual view returns (bool) \r\n    { \r\n        return address(token) != address(this); \r\n    }\r\n}"
    },
    "/contracts/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMath \r\n{\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n    {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    },
    "/contracts/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\n/* ROOTKIT:\r\nModified to remove some junk\r\nAlso modified to remove silly restrictions (traps!) within safeApprove\r\n*/\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {        \r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"
    },
    "/contracts/RootedTransferGate.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n/* ROOTKIT:\r\nA transfer gate (GatedERC20) for use with upTokens\r\n\r\nIt:\r\n    Allows customization of tax and burn rates\r\n    Allows transfer to/from approved pools\r\n    Disallows transfer to/from non-approved pools\r\n    Allows transfer to/from anywhere else\r\n    Allows for free transfers if permission granted\r\n    Allows for unrestricted transfers if permission granted\r\n    Allows for a pool to have an extra tax\r\n    Allows for a temporary declining tax\r\n*/\r\n\r\nimport \"./Address.sol\";\r\nimport \"./IPancakeFactory.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IPancakePair.sol\";\r\nimport \"./ILiquidityLockedERC20.sol\";\r\nimport \"./IPancakeRouter02.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./TokensRecoverable.sol\";\r\nimport \"./ITransferGate.sol\";\r\n\r\ncontract RootedTransferGate is TokensRecoverable, ITransferGate\r\n{   \r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IPancakeRouter02 immutable internal pancakeRouter;\r\n    IPancakeFactory immutable internal pancakeFactory;\r\n    ILiquidityLockedERC20 immutable internal rootedToken;\r\n\r\n    bool public unrestricted;\r\n    mapping (address => bool) public unrestrictedControllers;\r\n    mapping (address => bool) public feeControllers;\r\n    mapping (address => bool) public freeParticipantControllers;\r\n    mapping (address => bool) public freeParticipant;\r\n    mapping (address => uint16) public poolsTaxRates;\r\n\r\n    address public override feeSplitter;\r\n    uint16 public feesRate;\r\n    IPancakePair public mainPool;\r\n   \r\n    uint16 public dumpTaxStartRate; \r\n    uint256 public dumpTaxDurationInSeconds;\r\n    uint256 public dumpTaxEndTimestamp;\r\n\r\n    constructor(ILiquidityLockedERC20 _rootedToken, IPancakeRouter02 _pancakeRouter)\r\n    {\r\n        rootedToken = _rootedToken;\r\n        pancakeRouter = _pancakeRouter;\r\n        pancakeFactory = IPancakeFactory(_pancakeRouter.factory());\r\n    }\r\n\r\n    function setUnrestrictedController(address unrestrictedController, bool allow) public ownerOnly()\r\n    {\r\n        unrestrictedControllers[unrestrictedController] = allow;\r\n    }\r\n\r\n    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\r\n    {\r\n        freeParticipantControllers[freeParticipantController] = allow;\r\n    }\r\n\r\n    function setFeeControllers(address feeController, bool allow) public ownerOnly()\r\n    {\r\n        feeControllers[feeController] = allow;\r\n    }\r\n\r\n    function setFeeSplitter(address _feeSplitter) public ownerOnly()\r\n    {\r\n        feeSplitter = _feeSplitter;\r\n    }\r\n\r\n    function setFreeParticipant(address participant, bool free) public\r\n    {\r\n        require (msg.sender == owner || freeParticipantControllers[msg.sender], \"Not an owner or free participant controller\");\r\n        freeParticipant[participant] = free;\r\n    }\r\n\r\n    function setUnrestricted(bool _unrestricted) public\r\n    {\r\n        require (unrestrictedControllers[msg.sender], \"Not an unrestricted controller\");\r\n        unrestricted = _unrestricted;\r\n        rootedToken.setLiquidityLock(mainPool, !_unrestricted);\r\n    }    \r\n\r\n    function setMainPool(IPancakePair _mainPool) public ownerOnly()\r\n    {\r\n        mainPool = _mainPool;\r\n    }\r\n\r\n     function setPoolTaxRate(address pool, uint16 taxRate) public ownerOnly()\r\n    {\r\n        require (taxRate <= 10000, \"Fee rate must be less than or equal to 100%\");\r\n        poolsTaxRates[pool] = taxRate;        \r\n    }\r\n\r\n    function setDumpTax(uint16 startTaxRate, uint256 durationInSeconds) public\r\n    {\r\n        require (feeControllers[msg.sender] || msg.sender == owner, \"Not an owner or fee controller\");\r\n        require (startTaxRate <= 10000, \"Dump tax rate must be less than or equal to 100%\");\r\n\r\n        dumpTaxStartRate = startTaxRate;\r\n        dumpTaxDurationInSeconds = durationInSeconds;\r\n        dumpTaxEndTimestamp = block.timestamp + durationInSeconds;\r\n    }\r\n\r\n    function getDumpTax() public view returns (uint256)\r\n    {\r\n        if (block.timestamp >= dumpTaxEndTimestamp) \r\n        {\r\n            return 0;\r\n        }       \r\n        \r\n        return dumpTaxStartRate*(dumpTaxEndTimestamp - block.timestamp)*1e18/dumpTaxDurationInSeconds/1e18;\r\n    }\r\n\r\n    function setFees(uint16 _feesRate) public\r\n    {\r\n        require (feeControllers[msg.sender] || msg.sender == owner, \"Not an owner or fee controller\");\r\n        require (_feesRate <= 10000, \"Fee rate must be less than or equal to 100%\");\r\n        feesRate = _feesRate;\r\n    }\r\n\r\n    function handleTransfer(address, address from, address to, uint256 amount) public virtual override returns (uint256)\r\n    {\r\n        if (unrestricted || freeParticipant[from] || freeParticipant[to]) \r\n        {\r\n            return 0;\r\n        }\r\n\r\n        uint16 poolTaxRate = poolsTaxRates[to];\r\n\r\n        if (poolTaxRate > feesRate) \r\n        {\r\n            uint256 totalTax = getDumpTax() + poolTaxRate;\r\n            return totalTax >= 10000 ? amount : amount * totalTax / 10000;\r\n        }\r\n\r\n        return amount * feesRate / 10000;\r\n    }   \r\n}"
    },
    "/contracts/Owned.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\n/* ROOTKIT:\r\nProvides ownerOnly() modifier\r\nAllows for ownership transfer but requires the new\r\nowner to claim (accept) ownership\r\nSafer because no accidental transfers or renouncing\r\n*/\r\n\r\nimport \"./IOwned.sol\";\r\n\r\nabstract contract Owned is IOwned\r\n{\r\n    address public override owner = msg.sender;\r\n    address internal pendingOwner;\r\n\r\n    modifier ownerOnly()\r\n    {\r\n        require (msg.sender == owner, \"Owner only\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public override ownerOnly()\r\n    {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public override\r\n    {\r\n        require (pendingOwner == msg.sender);\r\n        pendingOwner = address(0);\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n        owner = msg.sender;\r\n    }\r\n}"
    },
    "/contracts/IWrappedERC20Events.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IWrappedERC20Events\r\n{\r\n    event Deposit(address indexed from, uint256 amount);\r\n    event Withdrawal(address indexed to, uint256 amount);\r\n}\r\n"
    },
    "/contracts/IWrappedERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IWrappedERC20Events.sol\";\r\n\r\ninterface IWrappedERC20 is IERC20, IWrappedERC20Events\r\n{\r\n    function wrappedToken() external view returns (IERC20);\r\n    function depositTokens(uint256 _amount) external;\r\n    function withdrawTokens(uint256 _amount) external;\r\n}"
    },
    "/contracts/IWBNB.sol": {
      "content": "// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IWBNB\r\n{    \r\n    function deposit() external payable;\r\n}"
    },
    "/contracts/ITransferGate.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface ITransferGate\r\n{\r\n    function feeSplitter() external view returns (address);\r\n    function handleTransfer(address msgSender, address from, address to, uint256 amount) external returns (uint256);\r\n}"
    },
    "/contracts/ITokensRecoverable.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface ITokensRecoverable\r\n{\r\n    function recoverTokens(IERC20 token) external;\r\n}"
    },
    "/contracts/IPancakeRouter02.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport './IPancakeRouter01.sol';\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"
    },
    "/contracts/IPancakeRouter01.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"
    },
    "/contracts/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "/contracts/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"
    },
    "/contracts/IOwned.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IOwned\r\n{\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n    function claimOwnership() external;\r\n}"
    },
    "/contracts/ILiquidityLockedERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IPancakePair.sol\";\r\n\r\ninterface ILiquidityLockedERC20\r\n{\r\n    function setLiquidityLock(IPancakePair _liquidityPair, bool _locked) external;\r\n}"
    },
    "/contracts/IGatedERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./ITransferGate.sol\";\r\n\r\ninterface IGatedERC20 is IERC20\r\n{\r\n    function transferGate() external view returns (ITransferGate);\r\n\r\n    function setTransferGate(ITransferGate _transferGate) external;\r\n    function burn( uint256 amount) external;\r\n}"
    },
    "/contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IERC20 \r\n{\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _account) external view returns (uint256);\r\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}"
    },
    "/contracts/Address.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\r\npragma solidity ^0.7.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}