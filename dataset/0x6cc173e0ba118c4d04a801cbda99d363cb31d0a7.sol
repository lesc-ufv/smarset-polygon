{{
  "language": "Solidity",
  "sources": {
    "IntegrationApprove.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//pragma solidity >=0.8.0 <0.9.0;\npragma solidity 0.8.12;\nimport \"UsersGroups.sol\";\nimport \"Bank.sol\";\nimport \"GovernorContract.sol\";\nimport \"Initializable.sol\";\n\n/// @title IntegrationApprove\n/// @notice IntegrationApprove Contract stored Integration Approve.\n/// @dev  IntegrationApprove Contract stored Integration Approve.\ncontract IntegrationApprove is Initializable{\n\n    /// @notice Total Number of Integration.\n    /// @dev Total Number of Integration.\n    uint256 private totalNumber=0;\n\n    /// @notice Reference to UsersGroups contract.\n    /// @dev Reference to UsersGroups contract.\n    UsersGroups private roles;\n\n    /// @notice Reference to Bank contract.\n    /// @dev Reference to Bank contract.\n    Bank private bank;\n\n    /// @notice Reference to Governor contract.\n    /// @dev Reference to Governor contract.\n    GovernorContract private governor;\n\n\n    /// @notice Event emmited when Integration Approve is added.\n    /// @dev Event emmited when Integration Approve is added.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return id ID of integraition approve.\n    event IntegrationApproveAdded(bool status,string message,uint id);\n\n    /// @notice Event emmited when Integration Approve is approved by user.\n    /// @dev Event emmited when Integration Approve is approved by user.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return id ID of integraition approve.\n    event IntegrationApproveApproved(bool status,string message,uint id);\n\n    /// @notice Event emmited when Integration Approve is updated.\n    /// @dev Event emmited when Integration Approve is updated.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return id ID of integraition approve.\n    event IntegrationApproveUpdated(bool status,string message,uint id);\n\n    /// @notice Event emmited when Integration Approve is approved by one user group required group.\n    /// @dev Event emmited when Integration Approve is approved by one user group required group.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return id ID of integraition approve.\n    /// @return group Group confirmed.\n    /// @return confirmation_status Status of confirmation.\n    event IntegrationApproveGroup(bool status,string message,uint id, bytes32 group, bool confirmation_status);\n\n    /// @notice Event emmited when Integration Approve is executed.\n    /// @dev Event emmited when Integration Approve is executed.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return id ID of integraition approve.\n    event IntegrationApproveExecute(bool status,string message,uint id);\n\n    /// @notice Event emmited when user send confirmation.\n    /// @dev Event emmited when user send confirmation.\n    /// @return status True/False - status of excution\n    /// @return message Information with Error or Successfull execution.\n    /// @return account ID of integraition approve.\n    /// @return confirmation_status Status of confirmation.\n    event IntegrationApproveUser(bool status,string message,address account, bool confirmation_status);\n\n    /// @notice Structure of integration Approve.\n    /// @dev Structure of integration Approve.\n    /// @param status Status\n    /// @param ipfs_hash IPFS CID of integration Approve\n    /// @param to_user User to transfer money, when integration approve is confirmed.\n    /// @param amount Amount of WEI to transfer\n    /// @param groups Array of groups, when one user from group must confirm and after that all group is confirmed. \n    /// @param group_for_vote Group for users, who can confirm.\n    /// @param block_start Block for Start Confirmation Process\n    /// @param block_end Block for End Confirmation Process\n    /// @param confirmation_status Current Status\n    struct IntegrationsApprove {\n        uint256 id; // Proposal ID\n        bool status; //if its blocked\n        string ipfs_hash; // ipfs CID\n        address payable to_user; // user transfer ether\n        uint256 amount; // amoun to tranfer to that user\n        bytes32[] groups; // groups should all confirm\n        bytes32 group_for_vote; // group for vote on integration events\n        uint256 block_start; // when start confirm\n        uint256 block_end; // when stop confirm\n        Confirmation confirmation_status;\n    }\n\n    /// @notice Structure of integration Approve Aggregate.\n    /// @dev Structure of integration Approve Aggregate.\n    /// @param status Status\n    /// @param ipfs_hash IPFS CID of integration Approve\n    /// @param to_user User to transfer money, when integration approve is confirmed.\n    /// @param amount Amount of WEI to transfer\n    /// @param groups Array of groups, when one user from group must confirm and after that all group is confirmed. \n    /// @param group_for_vote Group for users, who can confirm.\n    /// @param block_start Block for Start Confirmation Process\n    /// @param block_end Block for End Confirmation Process\n    /// @param confirmation_status Current Status\n    /// @param hasConfirm If User Confrim Approve.\n    struct IntegrationsApproveAggregate {\n        uint256 id; // Proposal ID\n        bool status; //if its blocked\n        string ipfs_hash; // ipfs CID\n        address payable to_user; // user transfer ether\n        uint256 amount; // amoun to tranfer to that user\n        bytes32[] groups; // groups should all confirm\n        bytes32 group_for_vote; // group for vote on integration events\n        uint256 block_start; // when start confirm\n        uint256 block_end; // when stop confirm\n        Confirmation confirmation_status;\n        bool hasConfirm;\n    }\n\n    /// @notice Current status of confirmation.\n    /// @dev Current status of confirmation.\n    /// @common 123\n    enum Confirmation {\n        Pending,\n        Confirmed,\n        Execute,\n        Defeted,\n        Active,\n        Waiting\n    }\n\n    /// @notice Constructor.\n    /// @dev Constructor.\n    /// @param roleContract Address UsersGroups contract\n    /// @param bankContract Address Bank contract\n    /// @param groups for future\n    constructor (address roleContract,address payable bankContract,bytes32[] memory groups,address payable governorContract) public  {\n        roles = UsersGroups(roleContract);\n        bank = Bank(bankContract);\n        governor = GovernorContract(governorContract);\n    }\n\n\n     /// @notice Initializer.\n    /// @dev Initializer.\n    /// @param roleContract Address UsersGroups contract\n    /// @param bankContract Address Bank contract\n    /// @param groups for future\n    function initialize (address roleContract,address payable bankContract,bytes32[] memory groups,address payable governorContract) initializer public  {\n        roles = UsersGroups(roleContract);\n        bank = Bank(bankContract);\n        governor = GovernorContract(governorContract);\n        \n    }\n\n    /// @notice Array of Integration Approve.\n    /// @dev Array of Integration Approve.\n    IntegrationsApprove[] private integrationsApprove;\n\n    /// @notice map ID to index in array in integration Approve.\n    /// @dev map ID to index in array in integration Approve.\n    mapping(uint256 => uint256) integrationIndexMap;\n\n    /// @notice map ID to status if exist.\n    /// @dev map ID to status if exist.\n    mapping(uint256 => bool) integrationExistMap;\n\n    /// @notice mapping id of integration approve to group and bool; //true - confirmed\n    /// @dev mapping id of integration approve to group and bool; //true - confirmed\n    mapping(uint256 => mapping(bytes32 => bool)) groupStatusMap; //mapping id of integration approve to group and bool; //true - confirmed\n    \n    /// @notice mapping id of integration approve to user and bool; //true - confirmed\n    /// @dev mapping id of integration approve to user and bool; //true - confirmed\n    mapping(uint256 => mapping(address => bool)) userStatusMap; //mapping id of integration approve to user and bool; //true - confirmed\n    \n    /// @notice mapping  of integration approve to its approved status.\n    /// @dev mapping  of integration approve to its approved status.\n    mapping(uint256 => bool) groupApprovedMap; // mapping  of integration approve to its status\n    \n    /// @notice mapping  of integration approve to its excution status.\n    /// @dev mapping  of integration approve to its excution status.\n    mapping(uint256 => bool) groupApprovedExecutionMap; // mapping  of integration approve to its status\n\n    modifier onlyAdmin()\n    {\n        require(roles.isAdmin(msg.sender), \"Restricted to admins.\");\n        _;\n    }\n\n    modifier onlyMember()\n    {\n        require(roles.isMember(msg.sender), \"Restricted to members.\");\n        _;\n    }\n\n    modifier onlyIntegration()\n    {\n        require(roles.isIntegration(msg.sender), \"Restricted to integration contract.\");\n        _;\n    }\n\n    /// @notice Add integration approve.\n    /// @dev Add integration approve.\n    /// @param _hash CID IPFS to integration Approve\n    /// @param _account Account to transfer WEI, when integration approve is confirmed\n    /// @param amount Amount USD to transfer\n    /// @param groups Array of groups, when one user from group must confirm and after that all group is confirmed. \n    /// @param group_for_vote Group for users, who can confirm.\n    /// @param block_start Timestamp of Start Confirmation Process\n    /// @param block_end Timestamp of Emd Confirmation Process\n    /// @return integratipnApproveID ID of integration Approve\n    function addIntegrationApprove(string memory _hash, address payable _account, uint256 amount, bytes32[] memory groups,bytes32 group_for_vote,uint256 block_start,uint256 block_end)\n    public\n    onlyIntegration\n    returns (uint256) {\n        \n        \n        uint256 _id= governor.getSingleProposalIdByCID(_hash);\n        integrationsApprove.push(IntegrationsApprove(_id,false,_hash,_account,amount,groups,group_for_vote,block_start,block_end,Confirmation.Pending));\n        totalNumber++;\n        integrationIndexMap[_id] = integrationsApprove.length -1;\n        groupApprovedExecutionMap[_id] = false;\n        integrationExistMap[_id] = true;\n        for(uint256 i=0;i<groups.length;i++){\n            groupStatusMap[_id][groups[i]] = false;\n        }\n        emit IntegrationApproveAdded(true,\"IntegrationApprove added\",_id);\n        return _id;\n    }\n\n    /// @notice Update IPFS CID.\n    /// @dev Update IPFS CID.\n    /// @param _id ID Integration Approve\n    /// @param _hash New IPFS CID\n    function updateHash(uint _id,string memory _hash)\n    public\n    onlyMember {\n        require(integrationExistMap[_id],\"Proposal not exist\");\n        if(integrationsApprove[integrationIndexMap[_id]].status== false)\n        {\n            integrationsApprove[integrationIndexMap[_id]].status== true;\n            integrationsApprove[integrationIndexMap[_id]].ipfs_hash = _hash;\n            emit IntegrationApproveUpdated(true,\"IntegrationApproved updated\",_id);\n            integrationsApprove[integrationIndexMap[_id]].status== false;\n        }\n        else\n        {\n            emit IntegrationApproveUpdated(false,\"IntegrationApproved update blocked by other task.\",_id);\n        }\n    }\n\n    /// @notice Get Total Integration Approve.\n    /// @dev Get Total Integration Approve.\n    /// @return count Count oF Integration Approve\n    function getTotalIntegrationsNumber()\n    public\n    view\n    returns (uint256)  {\n        return totalNumber;\n    }\n\n    /// @notice Get Integration Approve By ID.\n    /// @dev Get Integration Approve By ID.\n    /// @param _id Integration Approve ID \n    /// @return struct of Integration\n    function getIntegration(uint256 _id)\n    public\n    view\n    returns (IntegrationsApprove memory)  {\n        require(integrationExistMap[_id],\"Proposal not exist\");\n        return integrationsApprove[integrationIndexMap[_id]];\n    }\n\n    /// @notice Get Integration Approve CID IPFS.\n    /// @dev Get Integration Approve CID IPFS.\n    /// @param _id ID of Integration Approve\n    /// @return cid_ipfs IPFS CID\n    function getIntegrationHash(uint256 _id)\n    public\n    view\n    returns (string memory) {\n        require(integrationExistMap[_id],\"Proposal not exist\");\n        return integrationsApprove[integrationIndexMap[_id]].ipfs_hash;\n    }\n\n    /// @notice Get All Integration Approve.\n    /// @dev Get All Integration Approve.\n    /// @return list [] Array of Struct integration Approve.\n    function getAllIntegrations()\n    public\n    view\n    returns (IntegrationsApprove[] memory) {\n        return integrationsApprove;\n    }\n\n    /// @notice Get Groups for Integration Approve.\n    /// @dev Get Groups for Integration Approve.\n    /// @param _id ID of Integration Approve.\n    /// @return array Array fo Groups Names.\n    function getGroupsAll(uint256 _id)\n    public\n    view\n    returns (bytes32[] memory) {\n        require(integrationExistMap[_id],\"Proposal not exist\");\n        return integrationsApprove[integrationIndexMap[_id]].groups;\n    }\n\n    /// @notice Validate if Inetgration Approve Exist.\n    /// @dev Validate if Inetgration Approve Exist.\n    /// @param _id ID of Integration Approve.\n    /// @return status Status of Integration Approve.\n    function ifIntegrationExist(uint256 _id)\n    public\n    view\n    returns (bool) {\n        return integrationExistMap[_id];\n    }\n\n    /// @notice Get Process status - not use, because of bug.\n    /// @dev Get Process status - not use, because of bug.\n    /// @param _id ID of Integration Approve.\n    /// @return status Status of Integration Approve.\n    function getProcessStatus(uint256 _id)\n    public\n    view\n    returns (Confirmation) {\n        require(integrationExistMap[_id],\"Proposal not exist\");\n        return integrationsApprove[integrationIndexMap[_id]].confirmation_status;\n    }\n\n\n    /// @notice Validate if confirmation is in progress.\n    /// @dev Validate if confirmation is in progress.\n    /// @param _id ID of Integration Approve.\n    /// @return status Status of Integration Approve.\n    function getConfirmStatus(uint256 _id)\n    public\n    view\n    returns (Confirmation) {\n        require(integrationExistMap[_id],\"Proposal not exist\");\n        if( block.timestamp < integrationsApprove[integrationIndexMap[_id]].block_start){\n            return Confirmation.Pending;\n        }\n        if( block.timestamp >= integrationsApprove[integrationIndexMap[_id]].block_start && block.timestamp <=integrationsApprove[integrationIndexMap[_id]].block_end )\n        {\n            return Confirmation.Active;\n        }\n        if( integrationsApprove[integrationIndexMap[_id]].confirmation_status == Confirmation.Execute)\n        {\n            return Confirmation.Execute;\n        }\n        if( integrationsApprove[integrationIndexMap[_id]].confirmation_status == Confirmation.Defeted)\n        {\n            return Confirmation.Defeted;\n        }\n        if( integrationsApprove[integrationIndexMap[_id]].confirmation_status == Confirmation.Confirmed)\n        {\n            return Confirmation.Confirmed;\n        }\n        return Confirmation.Waiting;\n    }\n\n    /// @notice Validate if group is confirmed.\n    /// @dev Validate if group is confirmed.\n    /// @param _id ID of Integration Approve.\n    /// @param _group Group name.\n    /// @return status Status of confirmation.\n    function ifGroupConfirmed(uint256 _id,bytes32 _group)\n    public\n    view\n    returns (bool) {\n        require(integrationExistMap[_id],\"Proposal not exist\");\n        return groupStatusMap[_id][_group];\n        //return groupStatusMap[0][integrationsApprove[0].groups[0]];\n    }\n    \n    /// @notice Confirm Integration Approve by Group.\n    /// @dev Confirm Integration Approve by Group.\n    /// @param _id ID of Integration Approve.\n    /// @param _group Group name.\n    /// @param status True - For, False - Against.\n    /// @return status Status of execution.\n    function setGroupMap(uint256 _id,bytes32 _group,bool status)\n    public\n    \n    onlyMember\n    returns (bool) {\n\n        if(!ifIntegrationExist(_id)){\n            emit IntegrationApproveGroup(false,\"Integration not exist.\",_id,_group,status);\n            return false;\n        }\n        \n        if(ifGroup(_id, _group))\n        {\n            if(getConfirmStatus(_id) != Confirmation.Active)\n            {\n                emit IntegrationApproveGroup(false,\"Confirmation not ready.\",_id,_group,status);\n                return false;\n            }\n\n            if(!roles.isRole(msg.sender, _group)){\n                emit IntegrationApproveGroup(false,\"User is not in required group.\",_id,_group,status);\n                return false;\n            }\n\n            groupStatusMap[_id][_group] = status;\n            emit IntegrationApproveGroup(true,\"Group was changed\",_id,_group,status);\n            return true;\n        }\n        else\n        {\n            //walidate if one from given group, who should vote can vote\n            emit IntegrationApproveGroup(false,\"This group not exist for this IntegrationApprove.\",_id,_group,status);\n            return false;\n        }    \n    }\n\n    /// @notice Execute Integration Approve by User.\n    /// @dev Execute Integration Approve by User.\n    /// @param _id ID of Integration Approve.\n    /// @return status Status of execution.\n    function execute(uint256 _id)\n    public\n    onlyMember\n    returns (bool){\n\n        if(!ifIntegrationExist(_id)){\n            emit IntegrationApproveExecute(false,\"Integration not exist.\",_id);\n            return false;\n        }\n\n        if(block.timestamp > integrationsApprove[integrationIndexMap[_id]].block_end && block.timestamp > integrationsApprove[integrationIndexMap[_id]].block_start)\n        {  \n            if(groupApprovedExecutionMap[_id]){\n                emit IntegrationApproveExecute(false,\"Approve already executed.\",_id);\n                return false;\n            }\n            \n            for(uint i=0; i<integrationsApprove[integrationIndexMap[_id]].groups.length;i++){            \n                if(groupStatusMap[_id][integrationsApprove[integrationIndexMap[_id]].groups[i]] == false)            \n                {         \n                    groupApprovedExecutionMap[_id] = true;  \n                    integrationsApprove[integrationIndexMap[_id]].confirmation_status = Confirmation.Defeted;     \n                    emit IntegrationApproveExecute(false,\"Not all group approved.\",_id);\n                    return false;\n                \n                }            \n            }\n\n            address[] memory users = roles.getUsersInGroup(integrationsApprove[integrationIndexMap[_id]].group_for_vote);\n            //emit IntegrationApproveExecute(false,\"Members\",users.length);\n            uint256 confirmed_Status = 0;\n\n            for(uint i=0; i<users.length;i++){          \n                if(userStatusMap[_id][users[i]] == true)            \n                {                \n                    confirmed_Status=confirmed_Status+1;\n                }            \n            }\n\n            if((confirmed_Status *100)/(users.length) < 50)\n            {\n                groupApprovedExecutionMap[_id] = true;\n                integrationsApprove[integrationIndexMap[_id]].confirmation_status = Confirmation.Defeted;\n                emit IntegrationApproveExecute(false,\"Required number of users not confirmed this approve.\",confirmed_Status*100/users.length);\n                return false;\n            }\n\n            groupApprovedExecutionMap[_id] = true;\n            integrationsApprove[integrationIndexMap[_id]].confirmation_status = Confirmation.Confirmed;\n            bank.internalTransfer(integrationsApprove[integrationIndexMap[_id]].to_user,integrationsApprove[integrationIndexMap[_id]].amount);\n            //integrationsApprove[_id].amount\n            emit IntegrationApproveExecute(true,\"Execute completed.\",_id);\n            return true;\n        }\n        else\n        {\n            emit IntegrationApproveExecute(false,\"Confirmation in not ended.\",_id);\n            return false;\n        }\n    }\n    \n    /// @notice Validate if group exist in list of groups for this integration.\n    /// @dev Validate if group exist in list of groups for this integration.\n    /// @param _id ID of Integration Approve.\n    /// @param group Group Name.\n    /// @return status Status of execution.\n    function ifGroup(uint256 _id,bytes32 group)\n    public\n    view\n    returns (bool) {\n        require(integrationExistMap[_id],\"Proposal not exist\");\n        for(uint i=0; i<integrationsApprove[integrationIndexMap[_id]].groups.length;i++){\n            if(integrationsApprove[integrationIndexMap[_id]].groups[i] == group)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Get if User is confirm application approve.\n    /// @dev Get if User is confirm application approve.\n    /// @param _id ID of Integration Approve.\n    /// @param _user Group Name.\n    /// @return status Status of execution.\n    function ifUserConfirmed(uint256 _id,address _user)\n    public\n    view\n    returns (bool) {\n        require(integrationExistMap[_id],\"Proposal not exist\");\n        return userStatusMap[_id][_user];\n        //return groupStatusMap[0][integrationsApprove[0].groups[0]];\n    }\n\n    /// @notice Confirm Integration Approve by user.\n    /// @dev Confirm Integration Approve by user.\n    /// @param _id ID of Integration Approve.\n    /// @param status True - yes, False - no\n    /// @return status Status of execution.\n    function setConfirmUser(uint256 _id,bool status)\n    public\n    onlyMember\n    returns (bool) {\n\n        if(!ifIntegrationExist(_id)){\n            emit IntegrationApproveUser(false,\"Integration not exist.\",msg.sender,status);\n            return false;\n        }\n        \n            if(getConfirmStatus(_id) != Confirmation.Active)\n            {\n                emit IntegrationApproveUser(false,\"Confirmation not ready.\",msg.sender,status);\n                return false;\n            }\n\n            if(!roles.isRole(msg.sender, integrationsApprove[integrationIndexMap[_id]].group_for_vote)){\n                 emit IntegrationApproveUser(false,\"User is not in required group for confirmation.\",msg.sender,status);\n                return false;\n            }\n\n            userStatusMap[_id][msg.sender] = status;\n            emit IntegrationApproveUser(true,\"User was changed\",msg.sender,status);\n            return true;\n        \n    }\n\n    /// @notice Get Aggregate Info of Integration Approve.\n    /// @dev Get Aggregate Info of Integration Approve.\n    /// @return list List of Aggregation Appprove.\n    /// , _id Proposal ID.\n    /// , status Status.\n    /// , ipfs_hash IPFS CID of integration Approve.\n    /// , to_user User to transfer money, when integration approve is confirmed.\n    /// , amount Amount of WEI to transfer.\n    /// , groups Array of groups, when one user from group must confirm and after that all group is confirmed. \n    /// , group_for_vote Group for users, who can confirm.\n    /// , block_start Block for Start Confirmation Process.\n    /// , block_end Block for End Confirmation Process.\n    /// , confirmation_status Current Status.\n    /// , hasConfirm If User Confrim Approve.\n    function getAllIntegrationAggregate()\n    public\n    view\n    returns (IntegrationsApproveAggregate[] memory) {\n        IntegrationsApproveAggregate[] memory  integration_aggregate = new IntegrationsApproveAggregate[](integrationsApprove.length);\n        for(uint256 i=0; i<integrationsApprove.length;i++){\n            integration_aggregate[i].id = integrationsApprove[i].id;\n            integration_aggregate[i].status = integrationsApprove[i].status;\n            integration_aggregate[i].ipfs_hash = integrationsApprove[i].ipfs_hash;\n            integration_aggregate[i].to_user = integrationsApprove[i].to_user;\n            integration_aggregate[i].amount = integrationsApprove[i].amount;\n            integration_aggregate[i].groups = integrationsApprove[i].groups;\n            integration_aggregate[i].group_for_vote = integrationsApprove[i].group_for_vote;\n            integration_aggregate[i].block_start = integrationsApprove[i].block_start;\n            integration_aggregate[i].block_end = integrationsApprove[i].block_end;\n            integration_aggregate[i].confirmation_status = getConfirmStatus(integrationsApprove[i].id);\n            integration_aggregate[i].hasConfirm =ifUserConfirmed(integrationsApprove[i].id, msg.sender);\n        }\n\n        return integration_aggregate;\n    }\n\n\n    /// @notice Get Aggregate Info of Integration Approve Single.\n    /// @dev Get Aggregate Info of Integration Approve Single.\n    /// @param _id ID of Integration Approve.\n    /// @return list List of Aggregation Appprove.\n    /// , _id Proposal ID.\n    /// , status Status.\n    /// , ipfs_hash IPFS CID of integration Approve.\n    /// , to_user User to transfer money, when integration approve is confirmed.\n    /// , amount Amount of WEI to transfer.\n    /// , groups Array of groups, when one user from group must confirm and after that all group is confirmed. \n    /// , group_for_vote Group for users, who can confirm.\n    /// , block_start Block for Start Confirmation Process.\n    /// , block_end Block for End Confirmation Process.\n    /// , confirmation_status Current Status.\n    /// , hasConfirm If User Confrim Approve.\n    function getSingleIntegrationAggregate(uint256 _id)\n    public\n    view\n    returns (IntegrationsApproveAggregate memory) {\n        IntegrationsApproveAggregate memory  integration_aggregate = IntegrationsApproveAggregate(\n            _id,\n            integrationsApprove[integrationIndexMap[_id]].status,\n            integrationsApprove[integrationIndexMap[_id]].ipfs_hash,\n            integrationsApprove[integrationIndexMap[_id]].to_user,\n            integrationsApprove[integrationIndexMap[_id]].amount,\n            integrationsApprove[integrationIndexMap[_id]].groups,\n            integrationsApprove[integrationIndexMap[_id]].group_for_vote,\n            integrationsApprove[integrationIndexMap[_id]].block_start,\n            integrationsApprove[integrationIndexMap[_id]].block_end,\n            getConfirmStatus(_id),\n            ifUserConfirmed(_id,msg.sender)\n            );\n\n        return integration_aggregate;\n    }\n\n    /// @notice Set Timestamp for start and end.\n    /// @dev Set Timestamp for start and end.\n    /// @param _id ID of Integration Approve.\n    /// @param timestamp_start Timestam start vote.\n    /// @param timestamp_end Timestamp stop vote.\n    /// @return status Status of execution\n    /// @return message Message of execution\n    function setIntegrationApproveTimestamp(uint256 _id,uint256 timestamp_start, uint256 timestamp_end)\n    public\n    onlyAdmin\n    returns (bool,string memory,Confirmation) {\n\n        Confirmation status = getConfirmStatus(_id);\n\n        if(timestamp_start > timestamp_end)\n        {\n            return (false,\"Start timestamp is grather than end timestamp.\",status);\n        }\n\n        if(timestamp_start < block.timestamp)\n        {\n            return (false,\"Start timestamp is lower than current block timestamp.\",status);\n        }\n\n        if(getConfirmStatus(_id) != Confirmation.Pending)\n        {\n            return (false,\"You can only change timestamp, before vote is started.\",status);\n        }\n\n        integrationsApprove[integrationIndexMap[_id]].block_start = timestamp_start;\n        integrationsApprove[integrationIndexMap[_id]].block_end = timestamp_end;\n        return (true,\"New timestamp is set.\",status);\n    }\n\n    /// @notice Get current Reference to UsersGroups Address.\n    /// @dev Get current Reference to UsersGroups Address.\n    /// @return address DataFeed Address.\n    function getUsersGroups() \n    onlyAdmin\n    public view returns (address) {\n        return address(roles);\n    }\n        \n\n}"
    },
    "UsersGroups.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//pragma solidity ^0.8.0;\npragma solidity 0.8.12;\nimport \"Initializable.sol\";\n\n/// @title RequestMembers.\n/// @notice Contract stored User and groum membership.\n/// @dev Contract stored User and groum membership.\ncontract UsersGroups is Initializable {\n\n    /// @notice Array of static group.\n    /// @dev Array of static group.\n    bytes32[] private static_group = [\n      \n      bytes32(\"DAO_EXECUTE\"),\n      bytes32(\"Bank\"),\n      bytes32(\"Integration\"),\n      bytes32(\"Member\"),\n      bytes32(\"Admin\")\n    ];\n\n    /// @notice Event emmited when new group is added.\n    /// @dev Event emmited when new group is added.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return group Group Name.\n    event GroupAdd(bool status, string message,bytes32 group);\n\n    /// @notice Event emmited when new group is deleted.\n    /// @dev Event emmited when new group is deleted.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return group Group Name.\n    event GroupRemove(bool status, string message,bytes32 group);\n\n    /// @notice Event emmited when group budget is calculated.\n    /// @dev Event emmited when group budget is calculated.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return group Group Name.\n    event GroupCalculate(bool status, string message,bytes32 group);\n\n    /// @notice Event emmited when group timestam is set.\n    /// @dev Event emmited when group timestam is set.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return group Group Name.\n    /// @return timestamp Timestamp for integration to set.\n    event GroupIntegrationTimestamp(bool status, string message,bytes32 group,uint256 timestamp);\n\n    /// @notice Event emmited when new user is added.\n    /// @dev Event emmited when new user is added.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return user User Address.\n    event UserAdd(bool status, string message,address user);\n\n    /// @notice Event emmited when new user is added to group.\n    /// @dev Event emmited when new user is added to group.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return user User Address.\n    /// @return group Group Name.\n    event UserToGroupAdd(bool status, string message,address user,bytes32 group);\n\n    /// @notice Event emmited when new user is removed from group.\n    /// @dev Event emmited when new user is removed from group.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return user User Address.\n    /// @return group Group Name.\n    event UserToGroupRemove(bool status, string message,address user,bytes32 group);\n\n    /// @notice Event emmited when new user is deleted.\n    /// @dev Event emmited when new user is deleted.\n    /// @return status True/False - status of excution.\n    /// @return message Information with Error or Successfull execution.\n    /// @return user User Address.\n    event UserRemove(bool status, string message,address user);\n\n\n\n    /// @notice Owner address.\n    /// @dev Owner address.\n    address private owner;\n\n    /// @notice Array of groups.\n    /// @dev Array of groups.\n    Group[] private groups; \n\n    /// @notice Array of users.\n    /// @dev Array of users.\n    User[] private users;\n\n    /// @notice User count.\n    /// @dev User count.\n    uint256 private UserCount=0;\n\n    /// @notice Group count.\n    /// @dev Group count.\n    uint256 private GroupCount=0;\n\n    /// @notice Map user address to: map group to status if added to this group.\n    /// @dev Map user address to: map group to status if added to this group.\n    mapping(address => mapping(bytes32 => bool)) userToGroupMap;\n\n    /// @notice Map user address to status if exist.\n    /// @dev Map user address to status if exist.\n    mapping(address => bool) usersMap; \n\n     /// @notice Map user address to index in users array.\n    /// @dev Map user address to index in users array.\n    mapping(address => uint256) userIndex; \n\n    /// @notice Map group to status if exist.\n    /// @dev Map group to status if exist.\n    mapping(bytes32 => bool) groupsMap; \n\n    /// @notice Map group to index in group array.\n    /// @dev Map group to index in group array.\n    mapping(bytes32 => uint256) groupIndex; \n\n    /// @notice Map group to array of membership users.\n    /// @dev Map group to array of membership users.\n    mapping(bytes32 => address[]) groupToUserAddressMap; \n\n    /// @notice Structure of group.\n    /// @dev Structure of group.\n    /// @param group_name Group name.\n    /// @param current_balance For future use.\n    /// @param blocked_balance For future use.\n    /// @param timestamp_created Timestamp Creation.\n    /// @param timestamp_last_integration Timestamp for last integration.\n    struct Group {\n        bytes32 group_name;\n        uint256 current_balance;\n        uint256 blocked_balance;\n        uint256 timestamp_created;\n        uint256 timestamp_last_integration;\n    }\n\n    /// @notice Structure of users.\n    /// @dev Structure of users.\n    /// @param userID User Address.\n    /// @param current_balance For future use.\n    /// @param blocked_balance  For future use.\n    /// @param timestamp_status Timestamp Creation.\n    struct User {\n        address userID;\n        uint256 current_balance;\n        uint256 blocked_balance;\n        uint256 timestamp_created;\n        bool timestamp_status;\n    }\n\n  /// @notice Contructor.\n  /// @dev Contructor.\n  /// @param _owner Owner Address \n  constructor (address _owner) public  {\n    owner = _owner;\n    addUser(owner);\n    \n    for(uint256 i=0;i<static_group.length;i++)\n    {\n      addGroup(static_group[i]);\n    }\n    setUserToGroup(owner, static_group[4]);\n    //addUser(owner);\n    //setUserToGroup(owner, static_group[0]);\n  }\n\n  /// @notice Initializer for proxy contract migration - future release.\n  /// @dev Initializer for proxy contract migration - future release.\n  /// @param _owner Owner Address.\n  function initialize (address _owner) initializer public {\n    static_group.push(bytes32(\"DAO_EXECUTE\"));\n    static_group.push(bytes32(\"Bank\"));\n    static_group.push(bytes32(\"Integration\"));\n    static_group.push(bytes32(\"Member\"));\n    static_group.push(bytes32(\"Admin\"));\n\n    users.push(User(_owner,0 ,0,block.timestamp, false));\n    usersMap[_owner] = true;\n    userIndex[_owner] = UserCount;\n    userToGroupMap[_owner][static_group[3]] = true;\n    groupToUserAddressMap[static_group[3]].push(_owner);\n    UserCount=UserCount+1;\n\n    for(uint256 i=0;i<static_group.length;i++)\n    {\n      groups.push(Group(static_group[i],0,0,block.timestamp,0));\n      groupsMap[static_group[i]] = true;\n      groupIndex[static_group[i]] = GroupCount;\n      GroupCount=GroupCount+1;\n    }\n\n    userToGroupMap[_owner][static_group[4]]=true;\n    groupToUserAddressMap[static_group[4]].push(_owner);\n    \n  }\n\n  modifier onlyAdmin()\n  {\n    require((owner == msg.sender || isAdmin(msg.sender)), \"Restricted to admins or owner.\");\n    _;\n  }\n\n  modifier onlyPost()\n  {\n    require((isPost(msg.sender)), \"Restricted to posts.\");\n    _;\n  }\n\n  /// @notice Check if User exist.\n  /// @dev Check if User exist.\n  /// @param user Account Address.\n  /// @return status True/False if exist.\n  function ifUserExist(address user)\n  public\n  view\n  returns (bool)\n  {\n    return usersMap[user];\n  }\n\n  /// @notice Check if group exist.\n  /// @dev Check if group exist.\n  /// @param group Group Name.\n  /// @return status True/False if exist.\n  function ifGroupExist(bytes32 group)\n  public\n  view\n  returns (bool)\n  {\n    return groupsMap[group];\n  }\n\n  /// @notice Check if User is in Group.\n  /// @dev e Check if User is in Group.\n  /// @param user Account Address.\n  /// @param group Group Name.\n  /// @return status True/False if exist.\n  function ifUserHasGroup(address user,bytes32 group)\n  internal\n  view\n  returns (bool)\n  {\n    if(!ifUserExist(user)||!ifGroupExist(group))\n    {\n      return false;\n    }\n\n    return userToGroupMap[user][group];\n  }\n\n  /// @notice Get data of user.\n  /// @dev Get data of user.\n  /// @param user Account Address.\n  /// @return [balance,blocked_balance,timestamp_created,timestamp_status]\n  function getUser(address user)\n  public\n  view\n  onlyAdmin\n  returns (uint256,uint256,uint256,bool)\n  {\n    require(ifUserExist(user),\"User not exist\");\n    return (users[userIndex[user]].current_balance,users[userIndex[user]].blocked_balance,users[userIndex[user]].timestamp_created,users[userIndex[user]].timestamp_status);\n  }\n\n  /// @notice Get User Address by User Index.\n  /// @dev Get User Address by User Index.\n  /// @param _index User Index.\n  /// @return [userID,balance,blocked_balance,timestamp_created,timestamp_status].\n  function getUserByIndex(uint256 _index)\n  public\n  view\n  onlyAdmin\n  returns (address)\n  {\n    return (users[_index].userID);\n  }\n\n  /// @notice Get user Index.\n  /// @dev Get user Index.\n  /// @param user Account Address.\n  /// @return struct_of_user User Enum.\n  function getUserindex(address user)\n  public\n  view\n  onlyAdmin\n  returns (uint256)\n  {\n    require(ifUserExist(user),\"User not exist\");\n    return userIndex[user];\n  }\n\n  /// @notice Get array of Struct User.\n  /// @dev Get array of Struct User.\n  /// @return list_of_struct_of_userGet List User Enum.\n  function getUsers()\n  public\n  view \n  onlyAdmin\n  returns (User[] memory)\n  {\n    return users;\n  }\n\n  /// @notice Get group members.\n  /// @dev Get group members.\n  /// @param group Group Name\n  /// @return array_of_address Array of accounts.\n  function getUsersInGroup(bytes32 group)\n  public\n  view\n  onlyAdmin\n  returns (address[] memory)\n  {\n    return groupToUserAddressMap[group];\n  }\n\n  /// @notice Get total number of users.\n  /// @dev Get total number of users.\n  /// @return count Number Of Users.\n  function getUsersCount()\n  public\n  view\n  onlyAdmin\n  returns (uint256)\n  {\n    return UserCount;\n  }\n\n  /// @notice Get total number of groups.\n  /// @dev Get total number of groups.\n  /// @return count Number Of Groups.\n  function getGroupsCount()\n  public\n  view\n  onlyAdmin\n  returns (uint256)\n  {\n    return GroupCount;\n  }\n\n  /// @notice Get All Group.\n  /// @dev Get All Group.\n  /// @return list_of_struct_group List of Group Enum.\n  function getGroups()\n  public\n  view\n  returns (Group[] memory)\n  {\n    return groups;\n  }\n  /// @notice Get group.\n  /// @dev Get group.\n  /// @param group Group Name.\n  /// @return group_data  Array of group data [group_name,timestamp_created,timestamp_last_integration]\n  function getGroup(bytes32 group)\n  public\n  view\n  onlyAdmin\n  returns (bytes32,uint256,uint256)\n  {\n    //require(ifGroupExist(group),\"Group not exist\");\n    return (groups[groupIndex[group]].group_name,\n    groups[groupIndex[group]].timestamp_created,\n    groups[groupIndex[group]].timestamp_last_integration);\n  }\n\n  /// @notice Add group.\n  /// @dev Add group.\n  /// @param group Group Name.\n  /// @return status True/False - status of excution.\n  function addGroup(bytes32 group)\n  public\n  onlyAdmin\n  returns (bool)\n  {\n    if(ifGroupExist(group)){\n      emit GroupAdd(false,\"Group Exist.\",group);\n      return false;\n    }\n    groups.push(Group(group,0,0,block.timestamp,0));\n    groupsMap[group] = true;\n    groupIndex[group] = GroupCount;\n    GroupCount=GroupCount+1;\n    emit GroupAdd(true,\"Group added successfully.\",group);\n    return true;\n  }\n\n  /// @notice Remove group.\n  /// @dev Remove group.\n  /// @param group Group Name.\n  /// @return status True/False - status of excution.\n  function removeGroup(bytes32 group)\n  public\n  onlyAdmin\n  returns (bool)\n  {\n    for(uint256 i=0;i<static_group.length;i++)\n    {\n      if(static_group[i] == group)\n      {\n        emit GroupRemove(false,\"Group can't be removed.\",group);\n        return false;\n      }\n    }\n    if(ifGroupExist(group))\n    {\n      \n      for(uint256 i=0;i<users.length;i++)\n      {\n        if(ifUserHasGroup(users[i].userID,group))\n        {\n          emit GroupRemove(false,\"Group has members, Please delete members from group.\",group);\n          return false;\n        }\n      }\n\n      if(users.length== 1)\n      {\n        users.pop();\n      }\n      else\n      {\n        for(uint256 i=groupIndex[group];i<groups.length-1;i++)\n        {\n          groups[i]=groups[i+1];\n          groupIndex[groups[i+1].group_name]=i;\n        }\n        groups.pop();\n      }\n        delete groupIndex[group];\n        delete groupsMap[group];\n        GroupCount=GroupCount-1;\n        emit GroupRemove(true,\"group removed successfully.\",group);\n        return true;\n    }\n    else\n    {\n      emit GroupRemove(false,\"Group Not Exist.\",group);\n      return false;\n    }\n  }\n  /// @notice Set last Integration Timestamp.\n  /// @dev Set last Integration Timestamp.\n  /// @param group Group Name.\n  /// @param timestamp_last_integration Integration Timestamp.\n  /// @return status True/False - status of excution.\n  function setIntegrationTimestamp(bytes32 group,uint256 timestamp_last_integration)\n  public\n  onlyPost\n  returns (bool){\n    if(!ifGroupExist(group))\n    {\n      emit GroupIntegrationTimestamp(false,\"Group not exist.\",group, timestamp_last_integration);\n      return false;\n    }\n    else\n    {\n      if(groups[groupIndex[group]].timestamp_last_integration < timestamp_last_integration){\n        groups[groupIndex[group]].timestamp_last_integration = timestamp_last_integration;\n        emit GroupIntegrationTimestamp(true,\"Timestamp is set.\",group, timestamp_last_integration);\n        return true;\n      }\n      else{\n        emit GroupIntegrationTimestamp(true,\"Timestamp is not set, because is less than current timestamp for this group.\",group, timestamp_last_integration);\n        return true;\n      }\n    }\n  }\n  /// @notice Add User.\n  /// @dev Add User.\n  /// @param user User Address.\n  /// @return status True/False - status of excution.\n  function addUser(address user)\n  public\n  onlyAdmin\n  returns (bool)\n  {\n    if(ifUserExist(user)){\n      emit UserAdd(false,\"User Exist.\",user);\n      return false;\n    }\n    \n    users.push(User(user,0,0,block.timestamp, false));\n    usersMap[user] = true;\n    userIndex[user] = UserCount;\n    userToGroupMap[user][static_group[3]] = true;\n    groupToUserAddressMap[static_group[3]].push(user);\n    UserCount=UserCount+1;\n    emit UserAdd(true,\"User added successfully.\",user);\n    return true;\n  }\n  /// @notice Add Smart Contract to Users, beacuse they need permissions based on groups.\n  /// @dev Add Smart Contract to Users, beacuse they need permissions based on groups.\n  /// @param user User Address.\n  /// @return status True/False - status of excution.\n  function addSmartContract(address user)\n  public\n  onlyAdmin\n  returns (bool)\n  {\n    if(ifUserExist(user)){\n      emit UserAdd(false,\"User Exist.\",user);\n      return false;\n    }\n    \n    users.push(User(user,0,0,block.timestamp, false));\n    usersMap[user] = true;\n    userIndex[user] = UserCount;\n    UserCount=UserCount+1;\n    emit UserAdd(true,\"User added successfully.\",user);\n    return true;\n  }\n\n  /// @notice Remove group.\n  /// @dev Remove group.\n  /// @param user User Address.\n  /// @return status True/False - status of excution.\n  function removeUser(address user)\n  public\n  onlyAdmin\n  returns (bool)\n  {\n    if(ifUserExist(user))\n    {\n      if(users.length== 1)\n      {\n        users.pop();\n      }\n      else\n      {\n        uint256 user_index = userIndex[user];\n        for(uint256 i=user_index;i<users.length-1;i++)\n        {\n          users[i]=users[i+1];\n          userIndex[users[i+1].userID]=i;\n        }\n        users.pop();\n      }\n        delete userIndex[user];\n        delete usersMap[user];\n        for(uint i=0;i<groups.length;i++){\n          if(ifUserHasGroup(user,groups[i].group_name))\n          {\n            delete userToGroupMap[user][groups[i].group_name];\n          }\n        }\n        \n        UserCount=UserCount-1;\n        emit UserRemove(true,\"User removed.\",user);\n        return true;\n    }\n    else\n    {\n      emit UserRemove(false,\"User Not Exist.\",user);\n      return false;\n    }\n  }\n\n  /// @notice Add user to group.\n  /// @dev Add user to group.\n  /// @param user User Address.\n  /// @param group Group Name.\n  /// @return status True/False - status of excution.\n  function setUserToGroup(address user,bytes32 group)\n  public\n  onlyAdmin\n  returns (bool)\n  {\n\n    if(!ifUserExist(user)){\n      emit UserToGroupAdd(false,\"User not Exist.\",user,group);\n      return false;\n    }\n\n    if(!ifGroupExist(group)){\n      emit UserToGroupAdd(false,\"Group not Exist.\",user,group);\n      return false;\n    }\n\n    if(ifUserHasGroup(user,group))\n    {\n      emit UserToGroupAdd(false,\"User is in group.\",user,group);\n      return false;\n    }\n\n    userToGroupMap[user][group]=true;\n    groupToUserAddressMap[group].push(user);\n    emit UserToGroupAdd(true,\"User added to group successfully.\",user,group);\n    return true;\n  }\n\n  /// @notice Remove user from group.\n  /// @dev Remove user from group.\n  /// @param user User Address.\n  /// @param group Group Name.\n  /// @return status True/False - status of excution.\n  function removeUserFromGroup(address user,bytes32 group)\n  public\n  onlyAdmin\n  returns (bool)\n  {\n\n    if(!ifUserExist(user)){\n      emit UserToGroupRemove(false,\"User not Exist.\",user,group);\n      return false;\n    }\n\n    if(!ifGroupExist(group)){\n      emit UserToGroupRemove(false,\"Group not Exist.\",user,group);\n      return false;\n    }\n\n    if(!ifUserHasGroup(user,group)){\n      emit UserToGroupRemove(false,\"User is not in group.\",user,group);\n      return false;\n    }\n\n    \n    uint256 index = 0;\n    uint256 long = groupToUserAddressMap[group].length-1;\n    address[] memory assets = new address[](groupToUserAddressMap[group].length-1);\n\n    for(uint i=0;i<groupToUserAddressMap[group].length;i++)\n    {\n      if(groupToUserAddressMap[group][i] == user){\n        for(uint ii=i; ii<long;ii++){\n            emit UserToGroupRemove(true,\"Finded user.\",groupToUserAddressMap[group][ii] ,group);\n        }\n        \n        //groupToUserAddressMap[group].pop();\n      }\n      else\n      {\n        assets[index]=groupToUserAddressMap[group][i];\n        index++;\n      }\n      \n    }\n    userToGroupMap[user][group]=false;\n    groupToUserAddressMap[group] = assets;\n    emit UserToGroupRemove(true,\"User removed group successfully.\",user,group);\n    return true;\n  }\n\n  /// @notice Check if user is admin.\n  /// @dev Check if user is admin.\n  /// @param account User Address.\n  /// @return status True/False - status of excution.\n  function isAdmin(address account)\n  public\n  view\n  returns (bool)\n  {\n    return ifUserHasGroup(account,groups[4].group_name);\n  }\n\n  /// @notice Check if user is in group Integration.\n  /// @dev Check if user is in group Integration.\n  /// @param account User Address.\n  /// @return status True/False - status of excution.\n  function isIntegration(address account)\n  public\n  view\n  returns (bool)\n  {\n    return ifUserHasGroup(account,groups[2].group_name);\n  }\n\n  /// @notice Check if user is in group who can add Blog Post.\n  /// @dev Check if user is in group who can add Blog Post.\n  /// @param account User Address.\n  /// @return status True/False - status of excution.\n  function isPost(address account)\n  public\n  view\n  returns (bool)\n  {\n    return ifUserHasGroup(account,groups[0].group_name);\n  }\n\n  /// @notice Check if user is in group who can transfer from Bank.\n  /// @dev Check if user is in group who can transfer from Bank.\n  /// @param account User Address.\n  /// @return status True/False - status of excution.\n  function isBank(address account)\n  public\n  view\n  returns (bool)\n  {\n    return ifUserHasGroup(account,groups[1].group_name);\n  }\n\n  /// @notice Check if user is in group Member.\n  /// @dev Check if user is in group Member.\n  /// @param account User Address.\n  /// @return status True/False - status of excution.\n  function isMember(address account)\n  public\n  view\n  returns (bool)\n  {\n    return ifUserHasGroup(account,groups[3].group_name);\n  }\n\n  /// @notice Check if user is in this group.\n  /// @dev Check if user is in this group.\n  /// @param account User Address.\n  /// @param group Group Name.\n  /// @return status True/False - status of excution.\n  function isRole(address account,bytes32 group)\n  public\n  view\n  returns (bool)\n  {\n    return ifUserHasGroup(account,group);\n  }\n\n  /// @notice Calculate, if group can add Integration.\n  /// @dev Calculate, if group can add Integration.\n  /// @param group User Address.\n  /// @param future_integration_timestamp Future Integration timestamp.\n  /// @param integration_budget Budget needed for integration.\n  /// @return status True/False - status of excution\n  function groupCalculate(bytes32 group,uint256 future_integration_timestamp, uint256 integration_budget)\n  public\n  onlyPost\n  returns (bool)\n  {\n    if(!ifGroupExist(group)){\n      emit GroupCalculate(false,\"Group not Exist.\",group);\n      return false;\n    }\n    //if date was in past\n    if(future_integration_timestamp < block.timestamp)\n    {\n      //uint256 diff_time = future_integration_timestamp - block.timestamp;\n      emit GroupCalculate(false,\"Integration timestamp is wrong.\",group);\n      //emit GroupCalculateBlock(false,\"Timestamp block.\",block.timestamp);\n      //emit GroupCalculateBlock(false,\"Timestamp integration.\",future_integration_timestamp);\n      //emit GroupCalculateBlock(false,\"Timestamp difference.\",diff_time);\n      return false;\n    }\n\n    //if less than 60days\n    uint diff = (future_integration_timestamp - groups[groupIndex[group]].timestamp_last_integration) / 60 / 60 / 24;\n    //emit GroupCalculateBlock(false,\"Timestamp difference day.\",diff);\n    if(diff < 60){\n      emit GroupCalculate(false,\"Beetween integrations is less than 60days.\",group);\n      return false;\n    }\n\n    //if budget is to hight\n    if(integration_budget > groupToUserAddressMap[group].length * 25)\n    {\n      emit GroupCalculate(false,\"Budget is too hight.\",group);\n      return false;\n    }\n\n\n    emit GroupCalculate(true,\"Group can organize integration.\",group);\n    return true;\n  }\n\n\n\n\n\n\n}\n"
    },
    "Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "Bank.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"AggregatorV3Interface.sol\";\nimport \"UsersGroups.sol\";\nimport \"Initializable.sol\";\n\n/// @title Bank.\n/// @notice Contract, who store ether and transfer it to winner.\n/// @dev\ncontract Bank is Initializable{\n    /// @notice address UserRoles Contract.\n    /// @dev address UserRoles Contract.\n    UsersGroups private roles;\n    \n    /// @notice address Bank Contract Owner.\n    /// @dev address Bank Contract Owner.\n    address payable private owner;\n\n    uint private contractBalance;//contract value \n    uint private ownerBalance;\n    uint private balanceTo;\n\n    /// @notice Event emited, when transfer to bank\n    /// @dev Event emited, when transfer to bank\n    /// @return address Address transfer from.\n    /// @return amount Amount transfer.\n    event Received(address, uint);\n\n    /// @notice Event emited, when transfer from bank\n    /// @dev Event emited, when transfer from bank\n    /// @return address Address transfer to.\n    /// @return amount Amount transfer\n    event Send(address, uint);\n\n    /// @notice Aggregator to calculate current price.\n    /// @dev Aggregator to calculate current price.\n    AggregatorV3Interface internal priceFeed;\n\n    /// @notice Address for Aggregator to calculate current price.\n    /// @dev Address for Aggregator to calculate current price.\n    address addressDataFeed;\n\n\n    /// @notice constructor Bank Contract.\n    /// @dev constructor Bank Contract.\n    /// @param roleContract - address of UserRoles Contract.\n    /// @param dataFeed - address of AggregatorV3Interface Contract.\n    constructor (address roleContract, address dataFeed)  {\n        owner=payable(msg.sender);   \n        roles = UsersGroups(roleContract);\n        priceFeed = AggregatorV3Interface(dataFeed);\n        addressDataFeed = dataFeed;\n\n    }\n\n    /// @notice Initialize contrace Bank Contract by Proxy.\n    /// @dev Initialize contrace Bank Contract by Proxy.\n    /// @param roleContract - address of UserRoles Contract.\n    /// @param dataFeed - address of AggregatorV3Interface Contract.\n    function initialize (address roleContract, address dataFeed) initializer public {\n        owner=payable(msg.sender);   \n        roles = UsersGroups(roleContract);\n        priceFeed = AggregatorV3Interface(dataFeed);\n        addressDataFeed = dataFeed;\n    }\n    \n    modifier onlyBank()\n    {\n        require(roles.isBank(msg.sender), \"Restricted to bank.\");\n        _;\n    }\n\n    modifier onlyAdmin()\n    {\n        require(roles.isAdmin(msg.sender), \"Restricted to admins.\");\n        _;\n    }\n\n    /// @notice Transfer ether from bank to another account.\n    /// @dev Transfer from bank to another account.\n    /// @param _to - account for transfer in 0.01, its mean 1 is 0.01, if you want transfer 10, input is 100*10=1000,etc.\n    /// @param _value - amount for transfer in 0.01, its mean 1 is 0.01, if you want transfer 10, input is 100*10=1000,etc.\n    function internalTransfer(address payable _to,uint _value)\n    public\n    payable\n    onlyBank\n    {\n        uint denominator = uint(getLatestPrice()); \n        uint256 ethInUsdAmount = _value * 1000000000000000000000/denominator * 100000/100; \n        emit Send(_to, ethInUsdAmount);\n        (bool sent,)=_to.call{value: ethInUsdAmount}(\"\");\n        ownerBalance=owner.balance;\n        balanceTo=_to.balance;\n        contractBalance=address(this).balance;\n        require(sent,\"failed to send\");\n    }\n    /// @notice For receive money for another account.\n    /// @dev For receive money for another account.\n    receive()\n    external\n    payable\n    {\n        emit Received(msg.sender, msg.value);\n    }\n\n    /// @notice Get Bank Balance.\n    /// @dev Get Bank Balance.\n    /// @return balance Bank balance.\n    function getCurrentStatus()\n    public\n    view\n    returns (uint)\n    {\n        return address(this).balance;\n    }\n\n    /// @notice Get calculated price.\n    /// @dev Get calculated price.\n    /// @return price Price from V3Aggregator.\n    function getLatestPrice() public view returns (int) {\n        (\n            /*uint80 roundID*/,\n            int price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return price;\n    }\n\n    /// @notice Get dataFeed Address.\n    /// @dev Get dataFeed Address.\n    /// @return address DataFeed Address.\n    function getDataFeedAddress() \n    public view returns (address) {\n        return addressDataFeed;\n    }\n\n    /// @notice Get current Reference to UsersGroups Address.\n    /// @dev Get current Reference to UsersGroups Address.\n    /// @return address DataFeed Address.\n    function getUsersGroups() \n    onlyAdmin\n    public view returns (address) {\n        return address(roles);\n    }\n\n}"
    },
    "AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "GovernorContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\n\nimport \"GovernorUpgradeable.sol\";\nimport \"GovernorSettingsUpgradeable.sol\";\nimport \"GovernorCountingSimpleUpgradeable.sol\";\nimport \"GovernorVotesUpgradeable.sol\";\nimport \"GovernorVotesQuorumFractionUpgradeable.sol\";\nimport \"GovernorTimelockControlUpgradeable.sol\";\nimport \"ERC20VotesUpgradeable.sol\";\nimport \"Initializable.sol\";\n\nimport \"UsersGroups.sol\";\nimport \"GovernorContractProposal.sol\";\n\n\n/// @title GovernorContract\n/// @notice GovernorContract implementation from openzeppelin\n/// @dev GovernorContract implementation from openzeppelin\ncontract GovernorContract is\n    Initializable, \n    GovernorUpgradeable, \n    GovernorSettingsUpgradeable, \n    GovernorCountingSimpleUpgradeable, \n    GovernorVotesUpgradeable, \n    GovernorVotesQuorumFractionUpgradeable, \n    GovernorTimelockControlUpgradeable,\n    GovernorContractProposal\n{\n    /// @notice Delay before voting shoud start.\n    /// @dev Delay before voting shoud start.\n    uint256 public s_votingDelay;\n\n    /// @notice Voting period.\n    /// @dev Voting period.\n    uint256 public s_votingPeriod;\n\n    /// @notice Reference to UsersGroups contract.\n    /// @dev Reference to UsersGroups contract.\n    UsersGroups roles;\n\n\n    /// @notice Proposal list.\n    /// @dev Proposal list.\n    Proposal[] public proposals;\n\n    /// @notice Mapping proposalID to status if exist.\n    /// @dev Mapping proposalID to status if exist.\n    mapping(uint256 => bool) proposalsMap;\n\n    /// @notice Mapping proposal ID to index in array of Proposals.\n    /// @dev Mapping proposal ID to index in array of Proposals.\n    mapping(uint256 => uint256) proposalsIndexMap;\n\n    /// @notice Total number of proposals.\n    /// @dev Total number of proposals.\n    uint256 numberOfProposals = 0;\n\n\n    /// @notice Event emmited when proposal is added.\n    /// @dev Event emmited when proposal is added.\n    /// @return status True/False - status of excution\n    /// @return proposalID Proposal ID\n    /// @return message Information with Error or Successfull execution.\n    event ProposalAdd(bool status, uint256 proposalID, string message);\n\n    /// @notice Event emmited when proposal is updated.\n    /// @dev Event emmited when proposal is updated.\n    /// @return status True/False - status of excution.\n    /// @return proposalID Proposal ID.\n    /// @return message Information with Error or Successfull execution.\n    event ProposalUpdated(bool status, uint256 proposalID, string message);\n\n    /// @notice Event emmited when user is voted.\n    /// @dev Event emmited when user is voted.\n    /// @return status True/False - status of excution.\n    /// @return proposalID Proposal ID.\n    /// @return message Information with Error or Successfull execution.\n    event GCVote(bool status,string message, address account);\n\n    /// @notice Event emmited when proposal is added.\n    /// @dev Event emmited when proposal is added.\n    /// @return status True/False - status of excution.\n    /// @return proposalID Proposal ID.\n    /// @return message Information with Error or Successfull execution.\n    event GCPropose(bool status,string message, address account);\n\n\n    modifier onlyAdmin()\n    {\n        require(roles.isAdmin(msg.sender), \"Restricted to admins GovernanceContract.\");\n        _;\n    }\n    /// @notice Constructor.\n    /// @dev Constructor.\n    constructor() {\n        _disableInitializers();\n    }\n    /// @notice Initializer.\n    /// @dev Initializer.\n    /// @param _quorumPercentage Quorum number beetween 1-100;\n    /// @param _votingPeriod Number of block for delay to start voting.\n    /// @param _votingDelay Number of block for voting.\n    /// @param roleContract Refernece to UsersRoles Contract.\n    function initialize(\n        IVotesUpgradeable _token,\n        TimelockControllerUpgradeable _timelock,\n        uint256 _quorumPercentage,\n        uint256 _votingPeriod,\n        uint256 _votingDelay,\n        address roleContract)\n        initializer public\n    {\n        __Governor_init(\"GovernorContract\");\n        __GovernorSettings_init(_votingDelay, _votingPeriod, 0);\n        __GovernorCountingSimple_init();\n        __GovernorVotes_init(_token);\n        __GovernorVotesQuorumFraction_init(_quorumPercentage);\n        __GovernorTimelockControl_init(_timelock);\n        s_votingDelay = _votingDelay;\n        s_votingPeriod = _votingPeriod;\n        roles = UsersGroups(roleContract);\n    }\n\n    modifier onlyMember()\n    {\n        require(roles.isMember(msg.sender), \"Restricted to members.\");\n        _;\n    }\n\n    /// @notice Get voting delay.\n    /// @dev Get voting delay.\n    /// @return s_votingDelay Voting delay.\n    function votingDelay() public view \n    override(IGovernorUpgradeable, GovernorSettingsUpgradeable)\n    returns (uint256) {\n        return s_votingDelay; // 1 = 1 block\n    }\n\n    /// @notice Get voting period.\n    /// @dev Get voting period.\n    /// @return s_votingPeriod Voting period.\n    function votingPeriod() public view \n    override(IGovernorUpgradeable, GovernorSettingsUpgradeable)\n    returns (uint256) {\n        return s_votingPeriod; // 45818 = 1 week\n    }\n\n    /// @notice Calculate All Tokens at start of voting.\n    /// @dev Calculate All Tokens at start of voting.\n    /// @return status Amount of tokens per group.   \n    function TokensPerGroup(uint256 proposalId) public view  \n    returns (uint256) {\n\n        //uint256 blockNumber = proposalSnapshot(proposalId);\n        bytes32 group = proposals[proposalsIndexMap[proposalId]].groups;\n        address [] memory members = roles.getUsersInGroup(group);\n\n        uint256 totalSupply = 0;\n        for (uint8 i=0; i< members.length;i++){\n            totalSupply = totalSupply + getVotes(members[i],proposalSnapshot(proposalId));\n        }\n\n        return totalSupply;\n\n    }\n\n    /// @notice Calculate quorum for group - sum of tokens for memebers * quorumNumerator/quorumDenumerator, when vote is starting.\n    /// @dev Calculate quorum for group - sum of tokens for memebers * quorumNumerator/quorumDenumerator, when vote is starting.\n    /// @return quorum Quorum per group.(0-100%)\n    function quorumPerGroup(uint256 proposalId) public view  \n    returns (uint256) {\n        return TokensPerGroup(proposalId) * quorumNumerator() / quorumDenominator();\n    }\n\n    /// @notice Override validate quorum needed per group, it is members token, when vote is starting;\n    /// @dev Override validate quorum needed per group, it is members token, when vote is starting;\n    /// @return status Status of execution.\n    function _quorumReached(uint256 proposalId) internal view  \n    override(GovernorUpgradeable,GovernorCountingSimpleUpgradeable) \n    returns (bool) {\n        (\n            uint256 againstVotes,\n            uint256 forVotes,\n            uint256 abstainVotes\n        ) = proposalVotes(proposalId);\n\n        return quorumPerGroup(proposalId) <= forVotes + abstainVotes;\n\n        //return quorum(proposalSnapshot(proposalId)) <= forVotes + abstainVotes;\n    }\n\n\n    /// @notice Get quorum.\n    /// @dev Get quorum.\n    /// @param blockNumber - block number for validate quorum.\n    /// @return quorum Quorum.\n    function quorum(uint256 blockNumber)\n        public\n        view\n        override(IGovernorUpgradeable, GovernorVotesQuorumFractionUpgradeable)\n        returns (uint256)\n    {\n        return super.quorum(blockNumber);\n    \n    }\n\n    /// @notice Get votes for account on block(number of tokens).\n    /// @dev Get votes for account on block(number of tokens).\n    /// @param account Account.\n    /// @param blockNumber Block number for validate vote.\n    /// @return number_of_tokens  Number of tokens voted in blockNumber in format: (against,for,not interested).\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        override(IGovernorUpgradeable,GovernorUpgradeable)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    /// @notice Get status of proposal ID.\n    /// @dev Get status of proposal ID.\n    /// @param proposalId Proposal ID.\n    /// @return state Status of proposal.\n    function state(uint256 proposalId)\n        public\n        view\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\n        returns (ProposalState)\n    {\n        return super.state(proposalId);\n    }\n\n    /// @notice Add proposal.\n    /// @dev Add proposal.\n    /// @param targets addrees for execute.\n    /// @param values amount to transfer.\n    /// @param calldatas encoded function with arg to execute.\n    /// @param description Proposal Description.\n    /// @return proposalID Proposal ID.\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public \n    override(GovernorUpgradeable, IGovernorUpgradeable)\n    returns (uint256) \n    {\n        return super.propose(targets, values, calldatas, description);\n    }\n    \n    /// @notice Add proposal for Integration.\n    /// @dev Add proposal for Integration.\n    /// @param targets Addrees for execute.\n    /// @param values Amount to transfer.\n    /// @param calldatas encoded function with arg to execute.\n    /// @param description Proposal Description.\n    /// @param group Group for integration.\n    /// @param owner Accout sended this Proposal.\n    /// @param future_integration_timestamp Timestamp, when Integration will be.\n    /// @param integration_budget Budget in USD for integration.\n    /// @param hash_ipfs_proposal Proposal CID IPFS.\n    /// @param _typ_proposal Proposal type: 0 - Blog, 1 - Integration.\n    /// @return status True if Added, False if Not Added.\n    function proposeIntegration(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description,\n        bytes32 group,\n        address owner,\n        uint256 future_integration_timestamp,\n        uint256 integration_budget,\n        string memory hash_ipfs_proposal,\n        uint8 _typ_proposal\n    )\n    public\n    onlyMember \n    returns (bool) {\n        //uint256 proposalID = super.propose(targets, values, calldatas, description);\n        for(uint i=0;i<proposals.length; i++){\n            if( proposals[i].groups == group){\n                //uint256 last_block = this.proposalDeadline(proposals[i].proposalID);\n                if(this.proposalDeadline(proposals[i].proposalID) > block.number)\n                {\n                    emit ProposalAdd(false,0,\"For group exist another proposal with status active pr pending.\");\n                    return false;\n                }\n                ProposalState st = state(proposals[i].proposalID);\n                if(st == ProposalState.Succeeded || st == ProposalState.Queued)\n                {\n                    emit ProposalAdd(false,0,\"For group exist another proposal with status Succeeded or Queued.\");\n                    return false;\n                }\n            }\n\n        }\n        \n        uint256 proposalId = uint256(keccak256(abi.encode(targets, values, calldatas, keccak256(bytes(description)))));\n        //uint256 proposalID = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n\n        if(!proposalsMap[proposalId]){\n            //bool status = roles.groupCalculate(group,future_integration_timestamp,integration_budget);\n            if(roles.groupCalculate(group,future_integration_timestamp,integration_budget))\n            {\n                uint256 proposalID = super.propose(targets, values, calldatas, description);\n                proposals.push(Proposal(proposalID, hash_ipfs_proposal,_typ_proposal,owner,group));\n                proposalsMap[proposalID]=true;\n                proposalsIndexMap[proposalID] = numberOfProposals;\n                numberOfProposals++;\n                emit ProposalAdd(true,proposalID,\"Proposall added.\");\n                //emit ProposalAdd(true,proposalId,\"Proposall added.\");\n                return true;\n            }\n            else\n            {\n                emit ProposalAdd(false,0,\"Problem with budget.\");\n                return false;\n            }\n        }\n        else\n        {\n            emit ProposalAdd(false,proposalId,\"Proposall exist.\");\n            return false;\n        }\n    }\n\n    function proposalThreshold()\n        public\n        view\n        override(GovernorUpgradeable, GovernorSettingsUpgradeable)\n        returns (uint256)\n    {\n        return super.proposalThreshold();\n    }\n    \n    /// @notice Execute proposal.\n    /// @dev Execute proposal.\n    /// @param targets Addrees for execute.\n    /// @param values Amount to transfer.\n    /// @param calldatas Encoded function with arg to execute.\n    /// @param descriptionHash Proposal Description.\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal \n    override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\n    {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    /// @notice Cancel proposal.\n    /// @dev Cancel proposal.\n    /// @param targets Addrees for execute.\n    /// @param values Amount to transfer.\n    /// @param calldatas encoded Function with arg to execute.\n    /// @param descriptionHash Proposal Description.\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal \n    override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\n    returns (uint256) \n    {\n        return super._cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    function _executor()\n        internal\n        view\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\n        returns (address)\n    {\n        return super._executor();\n    }\n\n    /// @notice Vote for Proposal with Reason.\n    /// @dev Vote for Proposal with Reason.\n    /// @param proposalID Proposal ID.\n    /// @param support Vote: 0 - agains, 1 - for, 2 - Another. \n    /// @param reason Reason For Vote.\n    function castVoteWithReason(\n        uint256 proposalID, \n        uint8 support, \n        string calldata reason\n    )\n        public override(GovernorUpgradeable,IGovernorUpgradeable)\n        returns (uint256)\n    {\n\n        if(msg.sender == proposals[proposalsIndexMap[proposalID]].owner){\n            emit GCVote(false, \"Owner can't vote!\", msg.sender);\n            return 0;  \n        }\n\n        if(!roles.isRole(msg.sender, proposals[proposalsIndexMap[proposalID]].groups))\n        {\n            emit GCVote(false, \"User don'h have permissions to vote!\", msg.sender);  \n            return 0;\n        }\n\n        emit GCVote(true, \"User has permissions to vote!\", msg.sender);\n        return super.castVoteWithReason(proposalID,support,reason);\n    }\n\n    /// @notice Vote for Proposal with Reason.\n    /// @dev Vote for Proposal with Reason.\n    /// @param proposalID Proposal ID.\n    /// @param support Vote: 0 - agains, 1 - for, 2 - Another. \n    function castVote(\n        uint256 proposalID, \n        uint8 support\n    )\n        public override(GovernorUpgradeable,IGovernorUpgradeable)\n        returns (uint256)\n    {\n\n        if(msg.sender == proposals[proposalsIndexMap[proposalID]].owner){\n            emit GCVote(false, \"Owner can't vote!\", msg.sender);\n            return 0;  \n        }\n\n        if(!roles.isRole(msg.sender, proposals[proposalsIndexMap[proposalID]].groups))\n        {\n            emit GCVote(false, \"User don'h have permissions to vote!\", msg.sender);  \n            return 0;\n        }\n\n        emit GCVote(true, \"User has permissions to vote!\", msg.sender);\n        return super.castVote(proposalID,support);\n    }\n\n    /// @notice Update Quorum.\n    /// @dev Update Quorum.\n    /// @param newQuorumNumerator Quorum numberator\n    function updateQuorumNumerator(\n        uint256 newQuorumNumerator\n    )\n        \n        public\n        override(GovernorVotesQuorumFractionUpgradeable)\n    {\n        return super._updateQuorumNumerator(newQuorumNumerator);\n    }\n\n    /// @notice Update Voting Delay\n    /// @dev Update Voting Delay\n    /// @param _votingDelay Number of Block\n    function updateVotingDelay(\n        uint256 _votingDelay\n    )\n        public\n        onlyAdmin\n    {\n        s_votingDelay = _votingDelay;\n    }\n\n    /// @notice Update Voting Period\n    /// @dev Update Voting Period\n    /// @param _votingPeriod Number of Block\n    function updateVotingPeriod(\n        uint256 _votingPeriod\n    )\n        public\n        onlyAdmin\n    {\n        s_votingPeriod = _votingPeriod;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Update IPFS CID of Proposal.\n    /// @dev Update IPFS CID of Proposal.\n    /// @param proposalID Proposal ID.\n    /// @param _hash IPFS CID.\n    /// @return status True/False - status of update.\n    function updateSingleProposalHash(uint256 proposalID,string memory _hash)\n    public\n    onlyMember \n    returns (bool){\n        if(proposalsMap[proposalID]){\n            proposals[proposalsIndexMap[proposalID]].hash = _hash ;\n            emit ProposalUpdated(true,proposalID,\"Proposall updated.\");\n            return true;\n        }\n        else\n        {\n            emit ProposalUpdated(false,proposalID,\"Proposall not exist.\");\n            return false;\n        }\n    }\n\n\n    /// @notice Get Single Proposal Data.\n    /// @dev Get Single Proposal Data.\n    /// @param proposalID Proposal ID.\n    /// @return proposal [hash,type,owner,groups] Get Structure of single Proposal.\n    function getSingleProposal(uint256 proposalID)\n    public\n    view\n    returns (string memory,uint8,address,bytes32) {\n        require(proposalsMap[proposalID],\"Proposal not exist\");\n        return (proposals[proposalsIndexMap[proposalID]].hash,proposals[proposalsIndexMap[proposalID]].typ, proposals[proposalsIndexMap[proposalID]].owner,proposals[proposalsIndexMap[proposalID]].groups);\n    }\n\n    /// @notice Get Single Proposal Group for vote on this proposal.\n    /// @dev Get Single Proposal Group for vote on this proposal.\n    /// @param proposalID Proposal ID.\n    /// @return groups Groups for vote on this proposal.\n    function getSingleProposalGroup(uint256 proposalID)\n    public\n    view\n    returns (bytes32) {\n        require(proposalsMap[proposalID],\"Proposal not exist\");\n        return (proposals[proposalsIndexMap[proposalID]].groups) ;\n    }\n\n    /// @notice Get Single Proposal Owner.\n    /// @dev Get Single Proposal Owner.\n    /// @param proposalID Proposal ID.\n    /// @return groups Owner for this proposal.\n    function getSingleProposalOwner(uint256 proposalID)\n    public\n    view\n    returns (address) {\n        require(proposalsMap[proposalID],\"Proposal not exist\");\n        return (proposals[proposalsIndexMap[proposalID]].owner) ;\n    }\n\n    /// @notice Get All Proposals.\n    /// @dev Get All Proposals.\n    /// @return proposals List of proposals with elements[hash,type,owner,groups].\n    function getAllProposals()\n    public\n    view\n    returns (Proposal[] memory) {\n        return proposals;\n    }\n\n    /// @notice Get Proposal ID by CID.\n    /// @dev Get Single Proposal Owner.\n    /// @param ipfs_CID Proposal ID.\n    /// @return proposalID Proposal ID.\n    function getSingleProposalIdByCID(string memory ipfs_CID)\n    public\n    view\n    returns (uint256) {\n        for(uint256 i=0;i<proposals.length;i++)\n        {\n            if(keccak256(abi.encodePacked(proposals[i].hash)) ==  keccak256(abi.encodePacked(ipfs_CID))){\n                return proposals[i].proposalID;\n            }\n        }\n        revert(\"Proposal not exist for this IPFS CID.\");\n    }\n\n    /// @notice Get Proposal ID by CID.\n    /// @dev Get Single Proposal Owner.\n    /// @param proposalID Proposal ID.\n    /// @return index Proposal Index ID.\n    function getProposalIndex(uint256 proposalID)\n    public\n    view\n    returns (uint256) {\n        return proposalsIndexMap[proposalID];\n    }\n\n    /// @notice Get Proposals Array length;\n    /// @dev Proposals Array length;\n    /// @return length Proposal Length;\n    function getProposalsLength()\n    public\n    view\n    returns (uint256) {\n        return proposals.length;\n    }\n\n\n    /// @notice Cancel proposal.\n    /// @dev Cancel proposal.\n    /// @param targets Addrees for execute.\n    /// @param values Amount to transfer.\n    /// @param calldatas encoded Function with arg to execute.\n    /// @param descriptionHash Proposal Description.\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    )  \n    public\n    onlyAdmin\n    returns (uint256) \n    {\n        return super._cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    \n\n    \n\n    \n    \n}\n"
    },
    "GovernorUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/Governor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC721ReceiverUpgradeable.sol\";\nimport \"IERC1155ReceiverUpgradeable.sol\";\nimport \"ECDSAUpgradeable.sol\";\nimport \"draft-EIP712Upgradeable.sol\";\nimport \"ERC165Upgradeable.sol\";\nimport \"SafeCastUpgradeable.sol\";\nimport \"DoubleEndedQueueUpgradeable.sol\";\nimport \"AddressUpgradeable.sol\";\nimport \"ContextUpgradeable.sol\";\nimport \"TimersUpgradeable.sol\";\nimport \"IGovernorUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Core of the governance system, designed to be extended though various modules.\n *\n * This contract is abstract and requires several function to be implemented in various modules:\n *\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\n * - A voting module must implement {_getVotes}\n * - Additionanly, the {votingPeriod} must also be implemented\n *\n * _Available since v4.3._\n */\nabstract contract GovernorUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, EIP712Upgradeable, IGovernorUpgradeable, IERC721ReceiverUpgradeable, IERC1155ReceiverUpgradeable {\n    using DoubleEndedQueueUpgradeable for DoubleEndedQueueUpgradeable.Bytes32Deque;\n    using SafeCastUpgradeable for uint256;\n    using TimersUpgradeable for TimersUpgradeable.BlockNumber;\n\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH =\n        keccak256(\"ExtendedBallot(uint256 proposalId,uint8 support,string reason,bytes params)\");\n\n    struct ProposalCore {\n        TimersUpgradeable.BlockNumber voteStart;\n        TimersUpgradeable.BlockNumber voteEnd;\n        bool executed;\n        bool canceled;\n    }\n\n    string private _name;\n\n    mapping(uint256 => ProposalCore) private _proposals;\n\n    // This queue keeps track of the governor operating on itself. Calls to functions protected by the\n    // {onlyGovernance} modifier needs to be whitelisted in this queue. Whitelisting is set in {_beforeExecute},\n    // consumed by the {onlyGovernance} modifier and eventually reset in {_afterExecute}. This ensures that the\n    // execution of {onlyGovernance} protected calls can only be achieved through successful proposals.\n    DoubleEndedQueueUpgradeable.Bytes32Deque private _governanceCall;\n\n    /**\n     * @dev Restricts a function so it can only be executed through governance proposals. For example, governance\n     * parameter setters in {GovernorSettings} are protected using this modifier.\n     *\n     * The governance executing address may be different from the Governor's own address, for example it could be a\n     * timelock. This can be customized by modules by overriding {_executor}. The executor is only able to invoke these\n     * functions during the execution of the governor's {execute} function, and not under any other circumstances. Thus,\n     * for example, additional timelock proposers are not able to change governance parameters without going through the\n     * governance protocol (since v4.6).\n     */\n    modifier onlyGovernance() {\n        require(_msgSender() == _executor(), \"Governor: onlyGovernance\");\n        if (_executor() != address(this)) {\n            bytes32 msgDataHash = keccak256(_msgData());\n            // loop until popping the expected operation - throw if deque is empty (operation not authorized)\n            while (_governanceCall.popFront() != msgDataHash) {}\n        }\n        _;\n    }\n\n    /**\n     * @dev Sets the value for {name} and {version}\n     */\n    function __Governor_init(string memory name_) internal onlyInitializing {\n        __EIP712_init_unchained(name_, version());\n        __Governor_init_unchained(name_);\n    }\n\n    function __Governor_init_unchained(string memory name_) internal onlyInitializing {\n        _name = name_;\n    }\n\n    /**\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\n     */\n    receive() external payable virtual {\n        require(_executor() == address(this));\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\n        // In addition to the current interfaceId, also support previous version of the interfaceId that did not\n        // include the castVoteWithReasonAndParams() function as standard\n        return\n            interfaceId ==\n            (type(IGovernorUpgradeable).interfaceId ^\n                this.castVoteWithReasonAndParams.selector ^\n                this.castVoteWithReasonAndParamsBySig.selector ^\n                this.getVotesWithParams.selector) ||\n            interfaceId == type(IGovernorUpgradeable).interfaceId ||\n            interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IGovernor-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IGovernor-version}.\n     */\n    function version() public view virtual override returns (string memory) {\n        return \"1\";\n    }\n\n    /**\n     * @dev See {IGovernor-hashProposal}.\n     *\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\n     * advance, before the proposal is submitted.\n     *\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\n     * across multiple networks. This also means that in order to execute the same operation twice (on the same\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual override returns (uint256) {\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\n    }\n\n    /**\n     * @dev See {IGovernor-state}.\n     */\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalCore storage proposal = _proposals[proposalId];\n\n        if (proposal.executed) {\n            return ProposalState.Executed;\n        }\n\n        if (proposal.canceled) {\n            return ProposalState.Canceled;\n        }\n\n        uint256 snapshot = proposalSnapshot(proposalId);\n\n        if (snapshot == 0) {\n            revert(\"Governor: unknown proposal id\");\n        }\n\n        if (snapshot >= block.number) {\n            return ProposalState.Pending;\n        }\n\n        uint256 deadline = proposalDeadline(proposalId);\n\n        if (deadline >= block.number) {\n            return ProposalState.Active;\n        }\n\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\n            return ProposalState.Succeeded;\n        } else {\n            return ProposalState.Defeated;\n        }\n    }\n\n    /**\n     * @dev See {IGovernor-proposalSnapshot}.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteStart.getDeadline();\n    }\n\n    /**\n     * @dev See {IGovernor-proposalDeadline}.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteEnd.getDeadline();\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_.\n     */\n    function proposalThreshold() public view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Amount of votes already cast passes the threshold limit.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Is the proposal successful or not.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Get the voting weight of `account` at a specific `blockNumber`, for a vote as described by `params`.\n     */\n    function _getVotes(\n        address account,\n        uint256 blockNumber,\n        bytes memory params\n    ) internal view virtual returns (uint256);\n\n    /**\n     * @dev Register a vote with a given support and voting weight.\n     *\n     * Note: Support is generic and can represent various things depending on the voting system used.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight,\n        bytes memory params\n    ) internal virtual;\n\n    /**\n     * @dev Default additional encoded parameters used by castVote methods that don't include them\n     *\n     * Note: Should be overridden by specific implementations to use an appropriate value, the\n     * meaning of the additional params, in the context of that implementation\n     */\n    function _defaultParams() internal view virtual returns (bytes memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        require(\n            getVotes(_msgSender(), block.number - 1) >= proposalThreshold(),\n            \"Governor: proposer votes below proposal threshold\"\n        );\n\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n\n        require(targets.length == values.length, \"Governor: invalid proposal length\");\n        require(targets.length == calldatas.length, \"Governor: invalid proposal length\");\n        require(targets.length > 0, \"Governor: empty proposal\");\n\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(proposal.voteStart.isUnset(), \"Governor: proposal already exists\");\n\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\n        uint64 deadline = snapshot + votingPeriod().toUint64();\n\n        proposal.voteStart.setDeadline(snapshot);\n        proposal.voteEnd.setDeadline(deadline);\n\n        emit ProposalCreated(\n            proposalId,\n            _msgSender(),\n            targets,\n            values,\n            new string[](targets.length),\n            calldatas,\n            snapshot,\n            deadline,\n            description\n        );\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-execute}.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        ProposalState status = state(proposalId);\n        require(\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\n            \"Governor: proposal not successful\"\n        );\n        _proposals[proposalId].executed = true;\n\n        emit ProposalExecuted(proposalId);\n\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Internal execution mechanism. Can be overridden to implement different execution mechanism\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        string memory errorMessage = \"Governor: call reverted without message\";\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\n            AddressUpgradeable.verifyCallResult(success, returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Hook before execution is triggered.\n     */\n    function _beforeExecute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory, /* values */\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        if (_executor() != address(this)) {\n            for (uint256 i = 0; i < targets.length; ++i) {\n                if (targets[i] == address(this)) {\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook after execution is triggered.\n     */\n    function _afterExecute(\n        uint256, /* proposalId */\n        address[] memory, /* targets */\n        uint256[] memory, /* values */\n        bytes[] memory, /* calldatas */\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        if (_executor() != address(this)) {\n            if (!_governanceCall.empty()) {\n                _governanceCall.clear();\n            }\n        }\n    }\n\n    /**\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\n     * canceled to allow distinguishing it from executed proposals.\n     *\n     * Emits a {IGovernor-ProposalCanceled} event.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n        ProposalState status = state(proposalId);\n\n        require(\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\n            \"Governor: proposal not active\"\n        );\n        _proposals[proposalId].canceled = true;\n\n        emit ProposalCanceled(proposalId);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-getVotes}.\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        return _getVotes(account, blockNumber, _defaultParams());\n    }\n\n    /**\n     * @dev See {IGovernor-getVotesWithParams}.\n     */\n    function getVotesWithParams(\n        address account,\n        uint256 blockNumber,\n        bytes memory params\n    ) public view virtual override returns (uint256) {\n        return _getVotes(account, blockNumber, params);\n    }\n\n    /**\n     * @dev See {IGovernor-castVote}.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReason}.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReasonAndParams}.\n     */\n    function castVoteWithReasonAndParams(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason, params);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteBySig}.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSAUpgradeable.recover(\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\n            v,\n            r,\n            s\n        );\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReasonAndParamsBySig}.\n     */\n    function castVoteWithReasonAndParamsBySig(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSAUpgradeable.recover(\n            _hashTypedDataV4(\n                keccak256(\n                    abi.encode(\n                        EXTENDED_BALLOT_TYPEHASH,\n                        proposalId,\n                        support,\n                        keccak256(bytes(reason)),\n                        keccak256(params)\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        return _castVote(proposalId, voter, support, reason, params);\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function. Uses the _defaultParams().\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason\n    ) internal virtual returns (uint256) {\n        return _castVote(proposalId, account, support, reason, _defaultParams());\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason,\n        bytes memory params\n    ) internal virtual returns (uint256) {\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\n\n        uint256 weight = _getVotes(account, proposal.voteStart.getDeadline(), params);\n        _countVote(proposalId, account, support, weight, params);\n\n        if (params.length == 0) {\n            emit VoteCast(account, proposalId, support, weight, reason);\n        } else {\n            emit VoteCastWithParams(account, proposalId, support, weight, reason, params);\n        }\n\n        return weight;\n    }\n\n    /**\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\n     */\n    function relay(\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) external virtual onlyGovernance {\n        AddressUpgradeable.functionCallWithValue(target, data, value);\n    }\n\n    /**\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\n     * through another contract such as a timelock.\n     */\n    function _executor() internal view virtual returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"ECDSAUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165Upgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "DoubleEndedQueueUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\npragma solidity ^0.8.4;\n\nimport \"SafeCastUpgradeable.sol\";\n\n/**\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\n * the existing queue contents are left in storage.\n *\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\n * used in storage, and not in memory.\n * ```\n * DoubleEndedQueue.Bytes32Deque queue;\n * ```\n *\n * _Available since v4.6._\n */\nlibrary DoubleEndedQueueUpgradeable {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\n     * data[end - 1].\n     */\n    struct Bytes32Deque {\n        int128 _begin;\n        int128 _end;\n        mapping(int128 => bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     */\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\n        int128 backIndex = deque._end;\n        deque._data[backIndex] = value;\n        unchecked {\n            deque._end = backIndex + 1;\n        }\n    }\n\n    /**\n     * @dev Removes the item at the end of the queue and returns it.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 backIndex;\n        unchecked {\n            backIndex = deque._end - 1;\n        }\n        value = deque._data[backIndex];\n        delete deque._data[backIndex];\n        deque._end = backIndex;\n    }\n\n    /**\n     * @dev Inserts an item at the beginning of the queue.\n     */\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\n        int128 frontIndex;\n        unchecked {\n            frontIndex = deque._begin - 1;\n        }\n        deque._data[frontIndex] = value;\n        deque._begin = frontIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 frontIndex = deque._begin;\n        value = deque._data[frontIndex];\n        delete deque._data[frontIndex];\n        unchecked {\n            deque._begin = frontIndex + 1;\n        }\n    }\n\n    /**\n     * @dev Returns the item at the beginning of the queue.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 frontIndex = deque._begin;\n        return deque._data[frontIndex];\n    }\n\n    /**\n     * @dev Returns the item at the end of the queue.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 backIndex;\n        unchecked {\n            backIndex = deque._end - 1;\n        }\n        return deque._data[backIndex];\n    }\n\n    /**\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\n     * `length(deque) - 1`.\n     *\n     * Reverts with `OutOfBounds` if the index is out of bounds.\n     */\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\n        // int256(deque._begin) is a safe upcast\n        int128 idx = SafeCastUpgradeable.toInt128(int256(deque._begin) + SafeCastUpgradeable.toInt256(index));\n        if (idx >= deque._end) revert OutOfBounds();\n        return deque._data[idx];\n    }\n\n    /**\n     * @dev Resets the queue back to being empty.\n     *\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\n     * out on potential gas refunds.\n     */\n    function clear(Bytes32Deque storage deque) internal {\n        deque._begin = 0;\n        deque._end = 0;\n    }\n\n    /**\n     * @dev Returns the number of items in the queue.\n     */\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\n        // We also assume there are at most int256.max items in the queue.\n        unchecked {\n            return uint256(int256(deque._end) - int256(deque._begin));\n        }\n    }\n\n    /**\n     * @dev Returns true if the queue is empty.\n     */\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\n        return deque._end <= deque._begin;\n    }\n}\n"
    },
    "ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "TimersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Tooling for timepoints, timers and delays\n */\nlibrary TimersUpgradeable {\n    struct Timestamp {\n        uint64 _deadline;\n    }\n\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(Timestamp storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(Timestamp memory timer) internal view returns (bool) {\n        return timer._deadline > block.timestamp;\n    }\n\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.timestamp;\n    }\n\n    struct BlockNumber {\n        uint64 _deadline;\n    }\n\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(BlockNumber storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\n        return timer._deadline > block.number;\n    }\n\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.number;\n    }\n}\n"
    },
    "IGovernorUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/IGovernor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"ERC165Upgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Interface of the {Governor} core.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorUpgradeable is Initializable, IERC165Upgradeable {\n    function __IGovernor_init() internal onlyInitializing {\n    }\n\n    function __IGovernor_init_unchained() internal onlyInitializing {\n    }\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /**\n     * @dev Emitted when a proposal is created.\n     */\n    event ProposalCreated(\n        uint256 proposalId,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 startBlock,\n        uint256 endBlock,\n        string description\n    );\n\n    /**\n     * @dev Emitted when a proposal is canceled.\n     */\n    event ProposalCanceled(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a proposal is executed.\n     */\n    event ProposalExecuted(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a vote is cast without params.\n     *\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\n     */\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\n\n    /**\n     * @dev Emitted when a vote is cast with params.\n     *\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\n     * `params` are additional encoded parameters. Their intepepretation also depends on the voting module used.\n     */\n    event VoteCastWithParams(\n        address indexed voter,\n        uint256 proposalId,\n        uint8 support,\n        uint256 weight,\n        string reason,\n        bytes params\n    );\n\n    /**\n     * @notice module:core\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\n     */\n    function name() public view virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\"\n     */\n    function version() public view virtual returns (string memory);\n\n    /**\n     * @notice module:voting\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\n     *\n     * There are 2 standard keys: `support` and `quorum`.\n     *\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\n     *\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\n     * name that describes the behavior. For example:\n     *\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\n     *\n     * NOTE: The string can be decoded by the standard\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\n     * JavaScript class.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Current state of a proposal, following Compound's convention\n     */\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\n\n    /**\n     * @notice module:core\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\n     * beginning of the following block.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\n     * during this block.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\n     */\n    function votingDelay() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\n     *\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\n     * duration compared to the voting delay.\n     */\n    function votingPeriod() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Minimum number of cast voted required for a proposal to be successful.\n     *\n     * Note: The `blockNumber` parameter corresponds to the snapshot used for counting vote. This allows to scale the\n     * quorum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\n     */\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `blockNumber`.\n     *\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\n     * multiple), {ERC20Votes} tokens.\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `blockNumber` given additional encoded parameters.\n     */\n    function getVotesWithParams(\n        address account,\n        uint256 blockNumber,\n        bytes memory params\n    ) public view virtual returns (uint256);\n\n    /**\n     * @notice module:voting\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\n\n    /**\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\n     * {IGovernor-votingPeriod} blocks after the voting starts.\n     *\n     * Emits a {ProposalCreated} event.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\n     * deadline to be reached.\n     *\n     * Emits a {ProposalExecuted} event.\n     *\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Cast a vote\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason and additional encoded parameters\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReasonAndParams(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote using the user's cryptographic signature.\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReasonAndParamsBySig(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "GovernorSettingsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorSettings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"GovernorUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Extension of {Governor} for settings updatable through governance.\n *\n * _Available since v4.4._\n */\nabstract contract GovernorSettingsUpgradeable is Initializable, GovernorUpgradeable {\n    uint256 private _votingDelay;\n    uint256 private _votingPeriod;\n    uint256 private _proposalThreshold;\n\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\n\n    /**\n     * @dev Initialize the governance parameters.\n     */\n    function __GovernorSettings_init(\n        uint256 initialVotingDelay,\n        uint256 initialVotingPeriod,\n        uint256 initialProposalThreshold\n    ) internal onlyInitializing {\n        __GovernorSettings_init_unchained(initialVotingDelay, initialVotingPeriod, initialProposalThreshold);\n    }\n\n    function __GovernorSettings_init_unchained(\n        uint256 initialVotingDelay,\n        uint256 initialVotingPeriod,\n        uint256 initialProposalThreshold\n    ) internal onlyInitializing {\n        _setVotingDelay(initialVotingDelay);\n        _setVotingPeriod(initialVotingPeriod);\n        _setProposalThreshold(initialProposalThreshold);\n    }\n\n    /**\n     * @dev See {IGovernor-votingDelay}.\n     */\n    function votingDelay() public view virtual override returns (uint256) {\n        return _votingDelay;\n    }\n\n    /**\n     * @dev See {IGovernor-votingPeriod}.\n     */\n    function votingPeriod() public view virtual override returns (uint256) {\n        return _votingPeriod;\n    }\n\n    /**\n     * @dev See {Governor-proposalThreshold}.\n     */\n    function proposalThreshold() public view virtual override returns (uint256) {\n        return _proposalThreshold;\n    }\n\n    /**\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\n        _setVotingDelay(newVotingDelay);\n    }\n\n    /**\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\n        _setVotingPeriod(newVotingPeriod);\n    }\n\n    /**\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\n        _setProposalThreshold(newProposalThreshold);\n    }\n\n    /**\n     * @dev Internal setter for the voting delay.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\n        _votingDelay = newVotingDelay;\n    }\n\n    /**\n     * @dev Internal setter for the voting period.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\n        // voting period must be at least one block long\n        require(newVotingPeriod > 0, \"GovernorSettings: voting period too low\");\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\n        _votingPeriod = newVotingPeriod;\n    }\n\n    /**\n     * @dev Internal setter for the proposal threshold.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\n        _proposalThreshold = newProposalThreshold;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "GovernorCountingSimpleUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorCountingSimple.sol)\n\npragma solidity ^0.8.0;\n\nimport \"GovernorUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorCountingSimpleUpgradeable is Initializable, GovernorUpgradeable {\n    function __GovernorCountingSimple_init() internal onlyInitializing {\n    }\n\n    function __GovernorCountingSimple_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Supported vote types. Matches Governor Bravo ordering.\n     */\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    struct ProposalVote {\n        uint256 againstVotes;\n        uint256 forVotes;\n        uint256 abstainVotes;\n        mapping(address => bool) hasVoted;\n    }\n\n    mapping(uint256 => ProposalVote) private _proposalVotes;\n\n    /**\n     * @dev See {IGovernor-COUNTING_MODE}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo&quorum=for,abstain\";\n    }\n\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return _proposalVotes[proposalId].hasVoted[account];\n    }\n\n    /**\n     * @dev Accessor to the internal vote counts.\n     */\n    function proposalVotes(uint256 proposalId)\n        public\n        view\n        virtual\n        returns (\n            uint256 againstVotes,\n            uint256 forVotes,\n            uint256 abstainVotes\n        )\n    {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n        return (proposalvote.againstVotes, proposalvote.forVotes, proposalvote.abstainVotes);\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return quorum(proposalSnapshot(proposalId)) <= proposalvote.forVotes + proposalvote.abstainVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return proposalvote.forVotes > proposalvote.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight,\n        bytes memory // params\n    ) internal virtual override {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        require(!proposalvote.hasVoted[account], \"GovernorVotingSimple: vote already cast\");\n        proposalvote.hasVoted[account] = true;\n\n        if (support == uint8(VoteType.Against)) {\n            proposalvote.againstVotes += weight;\n        } else if (support == uint8(VoteType.For)) {\n            proposalvote.forVotes += weight;\n        } else if (support == uint8(VoteType.Abstain)) {\n            proposalvote.abstainVotes += weight;\n        } else {\n            revert(\"GovernorVotingSimple: invalid value for enum VoteType\");\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "GovernorVotesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorVotes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"GovernorUpgradeable.sol\";\nimport \"IVotesUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\n *\n * _Available since v4.3._\n *\n * @custom:storage-size 51\n */\nabstract contract GovernorVotesUpgradeable is Initializable, GovernorUpgradeable {\n    IVotesUpgradeable public token;\n\n    function __GovernorVotes_init(IVotesUpgradeable tokenAddress) internal onlyInitializing {\n        __GovernorVotes_init_unchained(tokenAddress);\n    }\n\n    function __GovernorVotes_init_unchained(IVotesUpgradeable tokenAddress) internal onlyInitializing {\n        token = tokenAddress;\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\n     */\n    function _getVotes(\n        address account,\n        uint256 blockNumber,\n        bytes memory /*params*/\n    ) internal view virtual override returns (uint256) {\n        return token.getPastVotes(account, blockNumber);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "IVotesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotesUpgradeable {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\n     */\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "GovernorVotesQuorumFractionUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\n\npragma solidity ^0.8.0;\n\nimport \"GovernorVotesUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\n * fraction of the total supply.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotesQuorumFractionUpgradeable is Initializable, GovernorVotesUpgradeable {\n    uint256 private _quorumNumerator;\n\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\n\n    /**\n     * @dev Initialize quorum as a fraction of the token's total supply.\n     *\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\n     * customized by overriding {quorumDenominator}.\n     */\n    function __GovernorVotesQuorumFraction_init(uint256 quorumNumeratorValue) internal onlyInitializing {\n        __GovernorVotesQuorumFraction_init_unchained(quorumNumeratorValue);\n    }\n\n    function __GovernorVotesQuorumFraction_init_unchained(uint256 quorumNumeratorValue) internal onlyInitializing {\n        _updateQuorumNumerator(quorumNumeratorValue);\n    }\n\n    /**\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\n     */\n    function quorumNumerator() public view virtual returns (uint256) {\n        return _quorumNumerator;\n    }\n\n    /**\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\n     */\n    function quorumDenominator() public view virtual returns (uint256) {\n        return 100;\n    }\n\n    /**\n     * @dev Returns the quorum for a block number, in terms of number of votes: `supply * numerator / denominator`.\n     */\n    function quorum(uint256 blockNumber) public view virtual override returns (uint256) {\n        return (token.getPastTotalSupply(blockNumber) * quorumNumerator()) / quorumDenominator();\n    }\n\n    /**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - Must be called through a governance proposal.\n     * - New numerator must be smaller or equal to the denominator.\n     */\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\n        _updateQuorumNumerator(newQuorumNumerator);\n    }\n\n    /**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - New numerator must be smaller or equal to the denominator.\n     */\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\n        require(\n            newQuorumNumerator <= quorumDenominator(),\n            \"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\"\n        );\n\n        uint256 oldQuorumNumerator = _quorumNumerator;\n        _quorumNumerator = newQuorumNumerator;\n\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "GovernorTimelockControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorTimelockControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IGovernorTimelockUpgradeable.sol\";\nimport \"GovernorUpgradeable.sol\";\nimport \"TimelockControllerUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\n * {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly.\n *\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\n * inaccessible.\n *\n * WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it\n * grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are\n * available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively\n * executing a Denial of Service attack. This risk will be mitigated in a future release.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorTimelockControlUpgradeable is Initializable, IGovernorTimelockUpgradeable, GovernorUpgradeable {\n    TimelockControllerUpgradeable private _timelock;\n    mapping(uint256 => bytes32) private _timelockIds;\n\n    /**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n    event TimelockChange(address oldTimelock, address newTimelock);\n\n    /**\n     * @dev Set the timelock.\n     */\n    function __GovernorTimelockControl_init(TimelockControllerUpgradeable timelockAddress) internal onlyInitializing {\n        __GovernorTimelockControl_init_unchained(timelockAddress);\n    }\n\n    function __GovernorTimelockControl_init_unchained(TimelockControllerUpgradeable timelockAddress) internal onlyInitializing {\n        _updateTimelock(timelockAddress);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, GovernorUpgradeable) returns (bool) {\n        return interfaceId == type(IGovernorTimelockUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-state} function with added support for the `Queued` status.\n     */\n    function state(uint256 proposalId) public view virtual override(IGovernorUpgradeable, GovernorUpgradeable) returns (ProposalState) {\n        ProposalState status = super.state(proposalId);\n\n        if (status != ProposalState.Succeeded) {\n            return status;\n        }\n\n        // core tracks execution, so we just have to check if successful proposal have been queued.\n        bytes32 queueid = _timelockIds[proposalId];\n        if (queueid == bytes32(0)) {\n            return status;\n        } else if (_timelock.isOperationDone(queueid)) {\n            return ProposalState.Executed;\n        } else if (_timelock.isOperationPending(queueid)) {\n            return ProposalState.Queued;\n        } else {\n            return ProposalState.Canceled;\n        }\n    }\n\n    /**\n     * @dev Public accessor to check the address of the timelock\n     */\n    function timelock() public view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public accessor to check the eta of a queued proposal\n     */\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\n    }\n\n    /**\n     * @dev Function to queue a proposal to the timelock.\n     */\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        require(state(proposalId) == ProposalState.Succeeded, \"Governor: proposal not successful\");\n\n        uint256 delay = _timelock.getMinDelay();\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\n\n        emit ProposalQueued(proposalId, block.timestamp + delay);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Overridden execute function that run the already queued proposal through the timelock.\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override {\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\n     * been queued.\n     */\n    // This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\n    // well behaved (according to TimelockController) and this will not happen.\n    // slither-disable-next-line reentrancy-no-eth\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        if (_timelockIds[proposalId] != 0) {\n            _timelock.cancel(_timelockIds[proposalId]);\n            delete _timelockIds[proposalId];\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n    function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled, and executed through governance proposals.\n     *\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\n     */\n    function updateTimelock(TimelockControllerUpgradeable newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }\n\n    function _updateTimelock(TimelockControllerUpgradeable newTimelock) private {\n        emit TimelockChange(address(_timelock), address(newTimelock));\n        _timelock = newTimelock;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "IGovernorTimelockUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IGovernorUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Extension of the {IGovernor} for timelock supporting modules.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorTimelockUpgradeable is Initializable, IGovernorUpgradeable {\n    function __IGovernorTimelock_init() internal onlyInitializing {\n    }\n\n    function __IGovernorTimelock_init_unchained() internal onlyInitializing {\n    }\n    event ProposalQueued(uint256 proposalId, uint256 eta);\n\n    function timelock() public view virtual returns (address);\n\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\n\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual returns (uint256 proposalId);\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "TimelockControllerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/TimelockController.sol)\n\npragma solidity ^0.8.0;\n\nimport \"AccessControlUpgradeable.sol\";\nimport \"IERC721ReceiverUpgradeable.sol\";\nimport \"IERC1155ReceiverUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockControllerUpgradeable is Initializable, AccessControlUpgradeable, IERC721ReceiverUpgradeable, IERC1155ReceiverUpgradeable {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    bytes32 public constant CANCELLER_ROLE = keccak256(\"CANCELLER_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with a given `minDelay`, and a list of\n     * initial proposers and executors. The proposers receive both the\n     * proposer and the canceller role (for backward compatibility). The\n     * executors receive the executor role.\n     *\n     * NOTE: At construction, both the deployer and the timelock itself are\n     * administrators. This helps further configuration of the timelock by the\n     * deployer. After configuration is done, it is recommended that the\n     * deployer renounces its admin position and relies on timelocked\n     * operations to perform future maintenance.\n     */\n    function __TimelockController_init(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) internal onlyInitializing {\n        __TimelockController_init_unchained(minDelay, proposers, executors);\n    }\n\n    function __TimelockController_init_unchained(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) internal onlyInitializing {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // deployer + self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // register proposers and cancellers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n            _setupRole(CANCELLER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, AccessControlUpgradeable) returns (bool) {\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to becomes valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'canceller' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _beforeCall(id, predecessor);\n        _call(id, 0, target, value, data);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _call(id, i, targets[i], values[i], payloads[i]);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     *\n     * Emits a {CallExecuted} event.\n     */\n    function _call(\n        bytes32 id,\n        uint256 index,\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) private {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n\n        emit CallExecuted(id, index, target, value, data);\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IAccessControlUpgradeable.sol\";\nimport \"ContextUpgradeable.sol\";\nimport \"StringsUpgradeable.sol\";\nimport \"ERC165Upgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "ERC20VotesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Votes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"draft-ERC20PermitUpgradeable.sol\";\nimport \"MathUpgradeable.sol\";\nimport \"IVotesUpgradeable.sol\";\nimport \"SafeCastUpgradeable.sol\";\nimport \"ECDSAUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20VotesUpgradeable is Initializable, IVotesUpgradeable, ERC20PermitUpgradeable {\n    function __ERC20Votes_init() internal onlyInitializing {\n    }\n\n    function __ERC20Votes_init_unchained() internal onlyInitializing {\n    }\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual override returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view virtual override returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is but NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 high = ckpts.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (ckpts[mid].fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return high == 0 ? 0 : ckpts[high - 1].votes;\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual override {\n        _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSAUpgradeable.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(\n        address src,\n        address dst,\n        uint256 amount\n    ) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\n        newWeight = op(oldWeight, delta);\n\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\n            ckpts[pos - 1].votes = SafeCastUpgradeable.toUint224(newWeight);\n        } else {\n            ckpts.push(Checkpoint({fromBlock: SafeCastUpgradeable.toUint32(block.number), votes: SafeCastUpgradeable.toUint224(newWeight)}));\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"draft-IERC20PermitUpgradeable.sol\";\nimport \"ERC20Upgradeable.sol\";\nimport \"draft-EIP712Upgradeable.sol\";\nimport \"ECDSAUpgradeable.sol\";\nimport \"CountersUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20Upgradeable.sol\";\nimport \"IERC20MetadataUpgradeable.sol\";\nimport \"ContextUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "GovernorContractProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\n\nimport \"GovernorUpgradeable.sol\";\nimport \"GovernorSettingsUpgradeable.sol\";\nimport \"GovernorCountingSimpleUpgradeable.sol\";\nimport \"GovernorVotesUpgradeable.sol\";\nimport \"GovernorVotesQuorumFractionUpgradeable.sol\";\nimport \"GovernorTimelockControlUpgradeable.sol\";\nimport \"ERC20VotesUpgradeable.sol\";\nimport \"Initializable.sol\";\n\nimport \"GovernorContract.sol\";\n/// @title GovernorContract\n/// @notice GovernorContract implementation from openzeppelin\n/// @dev GovernorContract implementation from openzeppelin\ncontract GovernorContractProposal \n{\n\n    /// @notice Structure of single proposal.\n    /// @dev Structure of single proposal.\n    /// @param proposalID Proposal ID.\n    /// @param hash IPFS CID of Proposal.\n    /// @param typ Proposal Type: 0 - blog, 1 - integration.\n    /// @param owner Accout sended Proposal.\n    /// @param groups group for Vote on proposal.\n    struct Proposal {\n        uint256 proposalID;\n        string hash;\n        uint8 typ;\n        address owner;\n        bytes32 groups;\n    }\n\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "IntegrationApprove.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}