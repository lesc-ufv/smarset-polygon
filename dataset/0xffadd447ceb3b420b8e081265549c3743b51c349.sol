{{
  "language": "Solidity",
  "sources": {
    "contracts/RangedMarkets/RangedPositionMastercopy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"./RangedPosition.sol\";\n\ncontract RangedPositionMastercopy is RangedPosition {\n    constructor() {\n        // Freeze mastercopy on deployment so it can never be initialized with real arguments\n        initialized = true;\n    }\n}\n"
    },
    "contracts/RangedMarkets/RangedPosition.sol": {
      "content": "// in position collaterized by 0.5 UP on the left leg and 0.5 DOWN on the right leg\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"@openzeppelin/contracts-4.4.1/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IPosition.sol\";\n\n// Internal references\nimport \"./RangedMarket.sol\";\n\ncontract RangedPosition is IERC20 {\n    /* ========== STATE VARIABLES ========== */\n\n    string public name;\n    string public symbol;\n    uint8 public constant decimals = 18;\n\n    RangedMarket public rangedMarket;\n\n    mapping(address => uint) public override balanceOf;\n    uint public override totalSupply;\n\n    // The argument order is allowance[owner][spender]\n    mapping(address => mapping(address => uint)) private allowances;\n\n    // Enforce a 1 cent minimum amount\n    uint internal constant _MINIMUM_AMOUNT = 1e16;\n\n    address public thalesRangedAMM;\n    /* ========== CONSTRUCTOR ========== */\n\n    bool public initialized = false;\n\n    function initialize(\n        address market,\n        string calldata _name,\n        string calldata _symbol,\n        address _thalesRangedAMM\n    ) external {\n        require(!initialized, \"Ranged Market already initialized\");\n        initialized = true;\n        rangedMarket = RangedMarket(market);\n        name = _name;\n        symbol = _symbol;\n        thalesRangedAMM = _thalesRangedAMM;\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        if (spender == thalesRangedAMM) {\n            return type(uint256).max;\n        } else {\n            return allowances[owner][spender];\n        }\n    }\n\n    function burn(address claimant, uint amount) external onlyRangedMarket {\n        balanceOf[claimant] = balanceOf[claimant] - amount;\n        totalSupply = totalSupply - amount;\n        emit Burned(claimant, amount);\n        emit Transfer(claimant, address(0), amount);\n    }\n\n    function mint(address minter, uint amount) external onlyRangedMarket {\n        _requireMinimumAmount(amount);\n        totalSupply = totalSupply + amount;\n        balanceOf[minter] = balanceOf[minter] + amount; // Increment rather than assigning since a transfer may have occurred.\n        emit Mint(minter, amount);\n        emit Transfer(address(0), minter, amount);\n    }\n\n    /* ---------- ERC20 Functions ---------- */\n\n    function _transfer(\n        address _from,\n        address _to,\n        uint _value\n    ) internal returns (bool success) {\n        require(_to != address(0) && _to != address(this), \"Invalid address\");\n\n        uint fromBalance = balanceOf[_from];\n        require(_value <= fromBalance, \"Insufficient balance\");\n\n        balanceOf[_from] = fromBalance - _value;\n        balanceOf[_to] = balanceOf[_to] + _value;\n\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint _value) external override returns (bool success) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint _value\n    ) external override returns (bool success) {\n        if (msg.sender != thalesRangedAMM) {\n            uint fromAllowance = allowances[_from][msg.sender];\n            require(_value <= fromAllowance, \"Insufficient allowance\");\n            allowances[_from][msg.sender] = fromAllowance - _value;\n        }\n        return _transfer(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint _value) external override returns (bool success) {\n        require(_spender != address(0));\n        allowances[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function getBalanceOf(address account) external view returns (uint) {\n        return balanceOf[account];\n    }\n\n    function getTotalSupply() external view returns (uint) {\n        return totalSupply;\n    }\n\n    modifier onlyRangedMarket {\n        require(msg.sender == address(rangedMarket), \"only the Ranged Market may perform these methods\");\n        _;\n    }\n\n    function _requireMinimumAmount(uint amount) internal pure returns (uint) {\n        require(amount >= _MINIMUM_AMOUNT || amount == 0, \"Balance < $0.01\");\n        return amount;\n    }\n\n    event Mint(address minter, uint amount);\n    event Burned(address burner, uint amount);\n}\n"
    },
    "@openzeppelin/contracts-4.4.1/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IPosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.16;\n\nimport \"./IPositionalMarket.sol\";\n\ninterface IPosition {\n    /* ========== VIEWS / VARIABLES ========== */\n\n    function getBalanceOf(address account) external view returns (uint);\n\n    function getTotalSupply() external view returns (uint);\n}\n"
    },
    "contracts/RangedMarkets/RangedMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-4.4.1/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-4.4.1/token/ERC20/utils/SafeERC20.sol\";\n\n// Internal references\nimport \"./RangedPosition.sol\";\nimport \"./RangedMarketsAMM.sol\";\nimport \"../interfaces/IPositionalMarket.sol\";\nimport \"../interfaces/IPositionalMarketManager.sol\";\n\ncontract RangedMarket {\n    using SafeERC20 for IERC20;\n\n    enum Position {In, Out}\n\n    IPositionalMarket public leftMarket;\n    IPositionalMarket public rightMarket;\n\n    struct Positions {\n        RangedPosition inp;\n        RangedPosition outp;\n    }\n\n    Positions public positions;\n\n    RangedMarketsAMM public rangedMarketsAMM;\n\n    bool public resolved = false;\n\n    uint finalPrice;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    bool public initialized = false;\n\n    function initialize(\n        address _leftMarket,\n        address _rightMarket,\n        address _in,\n        address _out,\n        address _rangedMarketsAMM\n    ) external {\n        require(!initialized, \"Ranged Market already initialized\");\n        initialized = true;\n        leftMarket = IPositionalMarket(_leftMarket);\n        rightMarket = IPositionalMarket(_rightMarket);\n        positions.inp = RangedPosition(_in);\n        positions.outp = RangedPosition(_out);\n        rangedMarketsAMM = RangedMarketsAMM(_rangedMarketsAMM);\n    }\n\n    function mint(\n        uint value,\n        Position _position,\n        address minter\n    ) external onlyAMM {\n        if (value == 0) {\n            return;\n        }\n        _mint(minter, value, _position);\n    }\n\n    function _mint(\n        address minter,\n        uint amount,\n        Position _position\n    ) internal {\n        if (_position == Position.In) {\n            positions.inp.mint(minter, amount);\n        } else {\n            positions.outp.mint(minter, amount);\n        }\n        emit Mint(minter, amount, _position);\n    }\n\n    function burnIn(uint value, address claimant) external onlyAMM {\n        if (value == 0) {\n            return;\n        }\n        (IPosition up, ) = IPositionalMarket(leftMarket).getOptions();\n        IERC20(address(up)).safeTransfer(msg.sender, value / 2);\n\n        (, IPosition down1) = IPositionalMarket(rightMarket).getOptions();\n        IERC20(address(down1)).safeTransfer(msg.sender, value / 2);\n\n        positions.inp.burn(claimant, value);\n        emit Burn(claimant, value, Position.In);\n    }\n\n    function burnOut(uint value, address claimant) external onlyAMM {\n        if (value == 0) {\n            return;\n        }\n        (, IPosition down) = IPositionalMarket(leftMarket).getOptions();\n        IERC20(address(down)).safeTransfer(msg.sender, value);\n\n        (IPosition up1, ) = IPositionalMarket(rightMarket).getOptions();\n        IERC20(address(up1)).safeTransfer(msg.sender, value);\n\n        positions.outp.burn(claimant, value);\n\n        emit Burn(claimant, value, Position.Out);\n    }\n\n    function canExercisePositions() external view returns (bool) {\n        if (!leftMarket.resolved() && !leftMarket.canResolve()) {\n            return false;\n        }\n        if (!rightMarket.resolved() && !rightMarket.canResolve()) {\n            return false;\n        }\n\n        uint inBalance = positions.inp.balanceOf(msg.sender);\n        uint outBalance = positions.outp.balanceOf(msg.sender);\n\n        if (inBalance == 0 && outBalance == 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function exercisePositions() external {\n        if (leftMarket.canResolve()) {\n            IPositionalMarketManager(rangedMarketsAMM.thalesAmm().manager()).resolveMarket(address(leftMarket));\n        }\n        if (rightMarket.canResolve()) {\n            IPositionalMarketManager(rangedMarketsAMM.thalesAmm().manager()).resolveMarket(address(rightMarket));\n        }\n        require(leftMarket.resolved() && rightMarket.resolved(), \"Left or Right market not resolved yet!\");\n\n        uint inBalance = positions.inp.balanceOf(msg.sender);\n        uint outBalance = positions.outp.balanceOf(msg.sender);\n\n        require(inBalance != 0 || outBalance != 0, \"Nothing to exercise\");\n\n        if (!resolved) {\n            resolveMarket();\n        }\n\n        // Each option only needs to be exercised if the account holds any of it.\n        if (inBalance != 0) {\n            positions.inp.burn(msg.sender, inBalance);\n        }\n        if (outBalance != 0) {\n            positions.outp.burn(msg.sender, outBalance);\n        }\n\n        Position curResult = Position.Out;\n        if ((leftMarket.result() == IPositionalMarket.Side.Up) && (rightMarket.result() == IPositionalMarket.Side.Down)) {\n            curResult = Position.In;\n        }\n\n        // Only pay out the side that won.\n        uint payout = (curResult == Position.In) ? inBalance : outBalance;\n        if (payout != 0) {\n            rangedMarketsAMM.transferSusdTo(\n                msg.sender,\n                IPositionalMarketManager(rangedMarketsAMM.thalesAmm().manager()).transformCollateral(payout)\n            );\n        }\n        emit Exercised(msg.sender, payout, curResult);\n    }\n\n    function canResolve() external view returns (bool) {\n        // The markets must be resolved\n        if (!leftMarket.resolved() && !leftMarket.canResolve()) {\n            return false;\n        }\n        if (!rightMarket.resolved() && !rightMarket.canResolve()) {\n            return false;\n        }\n\n        return !resolved;\n    }\n\n    function resolveMarket() public {\n        // The markets must be resolved\n        if (leftMarket.canResolve()) {\n            IPositionalMarketManager(rangedMarketsAMM.thalesAmm().manager()).resolveMarket(address(leftMarket));\n        }\n        if (rightMarket.canResolve()) {\n            IPositionalMarketManager(rangedMarketsAMM.thalesAmm().manager()).resolveMarket(address(rightMarket));\n        }\n        require(leftMarket.resolved() && rightMarket.resolved(), \"Left or Right market not resolved yet!\");\n        require(!resolved, \"Already resolved!\");\n\n        if (positions.inp.totalSupply() > 0 || positions.outp.totalSupply() > 0) {\n            leftMarket.exerciseOptions();\n            rightMarket.exerciseOptions();\n        }\n        resolved = true;\n\n        if (rangedMarketsAMM.sUSD().balanceOf(address(this)) > 0) {\n            rangedMarketsAMM.sUSD().transfer(address(rangedMarketsAMM), rangedMarketsAMM.sUSD().balanceOf(address(this)));\n        }\n\n        (, , uint _finalPrice) = leftMarket.getOracleDetails();\n        finalPrice = _finalPrice;\n        emit Resolved(result(), finalPrice);\n    }\n\n    function result() public view returns (Position resultToReturn) {\n        resultToReturn = Position.Out;\n        if ((leftMarket.result() == IPositionalMarket.Side.Up) && (rightMarket.result() == IPositionalMarket.Side.Down)) {\n            resultToReturn = Position.In;\n        }\n    }\n\n    function withdrawCollateral(address recipient) external onlyAMM {\n        rangedMarketsAMM.sUSD().transfer(recipient, rangedMarketsAMM.sUSD().balanceOf(address(this)));\n    }\n\n    modifier onlyAMM {\n        require(msg.sender == address(rangedMarketsAMM), \"only the AMM may perform these methods\");\n        _;\n    }\n\n    event Mint(address minter, uint amount, Position _position);\n    event Burn(address burner, uint amount, Position _position);\n    event Exercised(address exerciser, uint amount, Position _position);\n    event Resolved(Position winningPosition, uint finalPrice);\n}\n"
    },
    "contracts/interfaces/IPositionalMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.16;\n\nimport \"../interfaces/IPositionalMarketManager.sol\";\nimport \"../interfaces/IPosition.sol\";\nimport \"../interfaces/IPriceFeed.sol\";\n\ninterface IPositionalMarket {\n    /* ========== TYPES ========== */\n\n    enum Phase {Trading, Maturity, Expiry}\n    enum Side {Up, Down}\n\n    /* ========== VIEWS / VARIABLES ========== */\n\n    function getOptions() external view returns (IPosition up, IPosition down);\n\n    function times() external view returns (uint maturity, uint destructino);\n\n    function getOracleDetails()\n        external\n        view\n        returns (\n            bytes32 key,\n            uint strikePrice,\n            uint finalPrice\n        );\n\n    function fees() external view returns (uint poolFee, uint creatorFee);\n\n    function deposited() external view returns (uint);\n\n    function creator() external view returns (address);\n\n    function resolved() external view returns (bool);\n\n    function phase() external view returns (Phase);\n\n    function oraclePrice() external view returns (uint);\n\n    function oraclePriceAndTimestamp() external view returns (uint price, uint updatedAt);\n\n    function canResolve() external view returns (bool);\n\n    function result() external view returns (Side);\n\n    function balancesOf(address account) external view returns (uint up, uint down);\n\n    function totalSupplies() external view returns (uint up, uint down);\n\n    function getMaximumBurnable(address account) external view returns (uint amount);\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function mint(uint value) external;\n\n    function exerciseOptions() external returns (uint);\n\n    function burnOptions(uint amount) external;\n\n    function burnOptionsMaximum() external;\n}\n"
    },
    "contracts/interfaces/IPositionalMarketManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.16;\n\nimport \"../interfaces/IPositionalMarket.sol\";\n\ninterface IPositionalMarketManager {\n    /* ========== VIEWS / VARIABLES ========== */\n\n    function durations() external view returns (uint expiryDuration, uint maxTimeToMaturity);\n\n    function capitalRequirement() external view returns (uint);\n\n    function marketCreationEnabled() external view returns (bool);\n\n    function transformCollateral(uint value) external view returns (uint);\n\n    function reverseTransformCollateral(uint value) external view returns (uint);\n\n    function totalDeposited() external view returns (uint);\n\n    function numActiveMarkets() external view returns (uint);\n\n    function activeMarkets(uint index, uint pageSize) external view returns (address[] memory);\n\n    function numMaturedMarkets() external view returns (uint);\n\n    function maturedMarkets(uint index, uint pageSize) external view returns (address[] memory);\n\n    function isActiveMarket(address candidate) external view returns (bool);\n\n    function isKnownMarket(address candidate) external view returns (bool);\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function createMarket(\n        bytes32 oracleKey,\n        uint strikePrice,\n        uint maturity,\n        uint initialMint // initial sUSD to mint options for,\n    ) external returns (IPositionalMarket);\n\n    function resolveMarket(address market) external;\n\n    function expireMarkets(address[] calldata market) external;\n\n    function transferSusdTo(\n        address sender,\n        address receiver,\n        uint amount\n    ) external;\n}\n"
    },
    "contracts/interfaces/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.16;\n\ninterface IPriceFeed {\n    // Structs\n    struct RateAndUpdatedTime {\n        uint216 rate;\n        uint40 time;\n    }\n\n    // Mutative functions\n    function addAggregator(bytes32 currencyKey, address aggregatorAddress) external;\n\n    function removeAggregator(bytes32 currencyKey) external;\n\n    // Views\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\n\n    function getRates() external view returns (uint[] memory);\n\n    function getCurrencies() external view returns (bytes32[] memory);\n}\n"
    },
    "@openzeppelin/contracts-4.4.1/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/RangedMarkets/RangedMarketsAMM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// external\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-4.4.1/proxy/Clones.sol\";\n\n// interfaces\nimport \"../interfaces/IPriceFeed.sol\";\nimport \"../interfaces/IThalesAMM.sol\";\n\n// internal\nimport \"../utils/proxy/solidity-0.8.0/ProxyReentrancyGuard.sol\";\nimport \"../utils/proxy/solidity-0.8.0/ProxyOwned.sol\";\nimport \"../utils/proxy/solidity-0.8.0/ProxyPausable.sol\";\nimport \"../utils/libraries/AddressSetLib.sol\";\n\nimport \"./RangedPosition.sol\";\nimport \"./RangedPosition.sol\";\nimport \"./RangedMarket.sol\";\nimport \"../interfaces/IPositionalMarket.sol\";\nimport \"../interfaces/IStakingThales.sol\";\nimport \"../interfaces/IReferrals.sol\";\nimport \"../interfaces/ICurveSUSD.sol\";\n\ncontract RangedMarketsAMM is Initializable, ProxyOwned, ProxyPausable, ProxyReentrancyGuard {\n    using AddressSetLib for AddressSetLib.AddressSet;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint private constant ONE = 1e18;\n    uint private constant ONE_PERCENT = 1e16;\n\n    IThalesAMM public thalesAmm;\n\n    uint public rangedAmmFee;\n\n    mapping(address => mapping(address => address)) public createdRangedMarkets;\n    AddressSetLib.AddressSet internal _knownMarkets;\n\n    address public rangedMarketMastercopy;\n    address public rangedPositionMastercopy;\n\n    IERC20Upgradeable public sUSD;\n\n    mapping(address => uint) public spentOnMarket;\n\n    // IMPORTANT: AMM risks only half or the payout effectively, but it risks the whole amount on price movements\n    uint public capPerMarket;\n\n    uint public minSupportedPrice;\n    uint public maxSupportedPrice;\n\n    address public safeBox;\n    uint public safeBoxImpact;\n\n    uint public minimalDifBetweenStrikes;\n\n    IStakingThales public stakingThales;\n\n    uint public maximalDifBetweenStrikes;\n\n    address public referrals;\n    uint public referrerFee;\n\n    ICurveSUSD public curveSUSD;\n\n    address public usdc;\n    address public usdt;\n    address public dai;\n\n    bool public curveOnrampEnabled;\n\n    function initialize(\n        address _owner,\n        IThalesAMM _thalesAmm,\n        uint _rangedAmmFee,\n        uint _capPerMarket,\n        IERC20Upgradeable _sUSD,\n        address _safeBox,\n        uint _safeBoxImpact\n    ) public initializer {\n        setOwner(_owner);\n        initNonReentrant();\n        thalesAmm = _thalesAmm;\n        capPerMarket = _capPerMarket;\n        rangedAmmFee = _rangedAmmFee;\n        sUSD = _sUSD;\n        safeBox = _safeBox;\n        safeBoxImpact = _safeBoxImpact;\n\n        sUSD.approve(address(thalesAmm), type(uint256).max);\n    }\n\n    function createRangedMarket(address leftMarket, address rightMarket) external nonReentrant notPaused {\n        require(canCreateRangedMarket(leftMarket, rightMarket), \"Can't create such a ranged market!\");\n\n        RangedMarket rm = RangedMarket(Clones.clone(rangedMarketMastercopy));\n        createdRangedMarkets[leftMarket][rightMarket] = address(rm);\n\n        RangedPosition inp = RangedPosition(Clones.clone(rangedPositionMastercopy));\n        inp.initialize(address(rm), \"Position IN\", \"IN\", address(this));\n\n        RangedPosition outp = RangedPosition(Clones.clone(rangedPositionMastercopy));\n        outp.initialize(address(rm), \"Position OUT\", \"OUT\", address(this));\n\n        rm.initialize(leftMarket, rightMarket, address(inp), address(outp), address(this));\n\n        _knownMarkets.add(address(rm));\n\n        emit RangedMarketCreated(address(rm), leftMarket, rightMarket);\n    }\n\n    function canCreateRangedMarket(address leftMarket, address rightMarket) public view returns (bool) {\n        if (!thalesAmm.isMarketInAMMTrading(leftMarket) || !thalesAmm.isMarketInAMMTrading(rightMarket)) {\n            return false;\n        }\n        (uint maturityLeft, ) = IPositionalMarket(leftMarket).times();\n        (uint maturityRight, ) = IPositionalMarket(rightMarket).times();\n        if (maturityLeft != maturityRight) {\n            return false;\n        }\n\n        (bytes32 leftkey, uint leftstrikePrice, ) = IPositionalMarket(leftMarket).getOracleDetails();\n        (bytes32 rightkey, uint rightstrikePrice, ) = IPositionalMarket(rightMarket).getOracleDetails();\n        if (leftkey != rightkey) {\n            return false;\n        }\n        if (leftstrikePrice >= rightstrikePrice) {\n            return false;\n        }\n\n        if (!(((ONE + minimalDifBetweenStrikes * ONE_PERCENT) * leftstrikePrice) / ONE < rightstrikePrice)) {\n            return false;\n        }\n\n        if (!(((ONE + maximalDifBetweenStrikes * ONE_PERCENT) * leftstrikePrice) / ONE > rightstrikePrice)) {\n            return false;\n        }\n\n        return createdRangedMarkets[leftMarket][rightMarket] == address(0);\n    }\n\n    function availableToBuyFromAMM(RangedMarket rangedMarket, RangedMarket.Position position)\n        public\n        view\n        knownRangedMarket(address(rangedMarket))\n        returns (uint)\n    {\n        uint availableLeft =\n            thalesAmm.availableToBuyFromAMM(\n                address(rangedMarket.leftMarket()),\n                position == RangedMarket.Position.Out ? IThalesAMM.Position.Down : IThalesAMM.Position.Up\n            );\n        uint availableRight =\n            thalesAmm.availableToBuyFromAMM(\n                address(rangedMarket.rightMarket()),\n                position == RangedMarket.Position.Out ? IThalesAMM.Position.Up : IThalesAMM.Position.Down\n            );\n        if (position == RangedMarket.Position.Out) {\n            return availableLeft < availableRight ? availableLeft : availableRight;\n        } else {\n            uint availableThalesAMM = (availableLeft < availableRight ? availableLeft : availableRight) * 2;\n            uint availableRangedAmm = _availableToBuyFromAMMOnlyRangedIN(rangedMarket);\n            return availableThalesAMM > availableRangedAmm ? availableRangedAmm : availableThalesAMM;\n        }\n    }\n\n    function _availableToBuyFromAMMOnlyRangedIN(RangedMarket rangedMarket)\n        internal\n        view\n        knownRangedMarket(address(rangedMarket))\n        returns (uint availableRangedAmm)\n    {\n        uint minPrice = IPositionalMarketManager(thalesAmm.manager()).reverseTransformCollateral(minInPrice(rangedMarket));\n        if (minPrice <= minSupportedPrice || minPrice >= maxSupportedPrice) {\n            return 0;\n        }\n        uint rangedAMMRisk = ONE - minPrice;\n        availableRangedAmm = ((capPerMarket - spentOnMarket[address(rangedMarket)]) * ONE) / rangedAMMRisk;\n    }\n\n    function minInPrice(RangedMarket rangedMarket)\n        public\n        view\n        knownRangedMarket(address(rangedMarket))\n        returns (uint quotedPrice)\n    {\n        uint leftQuote = thalesAmm.buyFromAmmQuote(address(rangedMarket.leftMarket()), IThalesAMM.Position.Up, ONE);\n        uint rightQuote = thalesAmm.buyFromAmmQuote(address(rangedMarket.rightMarket()), IThalesAMM.Position.Down, ONE);\n        quotedPrice = ((leftQuote + rightQuote) - ((ONE - leftQuote) + (ONE - rightQuote))) / 2;\n    }\n\n    function buyFromAmmQuote(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount\n    ) public view knownRangedMarket(address(rangedMarket)) returns (uint sUSDPaid) {\n        (sUSDPaid, , ) = buyFromAmmQuoteDetailed(rangedMarket, position, amount);\n        uint basePrice = (sUSDPaid * ONE) / amount;\n        if (basePrice < minSupportedPrice || basePrice >= ONE) {\n            sUSDPaid = 0;\n        }\n    }\n\n    function buyFromAmmQuoteDetailed(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount\n    )\n        public\n        view\n        knownRangedMarket(address(rangedMarket))\n        returns (\n            uint quoteWithFees,\n            uint leftQuote,\n            uint rightQuote\n        )\n    {\n        amount = position == RangedMarket.Position.Out ? amount : amount / 2;\n        leftQuote = thalesAmm.buyFromAmmQuote(\n            address(rangedMarket.leftMarket()),\n            position == RangedMarket.Position.Out ? IThalesAMM.Position.Down : IThalesAMM.Position.Up,\n            amount\n        );\n        rightQuote = thalesAmm.buyFromAmmQuote(\n            address(rangedMarket.rightMarket()),\n            position == RangedMarket.Position.Out ? IThalesAMM.Position.Up : IThalesAMM.Position.Down,\n            amount\n        );\n        uint summedQuotes = leftQuote + rightQuote;\n        if (position == RangedMarket.Position.Out) {\n            quoteWithFees = (summedQuotes * (rangedAmmFee + ONE)) / ONE;\n        } else {\n            uint quoteWithoutFees = ((summedQuotes) - ((amount - leftQuote) + (amount - rightQuote)));\n            quoteWithFees = (quoteWithoutFees * (rangedAmmFee + safeBoxImpact + ONE)) / ONE;\n        }\n    }\n\n    function buyFromAmmQuoteWithDifferentCollateral(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount,\n        address collateral\n    ) public view returns (uint collateralQuote, uint sUSDToPay) {\n        int128 curveIndex = _mapCollateralToCurveIndex(collateral);\n        if (curveIndex == 0 || !curveOnrampEnabled) {\n            return (0, 0);\n        }\n\n        sUSDToPay = buyFromAmmQuote(rangedMarket, position, amount);\n        //cant get a quote on how much collateral is needed from curve for sUSD,\n        //so rather get how much of collateral you get for the sUSD quote and add 0.2% to that\n        collateralQuote = (curveSUSD.get_dy_underlying(0, curveIndex, sUSDToPay) * (ONE + (ONE_PERCENT / 5))) / ONE;\n    }\n\n    function buyFromAMMWithReferrer(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount,\n        uint expectedPayout,\n        uint additionalSlippage,\n        address referrer\n    ) public knownRangedMarket(address(rangedMarket)) nonReentrant notPaused {\n        if (referrer != address(0)) {\n            IReferrals(referrals).setReferrer(referrer, msg.sender);\n        }\n        _buyFromAMM(rangedMarket, position, amount, expectedPayout, additionalSlippage, true);\n    }\n\n    function buyFromAMMWithDifferentCollateralAndReferrer(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount,\n        uint expectedPayout,\n        uint additionalSlippage,\n        address collateral,\n        address _referrer\n    ) public nonReentrant notPaused {\n        if (_referrer != address(0)) {\n            IReferrals(referrals).setReferrer(_referrer, msg.sender);\n        }\n\n        int128 curveIndex = _mapCollateralToCurveIndex(collateral);\n        require(curveIndex > 0 && curveOnrampEnabled, \"unsupported collateral\");\n\n        (uint collateralQuote, uint susdQuote) =\n            buyFromAmmQuoteWithDifferentCollateral(rangedMarket, position, amount, collateral);\n\n        require((collateralQuote * ONE) / expectedPayout <= (ONE + additionalSlippage), \"Slippage too high\");\n\n        IERC20Upgradeable collateralToken = IERC20Upgradeable(collateral);\n        collateralToken.safeTransferFrom(msg.sender, address(this), collateralQuote);\n        curveSUSD.exchange_underlying(curveIndex, 0, collateralQuote, susdQuote);\n\n        _buyFromAMM(rangedMarket, position, amount, susdQuote, additionalSlippage, false);\n    }\n\n    function buyFromAMM(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount,\n        uint expectedPayout,\n        uint additionalSlippage\n    ) public knownRangedMarket(address(rangedMarket)) nonReentrant notPaused {\n        _buyFromAMM(rangedMarket, position, amount, expectedPayout, additionalSlippage, true);\n    }\n\n    function _buyFromAMM(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount,\n        uint expectedPayout,\n        uint additionalSlippage,\n        bool sendSUSD\n    ) internal {\n        require(\n            position == RangedMarket.Position.Out || amount <= _availableToBuyFromAMMOnlyRangedIN(rangedMarket),\n            \"Not enough liquidity\"\n        );\n\n        (uint sUSDPaid, uint leftQuote, uint rightQuote) = buyFromAmmQuoteDetailed(rangedMarket, position, amount);\n\n        uint basePrice = (sUSDPaid * ONE) / amount;\n        require(basePrice > minSupportedPrice && basePrice < ONE, \"Invalid price\");\n        require((sUSDPaid * ONE) / expectedPayout <= (ONE + additionalSlippage), \"Slippage too high\");\n\n        if (sendSUSD) {\n            sUSD.safeTransferFrom(msg.sender, address(this), sUSDPaid);\n        }\n\n        address target;\n        (RangedPosition inp, RangedPosition outp) = rangedMarket.positions();\n\n        if (position == RangedMarket.Position.Out) {\n            target = address(outp);\n            _buyOUT(rangedMarket, amount, leftQuote, rightQuote, additionalSlippage);\n        } else {\n            target = address(inp);\n            _buyIN(rangedMarket, amount, leftQuote, rightQuote, additionalSlippage);\n            _updateSpentOnMarketAndSafeBoxOnBuy(address(rangedMarket), amount, sUSDPaid);\n        }\n\n        rangedMarket.mint(amount, position, msg.sender);\n\n        _handleReferrer(msg.sender, sUSDPaid);\n\n        if (address(stakingThales) != address(0)) {\n            stakingThales.updateVolume(msg.sender, sUSDPaid);\n        }\n\n        emit BoughtFromAmm(msg.sender, address(rangedMarket), position, amount, sUSDPaid, address(sUSD), target);\n    }\n\n    function _buyOUT(\n        RangedMarket rangedMarket,\n        uint amount,\n        uint leftQuote,\n        uint rightQuote,\n        uint additionalSlippage\n    ) internal {\n        thalesAmm.buyFromAMM(\n            address(rangedMarket.leftMarket()),\n            IThalesAMM.Position.Down,\n            amount,\n            leftQuote,\n            additionalSlippage\n        );\n\n        thalesAmm.buyFromAMM(\n            address(rangedMarket.rightMarket()),\n            IThalesAMM.Position.Up,\n            amount,\n            rightQuote,\n            additionalSlippage\n        );\n        // TODO: what if I got 1% less than amount via Thales AMM? set additional slippage to 0 for internal trades\n        // apply the same in all places\n        (, IPosition down) = IPositionalMarket(rangedMarket.leftMarket()).getOptions();\n        IERC20Upgradeable(address(down)).safeTransfer(address(rangedMarket), amount);\n\n        (IPosition up1, ) = IPositionalMarket(rangedMarket.rightMarket()).getOptions();\n        IERC20Upgradeable(address(up1)).safeTransfer(address(rangedMarket), amount);\n    }\n\n    function _buyIN(\n        RangedMarket rangedMarket,\n        uint amount,\n        uint leftQuote,\n        uint rightQuote,\n        uint additionalSlippage\n    ) internal {\n        thalesAmm.buyFromAMM(\n            address(rangedMarket.leftMarket()),\n            IThalesAMM.Position.Up,\n            amount / 2,\n            leftQuote,\n            additionalSlippage\n        );\n\n        thalesAmm.buyFromAMM(\n            address(rangedMarket.rightMarket()),\n            IThalesAMM.Position.Down,\n            amount / 2,\n            rightQuote,\n            additionalSlippage\n        );\n        (IPosition up, ) = IPositionalMarket(rangedMarket.leftMarket()).getOptions();\n        IERC20Upgradeable(address(up)).safeTransfer(address(rangedMarket), amount / 2);\n\n        (, IPosition down1) = IPositionalMarket(rangedMarket.rightMarket()).getOptions();\n        IERC20Upgradeable(address(down1)).safeTransfer(address(rangedMarket), amount / 2);\n    }\n\n    function availableToSellToAMM(RangedMarket rangedMarket, RangedMarket.Position position)\n        public\n        view\n        knownRangedMarket(address(rangedMarket))\n        returns (uint _available)\n    {\n        uint availableLeft =\n            thalesAmm.availableToSellToAMM(\n                address(rangedMarket.leftMarket()),\n                position == RangedMarket.Position.Out ? IThalesAMM.Position.Down : IThalesAMM.Position.Up\n            );\n        uint availableRight =\n            thalesAmm.availableToSellToAMM(\n                address(rangedMarket.rightMarket()),\n                position == RangedMarket.Position.Out ? IThalesAMM.Position.Up : IThalesAMM.Position.Down\n            );\n\n        _available = availableLeft < availableRight ? availableLeft : availableRight;\n        if (position == RangedMarket.Position.In) {\n            _available = _available * 2;\n        }\n    }\n\n    function sellToAmmQuote(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount\n    ) public view knownRangedMarket(address(rangedMarket)) returns (uint pricePaid) {\n        (pricePaid, , ) = sellToAmmQuoteDetailed(rangedMarket, position, amount);\n    }\n\n    function sellToAmmQuoteDetailed(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount\n    )\n        public\n        view\n        knownRangedMarket(address(rangedMarket))\n        returns (\n            uint quoteWithFees,\n            uint leftQuote,\n            uint rightQuote\n        )\n    {\n        amount = position == RangedMarket.Position.Out ? amount : amount / 2;\n        leftQuote = thalesAmm.sellToAmmQuote(\n            address(rangedMarket.leftMarket()),\n            position == RangedMarket.Position.Out ? IThalesAMM.Position.Down : IThalesAMM.Position.Up,\n            amount\n        );\n        rightQuote = thalesAmm.sellToAmmQuote(\n            address(rangedMarket.rightMarket()),\n            position == RangedMarket.Position.Out ? IThalesAMM.Position.Up : IThalesAMM.Position.Down,\n            amount\n        );\n        uint summedQuotes = leftQuote + rightQuote;\n        if (position == RangedMarket.Position.Out) {\n            quoteWithFees = (summedQuotes * (ONE - rangedAmmFee)) / ONE;\n        } else {\n            uint amountTransformed = IPositionalMarketManager(thalesAmm.manager()).transformCollateral(amount);\n            if (\n                amountTransformed > leftQuote &&\n                amountTransformed > rightQuote &&\n                summedQuotes > ((amountTransformed - leftQuote) + (amountTransformed - rightQuote))\n            ) {\n                uint quoteWithoutFees = summedQuotes - ((amountTransformed - leftQuote) + (amountTransformed - rightQuote));\n                quoteWithFees = (quoteWithoutFees * (ONE - rangedAmmFee - safeBoxImpact)) / ONE;\n            }\n        }\n    }\n\n    function sellToAMM(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount,\n        uint expectedPayout,\n        uint additionalSlippage\n    ) public knownRangedMarket(address(rangedMarket)) nonReentrant notPaused {\n        uint availableToSellToAMMATM = availableToSellToAMM(rangedMarket, position);\n        require(availableToSellToAMMATM > 0 && amount <= availableToSellToAMMATM, \"Not enough liquidity.\");\n\n        (uint pricePaid, uint leftQuote, uint rightQuote) = sellToAmmQuoteDetailed(rangedMarket, position, amount);\n        require(pricePaid > 0 && (expectedPayout * ONE) / pricePaid <= (ONE + additionalSlippage), \"Slippage too high\");\n\n        _handleApprovals(rangedMarket);\n\n        if (position == RangedMarket.Position.Out) {\n            rangedMarket.burnOut(amount, msg.sender);\n        } else {\n            rangedMarket.burnIn(amount, msg.sender);\n            _updateSpentOnMarketAndSafeBoxOnSell(amount, rangedMarket, pricePaid);\n        }\n\n        _handleSellToAmm(rangedMarket, position, amount, additionalSlippage, leftQuote, rightQuote);\n\n        sUSD.safeTransfer(msg.sender, pricePaid);\n\n        _handleReferrer(msg.sender, pricePaid);\n\n        if (address(stakingThales) != address(0)) {\n            stakingThales.updateVolume(msg.sender, pricePaid);\n        }\n\n        (RangedPosition inp, RangedPosition outp) = rangedMarket.positions();\n        address target = position == RangedMarket.Position.Out ? address(outp) : address(inp);\n        emit SoldToAMM(msg.sender, address(rangedMarket), position, amount, pricePaid, address(sUSD), target);\n    }\n\n    function _handleSellToAmm(\n        RangedMarket rangedMarket,\n        RangedMarket.Position position,\n        uint amount,\n        uint additionalSlippage,\n        uint leftQuote,\n        uint rightQuote\n    ) internal {\n        uint baseAMMAmount = position == RangedMarket.Position.Out ? amount : amount / 2;\n        thalesAmm.sellToAMM(\n            address(rangedMarket.leftMarket()),\n            position == RangedMarket.Position.Out ? IThalesAMM.Position.Down : IThalesAMM.Position.Up,\n            baseAMMAmount,\n            leftQuote,\n            additionalSlippage\n        );\n\n        thalesAmm.sellToAMM(\n            address(rangedMarket.rightMarket()),\n            position == RangedMarket.Position.Out ? IThalesAMM.Position.Up : IThalesAMM.Position.Down,\n            baseAMMAmount,\n            rightQuote,\n            additionalSlippage\n        );\n    }\n\n    function _handleApprovals(RangedMarket rangedMarket) internal {\n        (IPosition up, IPosition down) = IPositionalMarket(rangedMarket.leftMarket()).getOptions();\n        (IPosition up1, IPosition down1) = IPositionalMarket(rangedMarket.rightMarket()).getOptions();\n        IERC20Upgradeable(address(up)).approve(address(thalesAmm), type(uint256).max);\n        IERC20Upgradeable(address(down)).approve(address(thalesAmm), type(uint256).max);\n        IERC20Upgradeable(address(up1)).approve(address(thalesAmm), type(uint256).max);\n        IERC20Upgradeable(address(down1)).approve(address(thalesAmm), type(uint256).max);\n    }\n\n    function _handleReferrer(address buyer, uint sUSDPaid) internal {\n        if (referrerFee > 0 && referrals != address(0)) {\n            address referrer = IReferrals(referrals).referrals(buyer);\n            if (referrer != address(0)) {\n                uint referrerShare = (sUSDPaid * (ONE + referrerFee)) / ONE - sUSDPaid;\n                sUSD.transfer(referrer, referrerShare);\n                emit ReferrerPaid(referrer, buyer, referrerShare, sUSDPaid);\n            }\n        }\n    }\n\n    function _mapCollateralToCurveIndex(address collateral) internal view returns (int128) {\n        if (collateral == dai) {\n            return 1;\n        }\n        if (collateral == usdc) {\n            return 2;\n        }\n        if (collateral == usdt) {\n            return 3;\n        }\n        return 0;\n    }\n\n    function _updateSpentOnMarketAndSafeBoxOnBuy(\n        address rangedMarket,\n        uint amount,\n        uint sUSDPaid\n    ) internal {\n        uint safeBoxShare = 0;\n        if (safeBoxImpact > 0) {\n            safeBoxShare = sUSDPaid - ((sUSDPaid * ONE) / (ONE + safeBoxImpact));\n            sUSD.transfer(safeBox, safeBoxShare);\n        }\n\n        spentOnMarket[rangedMarket] =\n            spentOnMarket[rangedMarket] +\n            amount -\n            IPositionalMarketManager(thalesAmm.manager()).reverseTransformCollateral(sUSDPaid - safeBoxShare);\n    }\n\n    function _updateSpentOnMarketAndSafeBoxOnSell(\n        uint amount,\n        RangedMarket rangedMarket,\n        uint sUSDPaid\n    ) internal {\n        uint safeBoxShare = 0;\n\n        if (safeBoxImpact > 0) {\n            safeBoxShare = ((sUSDPaid * ONE) / (ONE - safeBoxImpact)) - sUSDPaid;\n            sUSD.transfer(safeBox, safeBoxShare);\n        }\n\n        uint intermediateSum =\n            IPositionalMarketManager(thalesAmm.manager()).reverseTransformCollateral(sUSDPaid + safeBoxShare);\n\n        if (amount > (spentOnMarket[address(rangedMarket)] + intermediateSum)) {\n            spentOnMarket[address(rangedMarket)] = 0;\n        } else {\n            spentOnMarket[address(rangedMarket)] = spentOnMarket[address(rangedMarket)] + intermediateSum - amount;\n        }\n    }\n\n    function transferSusdTo(address receiver, uint amount) external {\n        require(_knownMarkets.contains(msg.sender), \"Not a known ranged market\");\n        sUSD.safeTransfer(receiver, amount);\n    }\n\n    function retrieveSUSDAmount(address payable account, uint amount) external onlyOwner {\n        sUSD.safeTransfer(account, amount);\n    }\n\n    function setRangedMarketMastercopies(address _rangedMarketMastercopy, address _rangedPositionMastercopy)\n        external\n        onlyOwner\n    {\n        rangedMarketMastercopy = _rangedMarketMastercopy;\n        rangedPositionMastercopy = _rangedPositionMastercopy;\n    }\n\n    function setMinMaxSupportedPrice(\n        uint _minSupportedPrice,\n        uint _maxSupportedPrice,\n        uint _minDiffBetweenStrikes,\n        uint _maxDiffBetweenStrikes\n    ) public onlyOwner {\n        minSupportedPrice = _minSupportedPrice;\n        maxSupportedPrice = _maxSupportedPrice;\n        minimalDifBetweenStrikes = _minDiffBetweenStrikes;\n        maximalDifBetweenStrikes = _maxDiffBetweenStrikes;\n        emit SetMinMaxSupportedPrice(minSupportedPrice, maxSupportedPrice);\n        emit SetMinimalMaximalDifBetweenStrikes(minimalDifBetweenStrikes, maximalDifBetweenStrikes);\n    }\n\n    function setSafeBoxData(address _safeBox, uint _safeBoxImpact) external onlyOwner {\n        safeBoxImpact = _safeBoxImpact;\n        safeBox = _safeBox;\n        emit SafeBoxChanged(_safeBoxImpact, _safeBox);\n    }\n\n    function setCapPerMarketAndRangedAMMFee(uint _capPerMarket, uint _rangedAMMFee) external onlyOwner {\n        capPerMarket = _capPerMarket;\n        rangedAmmFee = _rangedAMMFee;\n        emit SetCapPerMarketAndRangedFee(capPerMarket, rangedAmmFee);\n    }\n\n    function setThalesAMMStakingThalesAndReferrals(\n        address _thalesAMM,\n        IStakingThales _stakingThales,\n        address _referrals,\n        uint _referrerFee\n    ) external onlyOwner {\n        thalesAmm = IThalesAMM(_thalesAMM);\n        sUSD.approve(address(thalesAmm), type(uint256).max);\n        stakingThales = _stakingThales;\n        referrals = _referrals;\n        referrerFee = _referrerFee;\n    }\n\n    function setCurveSUSD(\n        address _curveSUSD,\n        address _dai,\n        address _usdc,\n        address _usdt,\n        bool _curveOnrampEnabled\n    ) external onlyOwner {\n        curveSUSD = ICurveSUSD(_curveSUSD);\n        dai = _dai;\n        usdc = _usdc;\n        usdt = _usdt;\n        IERC20(dai).approve(_curveSUSD, type(uint256).max);\n        IERC20(usdc).approve(_curveSUSD, type(uint256).max);\n        IERC20(usdt).approve(_curveSUSD, type(uint256).max);\n        // not needed unless selling into different collateral is enabled\n        //sUSD.approve(_curveSUSD, type(uint256).max);\n        curveOnrampEnabled = _curveOnrampEnabled;\n    }\n\n    modifier knownRangedMarket(address market) {\n        require(_knownMarkets.contains(market), \"Not a known ranged market\");\n        _;\n    }\n\n    event SoldToAMM(\n        address seller,\n        address market,\n        RangedMarket.Position position,\n        uint amount,\n        uint sUSDPaid,\n        address susd,\n        address asset\n    );\n    event BoughtFromAmm(\n        address buyer,\n        address market,\n        RangedMarket.Position position,\n        uint amount,\n        uint sUSDPaid,\n        address susd,\n        address asset\n    );\n\n    event RangedMarketCreated(address market, address leftMarket, address rightMarket);\n    event SafeBoxChanged(uint _safeBoxImpact, address _safeBox);\n    event SetMinMaxSupportedPrice(uint minSupportedPrice, uint maxSupportedPrice);\n    event SetMinimalMaximalDifBetweenStrikes(uint minSupportedPrice, uint maxSupportedPrice);\n    event SetCapPerMarketAndRangedFee(uint capPerMarket, uint rangedAmmFee);\n    event ReferrerPaid(address refferer, address trader, uint amount, uint volume);\n}\n"
    },
    "@openzeppelin/contracts-4.4.1/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-4.4.1/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IThalesAMM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.16;\n\ninterface IThalesAMM {\n    enum Position {Up, Down}\n\n    function manager() external view returns (address);\n\n    function availableToBuyFromAMM(address market, Position position) external view returns (uint);\n\n    function impliedVolatilityPerAsset(bytes32 oracleKey) external view returns(uint);\n\n    function buyFromAmmQuote(\n        address market,\n        Position position,\n        uint amount\n    ) external view returns (uint);\n\n    function buyFromAMM(\n        address market,\n        Position position,\n        uint amount,\n        uint expectedPayout,\n        uint additionalSlippage\n    ) external;\n\n    function availableToSellToAMM(address market, Position position) external view returns (uint);\n\n    function sellToAmmQuote(\n        address market,\n        Position position,\n        uint amount\n    ) external view returns (uint);\n\n    function sellToAMM(\n        address market,\n        Position position,\n        uint amount,\n        uint expectedPayout,\n        uint additionalSlippage\n    ) external;\n\n    function isMarketInAMMTrading(address market) external view returns (bool);\n}\n"
    },
    "contracts/utils/proxy/solidity-0.8.0/ProxyReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ProxyReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n    bool private _initialized;\n\n    function initNonReentrant() public {\n        require(!_initialized, \"Already initialized\");\n        _initialized = true;\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\n"
    },
    "contracts/utils/proxy/solidity-0.8.0/ProxyOwned.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// Clone of syntetix contract without constructor\ncontract ProxyOwned {\n    address public owner;\n    address public nominatedOwner;\n    bool private _initialized;\n    bool private _transferredAtInit;\n\n    function setOwner(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        require(!_initialized, \"Already initialized, use nominateNewOwner\");\n        _initialized = true;\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    function transferOwnershipAtInit(address proxyAddress) external onlyOwner {\n        require(proxyAddress != address(0), \"Invalid address\");\n        require(!_transferredAtInit, \"Already transferred\");\n        owner = proxyAddress;\n        _transferredAtInit = true;\n        emit OwnerChanged(owner, proxyAddress);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n"
    },
    "contracts/utils/proxy/solidity-0.8.0/ProxyPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"./ProxyOwned.sol\";\n\n// Clone of syntetix contract without constructor\n\ncontract ProxyPausable is ProxyOwned {\n    uint public lastPauseTime;\n    bool public paused;\n\n    \n\n    /**\n     * @notice Change the paused state of the contract\n     * @dev Only the contract owner may call this.\n     */\n    function setPaused(bool _paused) external onlyOwner {\n        // Ensure we're actually changing the state before we do anything\n        if (_paused == paused) {\n            return;\n        }\n\n        // Set our paused state.\n        paused = _paused;\n\n        // If applicable, set the last pause time.\n        if (paused) {\n            lastPauseTime = block.timestamp;\n        }\n\n        // Let everyone know that our pause state has changed.\n        emit PauseChanged(paused);\n    }\n\n    event PauseChanged(bool isPaused);\n\n    modifier notPaused {\n        require(!paused, \"This action cannot be performed while the contract is paused\");\n        _;\n    }\n}\n"
    },
    "contracts/utils/libraries/AddressSetLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary AddressSetLib {\n    struct AddressSet {\n        address[] elements;\n        mapping(address => uint) indices;\n    }\n\n    function contains(AddressSet storage set, address candidate) internal view returns (bool) {\n        if (set.elements.length == 0) {\n            return false;\n        }\n        uint index = set.indices[candidate];\n        return index != 0 || set.elements[0] == candidate;\n    }\n\n    function getPage(\n        AddressSet storage set,\n        uint index,\n        uint pageSize\n    ) internal view returns (address[] memory) {\n        // NOTE: This implementation should be converted to slice operators if the compiler is updated to v0.6.0+\n        uint endIndex = index + pageSize; // The check below that endIndex <= index handles overflow.\n\n        // If the page extends past the end of the list, truncate it.\n        if (endIndex > set.elements.length) {\n            endIndex = set.elements.length;\n        }\n        if (endIndex <= index) {\n            return new address[](0);\n        }\n\n        uint n = endIndex - index; // We already checked for negative overflow.\n        address[] memory page = new address[](n);\n        for (uint i; i < n; i++) {\n            page[i] = set.elements[i + index];\n        }\n        return page;\n    }\n\n    function add(AddressSet storage set, address element) internal {\n        // Adding to a set is an idempotent operation.\n        if (!contains(set, element)) {\n            set.indices[element] = set.elements.length;\n            set.elements.push(element);\n        }\n    }\n\n    function remove(AddressSet storage set, address element) internal {\n        require(contains(set, element), \"Element not in set.\");\n        // Replace the removed element with the last element of the list.\n        uint index = set.indices[element];\n        uint lastIndex = set.elements.length - 1; // We required that element is in the list, so it is not empty.\n        if (index != lastIndex) {\n            // No need to shift the last element if it is the one we want to delete.\n            address shiftedElement = set.elements[lastIndex];\n            set.elements[index] = shiftedElement;\n            set.indices[shiftedElement] = index;\n        }\n        set.elements.pop();\n        delete set.indices[element];\n    }\n}"
    },
    "contracts/interfaces/IStakingThales.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.16;\n\ninterface IStakingThales {\n    function updateVolume(address account, uint amount) external;\n\n    /* ========== VIEWS / VARIABLES ========== */\n    function totalStakedAmount() external view returns (uint);\n\n    function stakedBalanceOf(address account) external view returns (uint);\n\n    function currentPeriodRewards() external view returns (uint);\n\n    function currentPeriodFees() external view returns (uint);\n\n    function getLastPeriodOfClaimedRewards(address account) external view returns (uint);\n\n    function getRewardsAvailable(address account) external view returns (uint);\n\n    function getRewardFeesAvailable(address account) external view returns (uint);\n\n    function getAlreadyClaimedRewards(address account) external view returns (uint);\n\n    function getContractRewardFunds() external view returns (uint);\n\n    function getContractFeeFunds() external view returns (uint);\n}\n"
    },
    "contracts/interfaces/IReferrals.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.16;\n\ninterface IReferrals {\n    function referrals(address) external view returns (address);\n    function sportReferrals(address) external view returns (address);\n\n    function setReferrer(address, address) external;\n}\n"
    },
    "contracts/interfaces/ICurveSUSD.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.16;\n\ninterface ICurveSUSD {\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 _dx,\n        uint256 _min_dy\n    ) external returns (uint256);\n\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 _dx\n    ) external view returns (uint256);\n\n    //    @notice Perform an exchange between two underlying coins\n    //    @param i Index value for the underlying coin to send\n    //    @param j Index valie of the underlying coin to receive\n    //    @param _dx Amount of `i` being exchanged\n    //    @param _min_dy Minimum amount of `j` to receive\n    //    @param _receiver Address that receives `j`\n    //    @return Actual amount of `j` received\n\n    // indexes:\n    // 0 = sUSD 18 dec 0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9\n    // 1= DAI 18 dec 0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1\n    // 2= USDC 6 dec 0x7F5c764cBc14f9669B88837ca1490cCa17c31607\n    // 3= USDT 6 dec 0x94b008aA00579c1307B0EF2c499aD98a8ce58e58\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}